(window.webpackJsonp=window.webpackJsonp||[]).push([[71],{444:function(t,a,s){"use strict";s.r(a);var e=s(0),r=Object(e.a)({},(function(){var t=this,a=t._self._c;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"分布式缓存"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#分布式缓存"}},[t._v("#")]),t._v(" 分布式缓存")]),t._v(" "),a("p",[t._v("-- 基于Redis集群解决单机Redis存在的问题")]),t._v(" "),a("p",[t._v("单机的Redis存在四大问题：")]),t._v(" "),a("p",[a("img",{attrs:{src:"http://stofu80ry.sabkt.gdipper.com/picture/image-20210725144240631.png",alt:"image-20210725144240631"}})]),t._v(" "),a("h1",{attrs:{id:"_0-学习目标"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_0-学习目标"}},[t._v("#")]),t._v(" 0.学习目标")]),t._v(" "),a("h1",{attrs:{id:"_1-redis持久化"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-redis持久化"}},[t._v("#")]),t._v(" 1.Redis持久化")]),t._v(" "),a("p",[t._v("Redis有两种持久化方案：")]),t._v(" "),a("ul",[a("li",[t._v("RDB持久化")]),t._v(" "),a("li",[t._v("AOF持久化")])]),t._v(" "),a("h2",{attrs:{id:"_1-1-rdb持久化"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-1-rdb持久化"}},[t._v("#")]),t._v(" 1.1.RDB持久化")]),t._v(" "),a("p",[a("strong",[t._v("RDB全称Redis Database Backup file（Redis数据备份文件）")]),t._v("，也被叫做"),a("strong",[t._v("Redis数据快照")]),t._v("。简单来说就是把内存中的所有数据都记录到磁盘中。当Redis实例故障重启后，从磁盘读取快照文件，恢复数据。快照文件称为RDB文件，"),a("strong",[t._v("默认是保存在当前运行目录。")])]),t._v(" "),a("h3",{attrs:{id:"_1-1-1-执行时机"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-1-1-执行时机"}},[t._v("#")]),t._v(" 1.1.1.执行时机")]),t._v(" "),a("p",[t._v("RDB持久化在四种情况下会执行：")]),t._v(" "),a("ul",[a("li",[a("p",[t._v("执行save命令")])]),t._v(" "),a("li",[a("p",[t._v("执行bgsave命令")])]),t._v(" "),a("li",[a("p",[t._v("Redis停机时")])]),t._v(" "),a("li",[a("p",[t._v("触发RDB条件时")])])]),t._v(" "),a("p",[a("strong",[t._v("1）save命令")])]),t._v(" "),a("p",[t._v("执行下面的命令，可以立即执行一次RDB：")]),t._v(" "),a("p",[a("img",{attrs:{src:"http://stofu80ry.sabkt.gdipper.com/picture/image-20250207181659789.png",alt:"image-20250207181659789"}})]),t._v(" "),a("p",[t._v("save命令会导致主进程执行RDB，这个过程中其它所有命令都会被阻塞。只有在数据迁移时可能用到。")]),t._v(" "),a("p",[a("strong",[t._v("2）bgsave命令")]),t._v("**")]),t._v(" "),a("p",[t._v("下面的命令可以异步执行RDB：")]),t._v(" "),a("p",[a("img",{attrs:{src:"http://stofu80ry.sabkt.gdipper.com/picture/image-20210725144725943.png",alt:"image-20210725144725943"}})]),t._v(" "),a("p",[t._v("这个命令执行后会开启独立进程完成RDB，主进程可以持续处理用户请求，不受影响。")]),t._v(" "),a("p",[a("strong",[t._v("3）停机时")])]),t._v(" "),a("p",[t._v("Redis停机时会执行一次save命令，实现RDB持久化。")]),t._v(" "),a("p",[a("img",{attrs:{src:"http://stofu80ry.sabkt.gdipper.com/picture/image-20250207182612426.png",alt:"image-20250207182612426"}})]),t._v(" "),a("p",[a("strong",[t._v("4）触发RDB条件")])]),t._v(" "),a("p",[t._v("Redis内部有触发RDB的机制，可以在redis.conf文件中找到，格式如下：")]),t._v(" "),a("div",{staticClass:"language-properties extra-class"},[a("pre",{pre:!0,attrs:{class:"language-properties"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v('# 900秒内，如果至少有1个key被修改，则执行bgsave ， 如果是save "" 则表示禁用RDB')]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token key attr-name"}},[t._v("save")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token value attr-value"}},[t._v("900 1  ")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token key attr-name"}},[t._v("save")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token value attr-value"}},[t._v("300 10  ")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token key attr-name"}},[t._v("save")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token value attr-value"}},[t._v("60 10000 ")]),t._v("\n")])])]),a("p",[t._v("RDB的其它配置也可以在redis.conf文件中设置：")]),t._v(" "),a("div",{staticClass:"language-properties extra-class"},[a("pre",{pre:!0,attrs:{class:"language-properties"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 是否压缩 ,建议不开启，压缩也会消耗cpu，磁盘的话不值钱")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token key attr-name"}},[t._v("rdbcompression")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token value attr-value"}},[t._v("yes")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# RDB文件名称")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token key attr-name"}},[t._v("dbfilename")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token value attr-value"}},[t._v("dump.rdb  ")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 文件保存的路径目录")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token key attr-name"}},[t._v("dir")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token value attr-value"}},[t._v("./ ")]),t._v("\n")])])]),a("h3",{attrs:{id:"_1-1-2-rdb原理"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-1-2-rdb原理"}},[t._v("#")]),t._v(" 1.1.2.RDB原理")]),t._v(" "),a("p",[t._v("bgsave开始时会fork主进程得到子进程，子进程通过复制页表共享主进程的内存数据。完成fork后读取内存数据并写入 RDB 文件。")]),t._v(" "),a("p",[t._v("fork采用的是copy-on-write技术：")]),t._v(" "),a("ul",[a("li",[t._v("当主进程执行读操作时，访问共享内存；")]),t._v(" "),a("li",[t._v("当主进程执行写操作时，则会拷贝一份数据，执行写操作。")])]),t._v(" "),a("p",[a("img",{attrs:{src:"http://stofu80ry.sabkt.gdipper.com/picture/image-20250207233533179.png",alt:"image-20250207233533179"}})]),t._v(" "),a("h3",{attrs:{id:"_1-1-3-小结"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-1-3-小结"}},[t._v("#")]),t._v(" 1.1.3.小结")]),t._v(" "),a("p",[t._v("RDB方式bgsave的基本流程？")]),t._v(" "),a("ul",[a("li",[t._v("fork主进程得到一个子进程，共享内存空间")]),t._v(" "),a("li",[t._v("子进程读取内存数据并写入新的RDB文件")]),t._v(" "),a("li",[t._v("用新RDB文件替换旧的RDB文件")])]),t._v(" "),a("p",[t._v("RDB会在什么时候执行？save 60 1000代表什么含义？")]),t._v(" "),a("ul",[a("li",[t._v("默认是服务停止时")]),t._v(" "),a("li",[t._v("代表60秒内至少执行1000次修改则触发RDB")])]),t._v(" "),a("p",[a("strong",[t._v("RDB的缺点")]),t._v("？")]),t._v(" "),a("ul",[a("li",[t._v("RDB执行间隔时间长，两次RDB之间写入数据有丢失的风险")]),t._v(" "),a("li",[t._v("fork子进程、压缩、写出RDB文件都比较耗时")])]),t._v(" "),a("h2",{attrs:{id:"_1-2-aof持久化"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-2-aof持久化"}},[t._v("#")]),t._v(" 1.2.AOF持久化")]),t._v(" "),a("h3",{attrs:{id:"_1-2-1-aof原理"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-2-1-aof原理"}},[t._v("#")]),t._v(" 1.2.1.AOF原理")]),t._v(" "),a("p",[t._v("AOF全称为Append Only File（追加文件）。Redis处理的每一个写命令都会记录在AOF文件，可以看做是命令日志文件。")]),t._v(" "),a("p",[a("img",{attrs:{src:"http://stofu80ry.sabkt.gdipper.com/picture/image-20210725151543640.png",alt:"image-20210725151543640"}})]),t._v(" "),a("h3",{attrs:{id:"_1-2-2-aof配置"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-2-2-aof配置"}},[t._v("#")]),t._v(" 1.2.2.AOF配置")]),t._v(" "),a("p",[t._v("AOF默认是关闭的，需要修改redis.conf配置文件来开启AOF：")]),t._v(" "),a("div",{staticClass:"language-properties extra-class"},[a("pre",{pre:!0,attrs:{class:"language-properties"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 是否开启AOF功能，默认是no")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token key attr-name"}},[t._v("appendonly")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token value attr-value"}},[t._v("yes")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# AOF文件的名称")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token key attr-name"}},[t._v("appendfilename")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token value attr-value"}},[t._v('"appendonly.aof"')]),t._v("\n")])])]),a("p",[t._v("AOF的命令记录的频率也可以通过redis.conf文件来配：")]),t._v(" "),a("div",{staticClass:"language-properties extra-class"},[a("pre",{pre:!0,attrs:{class:"language-properties"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 表示每执行一次写命令，立即记录到AOF文件")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token key attr-name"}},[t._v("appendfsync")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token value attr-value"}},[t._v("always ")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 写命令执行完先放入AOF缓冲区，然后表示每隔1秒将缓冲区数据写到AOF文件，是默认方案")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token key attr-name"}},[t._v("appendfsync")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token value attr-value"}},[t._v("everysec ")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 写命令执行完先放入AOF缓冲区，由操作系统决定何时将缓冲区内容写回磁盘")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token key attr-name"}},[t._v("appendfsync")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token value attr-value"}},[t._v("no")]),t._v("\n")])])]),a("p",[t._v("三种策略对比：")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[a("strong",[t._v("配置项")])]),t._v(" "),a("th",[a("strong",[t._v("刷盘时机")])]),t._v(" "),a("th",[a("strong",[t._v("优点")])]),t._v(" "),a("th",[a("strong",[t._v("缺点")])])])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v("Always")]),t._v(" "),a("td",[t._v("同步刷盘")]),t._v(" "),a("td",[t._v("可靠性高，几乎不丢数据")]),t._v(" "),a("td",[t._v("性能影响大")])]),t._v(" "),a("tr",[a("td",[t._v("everysec")]),t._v(" "),a("td",[t._v("每秒刷盘")]),t._v(" "),a("td",[t._v("性能适中")]),t._v(" "),a("td",[t._v("最多丢失1秒数据")])]),t._v(" "),a("tr",[a("td",[t._v("no")]),t._v(" "),a("td",[t._v("操作系统控制")]),t._v(" "),a("td",[t._v("性能最好")]),t._v(" "),a("td",[t._v("可靠性较差，可能丢失大量数据")])])])]),t._v(" "),a("h3",{attrs:{id:"_1-2-3-aof文件重写bgrewriteaof"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-2-3-aof文件重写bgrewriteaof"}},[t._v("#")]),t._v(" 1.2.3.AOF文件重写bgrewriteaof")]),t._v(" "),a("p",[t._v("因为是记录命令，AOF文件会比RDB文件大的多。而且AOF会记录对同一个key的多次写操作，但只有最后一次写操作才有意义。通过执行"),a("strong",[t._v("bgrewriteaof")]),t._v("命令，可以让AOF文件执行重写功能，用最少的命令达到相同效果。")]),t._v(" "),a("p",[a("img",{attrs:{src:"http://stofu80ry.sabkt.gdipper.com/picture/image-20210725151729118.png",alt:"image-20210725151729118"}})]),t._v(" "),a("p",[t._v("如图，AOF原本有三个命令，但是"),a("code",[t._v("set num 123 和 set num 666")]),t._v("都是对num的操作，第二次会覆盖第一次的值，因此第一个命令记录下来没有意义。")]),t._v(" "),a("p",[t._v("所以重写命令后，AOF文件内容就是："),a("code",[t._v("mset name jack num 666")])]),t._v(" "),a("p",[t._v("Redis也会在触发阈值时自动去重写AOF文件。阈值也可以在redis.conf中配置：")]),t._v(" "),a("div",{staticClass:"language-properties extra-class"},[a("pre",{pre:!0,attrs:{class:"language-properties"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# AOF文件比上次文件 增长超过多少百分比则触发重写")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token key attr-name"}},[t._v("auto-aof-rewrite-percentage")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token value attr-value"}},[t._v("100")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# AOF文件体积最小多大以上才触发重写 ")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token key attr-name"}},[t._v("auto-aof-rewrite-min-size")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token value attr-value"}},[t._v("64mb ")]),t._v("\n")])])]),a("h2",{attrs:{id:"_1-3-rdb与aof对比"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-3-rdb与aof对比"}},[t._v("#")]),t._v(" 1.3.RDB与AOF对比")]),t._v(" "),a("p",[t._v("RDB和AOF各有自己的优缺点，如果对数据安全性要求较高，在实际开发中往往会"),a("strong",[t._v("结合")]),t._v("两者来使用。")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th"),t._v(" "),a("th",[a("strong",[t._v("RDB")])]),t._v(" "),a("th",[a("strong",[t._v("AOF")])])])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v("持久化方式")]),t._v(" "),a("td",[t._v("定时对整个内存做快照")]),t._v(" "),a("td",[t._v("记录每一次执行的命令")])]),t._v(" "),a("tr",[a("td",[t._v("数据完整性")]),t._v(" "),a("td",[t._v("不完整，两次备份之间会丢失")]),t._v(" "),a("td",[t._v("相对完整，取决于刷盘策略")])]),t._v(" "),a("tr",[a("td",[t._v("文件大小")]),t._v(" "),a("td",[t._v("会有压缩，文件体积小")]),t._v(" "),a("td",[t._v("记录命令，文件体积很大")])]),t._v(" "),a("tr",[a("td",[t._v("宕机恢复速度")]),t._v(" "),a("td",[t._v("很快")]),t._v(" "),a("td",[t._v("慢")])]),t._v(" "),a("tr",[a("td",[t._v("数据恢复优先级")]),t._v(" "),a("td",[t._v("低，因为数据完整性不如AOF")]),t._v(" "),a("td",[t._v("高，因为数据完整性更高")])]),t._v(" "),a("tr",[a("td",[t._v("系统资源占用")]),t._v(" "),a("td",[t._v("高，大量CPU和内存消耗")]),t._v(" "),a("td",[t._v("低，主要是磁盘IO资源  但AOF重写时会占用大量CPU和内存资源")])]),t._v(" "),a("tr",[a("td",[t._v("使用场景")]),t._v(" "),a("td",[t._v("可以容忍数分钟的数据丢失，追求更快的启动速度")]),t._v(" "),a("td",[t._v("对数据安全性要求较高常见")])])])]),t._v(" "),a("h1",{attrs:{id:"_2-redis主从"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-redis主从"}},[t._v("#")]),t._v(" 2.Redis主从")]),t._v(" "),a("h2",{attrs:{id:"_2-1-搭建主从架构"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-1-搭建主从架构"}},[t._v("#")]),t._v(" 2.1.搭建主从架构")]),t._v(" "),a("p",[t._v("单节点Redis的并发能力是有上限的，要进一步提高Redis的并发能力，就需要搭建主从集群，实现读写分离。")]),t._v(" "),a("p",[a("img",{attrs:{src:"http://stofu80ry.sabkt.gdipper.com/picture/image-20210725152037611.png",alt:"image-20210725152037611"}})]),t._v(" "),a("p",[t._v("具体搭建流程参考《"),a("RouterLink",{attrs:{to:"/10.Redis/Redis集群.html"}},[t._v("Redis集群")]),t._v("》：")],1),t._v(" "),a("p",[t._v("使用slaveof/replicaof指定主从关系")]),t._v(" "),a("h2",{attrs:{id:"_2-2-主从数据同步原理"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-2-主从数据同步原理"}},[t._v("#")]),t._v(" 2.2.主从数据同步原理")]),t._v(" "),a("h3",{attrs:{id:"_2-2-1-全量同步"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-2-1-全量同步"}},[t._v("#")]),t._v(" 2.2.1.全量同步")]),t._v(" "),a("p",[t._v("主从第一次建立连接时，会执行"),a("strong",[t._v("全量同步")]),t._v("，将master节点的所有数据都拷贝给slave节点，流程：")]),t._v(" "),a("p",[a("img",{attrs:{src:"http://stofu80ry.sabkt.gdipper.com/picture/image-20210725152222497.png",alt:"image-20210725152222497"}})]),t._v(" "),a("p",[t._v("这里有一个问题，master如何得知salve是第一次来连接呢？？")]),t._v(" "),a("p",[a("strong",[t._v("有几个概念")]),t._v("，可以作为判断依据：")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("Replication Id")]),t._v("：简称replid，是数据集的标记，id一致则说明是同一数据集。每一个master都有唯一的replid，slave则会继承master节点的replid")]),t._v(" "),a("li",[a("strong",[t._v("offset")]),t._v("：偏移量，随着记录在repl_baklog中的数据增多而逐渐增大。slave完成同步时也会记录当前同步的offset。如果slave的offset小于master的offset，说明slave数据落后于master，需要更新。")])]),t._v(" "),a("p",[t._v("因此slave做数据同步，"),a("strong",[t._v("必须向master声明自己的replication id 和offset")]),t._v("，master才可以判断到底需要同步哪些数据。")]),t._v(" "),a("p",[t._v("因为slave原本也是一个master，有自己的replid和offset，当第一次变成slave，与master建立连接时，发送的replid和offset是自己的replid和offset。")]),t._v(" "),a("p",[t._v("master判断发现slave发送来的replid与自己的不一致，说明这是一个全新的slave，就知道要做"),a("strong",[t._v("全量同步")]),t._v("了。")]),t._v(" "),a("p",[t._v("master会将自己的replid和offset都发送给这个slave，slave保存这些信息。以后slave的replid就与master一致了。")]),t._v(" "),a("p",[t._v("因此，"),a("strong",[t._v("master判断一个节点是否是第一次同步的依据，就是看replid是否一致")]),t._v("。")]),t._v(" "),a("p",[t._v("如图：")]),t._v(" "),a("p",[a("img",{attrs:{src:"http://stofu80ry.sabkt.gdipper.com/picture/image-20250208172138875.png",alt:"image-20250208172138875"}})]),t._v(" "),a("p",[t._v("完整流程描述：")]),t._v(" "),a("ul",[a("li",[t._v("slave节点请求增量同步")]),t._v(" "),a("li",[t._v("master节点判断replid，发现不一致，拒绝增量同步")]),t._v(" "),a("li",[t._v("master将完整内存数据生成RDB，发送RDB到slave")]),t._v(" "),a("li",[t._v("slave清空本地数据，加载master的RDB")]),t._v(" "),a("li",[t._v("master将RDB期间的命令记录在repl_baklog，并持续将log中的命令发送给slave")]),t._v(" "),a("li",[t._v("slave执行接收到的命令，保持与master之间的同步")])]),t._v(" "),a("h3",{attrs:{id:"_2-2-2-增量同步"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-2-2-增量同步"}},[t._v("#")]),t._v(" 2.2.2.增量同步")]),t._v(" "),a("p",[t._v("全量同步需要先做RDB，然后将RDB文件通过网络传输个slave，成本太高了。因此除了第一次做全量同步，其它大多数时候slave与master都是做"),a("strong",[t._v("增量同步")]),t._v("。")]),t._v(" "),a("p",[t._v("什么是增量同步？就是"),a("strong",[t._v("只更新slave与master存在差异的部分数据")]),t._v("。如图：")]),t._v(" "),a("p",[a("img",{attrs:{src:"http://stofu80ry.sabkt.gdipper.com/picture/image-20210725153201086.png",alt:"image-20210725153201086"}})]),t._v(" "),a("p",[t._v("那么master怎么知道slave与自己的数据差异在哪里呢?")]),t._v(" "),a("h3",{attrs:{id:"_2-2-3-repl-backlog原理"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-2-3-repl-backlog原理"}},[t._v("#")]),t._v(" 2.2.3.repl_backlog原理")]),t._v(" "),a("p",[t._v("master怎么知道slave与自己的数据差异在哪里呢?")]),t._v(" "),a("p",[t._v("这就要说到全量同步时的repl_baklog文件了。")]),t._v(" "),a("p",[t._v("这个文件是一个固定大小的数组，只不过数组是"),a("strong",[t._v("环形")]),t._v("，也就是说"),a("strong",[t._v("角标到达数组末尾后，会再次从0开始读写")]),t._v("，这样数组头部的数据就会被覆盖。")]),t._v(" "),a("p",[t._v("repl_baklog中会记录Redis处理过的命令日志及offset，包括master当前的offset，和slave已经拷贝到的offset：")]),t._v(" "),a("p",[a("img",{attrs:{src:"http://stofu80ry.sabkt.gdipper.com/picture/image-20210725153359022.png",alt:"image-20210725153359022"}})]),t._v(" "),a("p",[t._v("slave与master的offset之间的差异，就是salve需要增量拷贝的数据了。")]),t._v(" "),a("p",[t._v("随着不断有数据写入，master的offset逐渐变大，slave也不断的拷贝，追赶master的offset：")]),t._v(" "),a("p",[t._v("直到数组被填满：")]),t._v(" "),a("p",[a("img",{attrs:{src:"http://stofu80ry.sabkt.gdipper.com/picture/image-20210725153715910.png",alt:"image-20210725153715910"}})]),t._v(" "),a("p",[t._v("此时，如果有新的数据写入，就会覆盖数组中的旧数据。不过，旧的数据只要是绿色的，说明是已经被同步到slave的数据，即便被覆盖了也没什么影响。因为未同步的仅仅是红色部分。")]),t._v(" "),a("p",[t._v("但是，如果slave出现网络阻塞，导致master的offset远远超过了slave的offset：")]),t._v(" "),a("p",[a("img",{attrs:{src:"http://stofu80ry.sabkt.gdipper.com/picture/image-20210725153937031.png",alt:"image-20210725153937031"}})]),t._v(" "),a("p",[t._v("如果master继续写入新数据，其offset就会覆盖旧的数据，直到将slave现在的offset也覆盖：")]),t._v(" "),a("p",[t._v("此时如果slave恢复，需要同步，却发现自己的offset都没有了，无法完成增量同步了。只能做全量同步。")]),t._v(" "),a("p",[t._v("repl_baklog大小有上限，写满后会覆盖最早的数据。如果slave断开时间过久，"),a("strong",[t._v("导致尚未备份的数据被覆盖，则无法基于log做增量同步，只能再次全量同步")]),t._v("。")]),t._v(" "),a("h2",{attrs:{id:"_2-3-主从同步优化"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-3-主从同步优化"}},[t._v("#")]),t._v(" 2.3.主从同步优化**")]),t._v(" "),a("p",[t._v("主从同步可以保证主从数据的一致性，非常重要。")]),t._v(" "),a("p",[t._v("可以从以下几个方面来优化Redis主从就集群：")]),t._v(" "),a("ul",[a("li",[t._v("在master中配置**"),a("code",[t._v("repl-diskless-sync yes")]),t._v("启用无磁盘复制**，避免全量同步时的磁盘IO。")]),t._v(" "),a("li",[t._v("Redis单节点上的"),a("strong",[t._v("内存占用不要太大")]),t._v("，减少RDB导致的过多磁盘IO")]),t._v(" "),a("li",[t._v("适当"),a("strong",[t._v("提高repl_baklog的大小")]),t._v("，发现slave宕机时"),a("strong",[t._v("尽快实现故障恢复")]),t._v("，尽可能避免全量同步")]),t._v(" "),a("li",[t._v("限制一个master上的slave节点数量，如果实在是太多slave，则可以采用"),a("strong",[t._v("主-从-从链式结构")]),t._v("，减少master压力")])]),t._v(" "),a("p",[t._v("主从从架构图：")]),t._v(" "),a("p",[a("img",{attrs:{src:"http://stofu80ry.sabkt.gdipper.com/picture/image-20210725154405899.png",alt:"image-20210725154405899"}})]),t._v(" "),a("h2",{attrs:{id:"_2-4-小结"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-4-小结"}},[t._v("#")]),t._v(" 2.4.小结**")]),t._v(" "),a("p",[t._v("简述全量同步和增量同步区别？")]),t._v(" "),a("ul",[a("li",[t._v("全量同步：master将完整内存数据生成"),a("strong",[t._v("RDB")]),t._v("，发送RDB到slave。后续命令则记录在repl_baklog，逐个发送给slave。")]),t._v(" "),a("li",[t._v("增量同步："),a("strong",[t._v("slave提交自己的offset")]),t._v("到master，"),a("strong",[t._v("master")]),t._v("获取"),a("strong",[t._v("repl_baklog")]),t._v("中"),a("strong",[t._v("从offset之后的命令")]),t._v("给slave")])]),t._v(" "),a("p",[t._v("什么时候执行全量同步？")]),t._v(" "),a("ul",[a("li",[t._v("slave节点第一次连接master节点时")]),t._v(" "),a("li",[t._v("slave节点断开时间太久，repl_baklog中的offset已经被覆盖时")])]),t._v(" "),a("p",[t._v("什么时候执行增量同步？")]),t._v(" "),a("ul",[a("li",[t._v("slave节点断开又恢复，并且在repl_baklog中能找到offset时")])]),t._v(" "),a("h1",{attrs:{id:"_3-redis哨兵"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-redis哨兵"}},[t._v("#")]),t._v(" 3.Redis哨兵")]),t._v(" "),a("p",[t._v("Redis提供了哨兵（Sentinel）机制来实现主从集群的自动故障恢复。")]),t._v(" "),a("h2",{attrs:{id:"_3-1-哨兵原理"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-1-哨兵原理"}},[t._v("#")]),t._v(" 3.1.哨兵原理")]),t._v(" "),a("h3",{attrs:{id:"_3-1-1-集群结构和作用"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-1-1-集群结构和作用"}},[t._v("#")]),t._v(" 3.1.1.集群结构和作用")]),t._v(" "),a("p",[t._v("哨兵的结构如图：")]),t._v(" "),a("p",[a("img",{attrs:{src:"http://stofu80ry.sabkt.gdipper.com/picture/image-20210701215227018.png",alt:"image-20210701215227018"}})]),t._v(" "),a("p",[t._v("哨兵的作用如下：")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("监控")]),t._v("：Sentinel 会不断检查您的master和slave是否按预期工作")]),t._v(" "),a("li",[a("strong",[t._v("自动故障恢复")]),t._v("：如果master故障，Sentinel会将一个slave提升为master。当故障实例恢复后也以新的master为主")]),t._v(" "),a("li",[a("strong",[t._v("通知")]),t._v("：Sentinel充当Redis客户端的服务发现来源，当集群发生故障转移时，会将最新信息推送给Redis的客户端")])]),t._v(" "),a("h3",{attrs:{id:"_3-1-2-集群监控原理"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-1-2-集群监控原理"}},[t._v("#")]),t._v(" 3.1.2.集群监控原理")]),t._v(" "),a("p",[t._v("Sentinel基于心跳机制监测服务状态，每隔1秒向集群的每个实例发送ping命令：")]),t._v(" "),a("ul",[a("li",[a("p",[t._v("主观下线：如果某sentinel节点发现某实例未在规定时间响应，则认为该实例"),a("strong",[t._v("主观下线")]),t._v("。")])]),t._v(" "),a("li",[a("p",[t._v("客观下线：若超过指定数量（quorum）的sentinel都认为该实例主观下线，则该实例"),a("strong",[t._v("客观下线")]),t._v("。quorum值最好超过Sentinel实例数量的一半。")])])]),t._v(" "),a("p",[a("img",{attrs:{src:"http://stofu80ry.sabkt.gdipper.com/picture/image-20250208223820848.png",alt:"image-20250208223820848"}})]),t._v(" "),a("h3",{attrs:{id:"_3-1-3-集群故障恢复原理"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-1-3-集群故障恢复原理"}},[t._v("#")]),t._v(" 3.1.3.集群故障恢复原理")]),t._v(" "),a("p",[t._v("一旦发现master故障，sentinel需要在salve中选择一个作为新的master，选择依据是这样的：")]),t._v(" "),a("ul",[a("li",[t._v("首先会判断slave节点与master节点"),a("strong",[t._v("断开时间长短")]),t._v("，如果超过指定值（down-after-milliseconds * 10）则会排除该slave节点")]),t._v(" "),a("li",[t._v("然后判断slave节点的"),a("strong",[t._v("slave-priority值")]),t._v("，越小优先级越高，如果是0则永不参与选举")]),t._v(" "),a("li",[t._v("如果slave-prority一样，则判断"),a("strong",[t._v("slave节点的offset值")]),t._v("，越大说明数据越新，优先级越高")]),t._v(" "),a("li",[t._v("最后是判断slave节点的"),a("strong",[t._v("运行id大小")]),t._v("，越小优先级越高。")])]),t._v(" "),a("p",[t._v("当选出一个新的master后，该如何实现切换呢？")]),t._v(" "),a("p",[t._v("流程如下：")]),t._v(" "),a("ul",[a("li",[t._v("sentinel给备选的slave1节点发送slaveof no one命令，让该节点成为master")]),t._v(" "),a("li",[t._v("sentinel给所有其它slave发送slaveof 192.168.150.101 7002 命令，让这些slave成为新master的从节点，开始从新的master上同步数据。")]),t._v(" "),a("li",[t._v("最后，sentinel将故障节点标记为slave，当故障节点恢复后会自动成为新的master的slave节点")])]),t._v(" "),a("p",[a("img",{attrs:{src:"http://stofu80ry.sabkt.gdipper.com/picture/image-20250208223908556.png",alt:"image-20250208223908556"}})]),t._v(" "),a("h3",{attrs:{id:"_3-1-4-小结"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-1-4-小结"}},[t._v("#")]),t._v(" 3.1.4.小结")]),t._v(" "),a("p",[t._v("Sentinel的三个作用是什么？")]),t._v(" "),a("ul",[a("li",[t._v("监控")]),t._v(" "),a("li",[t._v("故障转移")]),t._v(" "),a("li",[t._v("通知")])]),t._v(" "),a("p",[t._v("Sentinel如何判断一个redis实例是否健康？")]),t._v(" "),a("ul",[a("li",[t._v("每隔1秒发送一次ping命令，如果超过一定时间没有相向则认为是主观下线")]),t._v(" "),a("li",[t._v("如果大多数sentinel都认为实例主观下线，则判定服务下线")])]),t._v(" "),a("p",[t._v("故障转移步骤有哪些？")]),t._v(" "),a("ul",[a("li",[t._v("首先选定一个slave作为新的master，执行slaveof no one")]),t._v(" "),a("li",[t._v("然后让所有节点都执行slaveof 新master")]),t._v(" "),a("li",[t._v("修改故障节点配置，添加slaveof 新master")])]),t._v(" "),a("h2",{attrs:{id:"_3-2-搭建哨兵集群"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-2-搭建哨兵集群"}},[t._v("#")]),t._v(" 3.2.搭建哨兵集群")]),t._v(" "),a("p",[t._v("具体搭建流程参考课前资料《"),a("RouterLink",{attrs:{to:"/10.Redis/Redis集群.html"}},[t._v("Redis集群")]),t._v("》：")],1),t._v(" "),a("h2",{attrs:{id:"_3-3-redistemplate"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-3-redistemplate"}},[t._v("#")]),t._v(" 3.3.RedisTemplate")]),t._v(" "),a("p",[t._v("在Sentinel集群监管下的Redis主从集群，其节点会因为自动故障转移而发生变化，Redis的客户端必须感知这种变化，及时更新连接信息。Spring的RedisTemplate底层利用lettuce实现了节点的感知和自动切换。")]),t._v(" "),a("p",[t._v("下面，我们通过一个测试来实现RedisTemplate集成哨兵机制。")]),t._v(" "),a("h3",{attrs:{id:"_3-3-1-导入demo工程"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-3-1-导入demo工程"}},[t._v("#")]),t._v(" 3.3.1.导入Demo工程")]),t._v(" "),a("p",[t._v("首先，我们引入课前资料提供的Demo工程：")]),t._v(" "),a("h3",{attrs:{id:"_3-3-2-引入依赖"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-3-2-引入依赖"}},[t._v("#")]),t._v(" 3.3.2.引入依赖")]),t._v(" "),a("p",[t._v("在项目的pom文件中引入依赖：")]),t._v(" "),a("div",{staticClass:"language-xml extra-class"},[a("pre",{pre:!0,attrs:{class:"language-xml"}},[a("code",[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("dependency")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("groupId")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("org.springframework.boot"),a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("groupId")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("artifactId")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("spring-boot-starter-data-redis"),a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("artifactId")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("dependency")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n")])])]),a("h3",{attrs:{id:"_3-3-3-配置redis地址"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-3-3-配置redis地址"}},[t._v("#")]),t._v(" 3.3.3.配置Redis地址")]),t._v(" "),a("p",[t._v("然后在配置文件application.yml中指定redis的sentinel相关信息：")]),t._v(" "),a("div",{staticClass:"language-java extra-class"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[t._v("spring"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("\n  redis"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("\n    sentinel"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("\n      master"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" mymaster\n      nodes"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("192.168")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v(".150")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v(".101")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("27001")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("192.168")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v(".150")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v(".101")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("27002")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("192.168")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v(".150")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v(".101")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("27003")]),t._v("\n")])])]),a("h3",{attrs:{id:"_3-3-4-配置读写分离"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-3-4-配置读写分离"}},[t._v("#")]),t._v(" 3.3.4.配置读写分离")]),t._v(" "),a("p",[t._v("在项目的启动类中，添加一个新的bean：")]),t._v(" "),a("div",{staticClass:"language-java extra-class"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@Bean")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("LettuceClientConfigurationBuilderCustomizer")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("clientConfigurationBuilderCustomizer")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" clientConfigurationBuilder "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v(" clientConfigurationBuilder"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("readFrom")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ReadFrom")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("REPLICA_PREFERRED")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("p",[t._v("这个bean中配置的就是读写策略，包括四种：")]),t._v(" "),a("ul",[a("li",[t._v("MASTER：从主节点读取")]),t._v(" "),a("li",[t._v("MASTER_PREFERRED：优先从master节点读取，master不可用才读取replica")]),t._v(" "),a("li",[t._v("REPLICA：从slave（replica）节点读取")]),t._v(" "),a("li",[t._v("REPLICA _PREFERRED：优先从slave（replica）节点读取，所有的slave都不可用才读取master")])]),t._v(" "),a("h1",{attrs:{id:"_4-redis分片集群"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-redis分片集群"}},[t._v("#")]),t._v(" 4.Redis分片集群")]),t._v(" "),a("h2",{attrs:{id:"_4-1-搭建分片集群"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-1-搭建分片集群"}},[t._v("#")]),t._v(" 4.1.搭建分片集群")]),t._v(" "),a("p",[t._v("主从和哨兵可以解决高可用、高并发读的问题。但是依然有两个问题没有解决：")]),t._v(" "),a("ul",[a("li",[a("p",[t._v("海量数据存储问题")])]),t._v(" "),a("li",[a("p",[t._v("高并发写的问题")])])]),t._v(" "),a("p",[t._v("使用分片集群可以解决上述问题，如图:")]),t._v(" "),a("p",[a("img",{attrs:{src:"http://stofu80ry.sabkt.gdipper.com/picture/image-20210725155747294.png",alt:"image-20210725155747294"}})]),t._v(" "),a("p",[t._v("分片集群特征：")]),t._v(" "),a("ul",[a("li",[a("p",[t._v("集群中有多个master，每个master保存不同数据")])]),t._v(" "),a("li",[a("p",[t._v("每个master都可以有多个slave节点")])]),t._v(" "),a("li",[a("p",[t._v("master之间通过ping监测彼此健康状态")])]),t._v(" "),a("li",[a("p",[t._v("客户端请求可以访问集群任意节点，最终都会被转发到正确节点")])])]),t._v(" "),a("p",[t._v("具体搭建流程参考课前资料《"),a("RouterLink",{attrs:{to:"/10.Redis/Redis集群.html"}},[t._v("Redis集群")]),t._v("》：")],1),t._v(" "),a("h2",{attrs:{id:"_4-2-散列插槽"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-2-散列插槽"}},[t._v("#")]),t._v(" 4.2.散列插槽")]),t._v(" "),a("h3",{attrs:{id:"_4-2-1-插槽原理"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-2-1-插槽原理"}},[t._v("#")]),t._v(" 4.2.1.插槽原理")]),t._v(" "),a("p",[t._v("Redis会把每一个master节点映射到0~16383共16384个插槽（hash slot）上，查看集群信息时就能看到：")]),t._v(" "),a("p",[a("img",{attrs:{src:"http://stofu80ry.sabkt.gdipper.com/picture/image-20210725155820320.png",alt:"image-20210725155820320"}})]),t._v(" "),a("p",[t._v("数据key不是与节点绑定，而是与插槽绑定。redis会根据key的有效部分计算插槽值，分两种情况：")]),t._v(" "),a("ul",[a("li",[t._v('key中包含"{}"，且“{}”中至少包含1个字符，“{}”中的部分是有效部分')]),t._v(" "),a("li",[t._v("key中不包含“{}”，整个key都是有效部分")])]),t._v(" "),a("p",[t._v("例如：key是num，那么就根据num计算，如果是{itcast}num，则根据itcast计算。计算方式是利用CRC16算法得到一个hash值，然后对\n16384取余，得到的结果就是slot值。")]),t._v(" "),a("p",[t._v("注意：连接redis客户端时需要添加-c表示集群模式")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("redis-cli -c -p 7001\n")])])]),a("p",[a("img",{attrs:{src:"http://stofu80ry.sabkt.gdipper.com/picture/image-20210725155850200.png",alt:"image-20210725155850200"}})]),t._v(" "),a("p",[t._v("如图，在7001这个节点执行set a 1时，对a做hash运算，对16384取余，得到的结果是15495，因此要存储到7003节点。")]),t._v(" "),a("p",[t._v("到了7003后，执行"),a("code",[t._v("get num")]),t._v("时，对num做hash运算，对16384取余，得到的结果是2765，因此需要切换到7001节点")]),t._v(" "),a("h3",{attrs:{id:"_4-2-1-小结"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-2-1-小结"}},[t._v("#")]),t._v(" 4.2.1.小结**")]),t._v(" "),a("p",[t._v("Redis如何判断某个key应该在哪个实例？")]),t._v(" "),a("ul",[a("li",[t._v("将16384个插槽分配到不同的实例")]),t._v(" "),a("li",[t._v("根据key的有效部分计算哈希值，对16384取余")]),t._v(" "),a("li",[t._v("余数作为插槽，寻找插槽所在实例即可")])]),t._v(" "),a("p",[t._v("**如何将同一类数据固定的保存在同一个Redis实例？****用于同一类商品存放在同一个插槽，减少访问同一类商品时重定向请求插槽次数")]),t._v(" "),a("ul",[a("li",[t._v("这一类数据使用相同的有效部分，例如key都以{typeId}为前缀")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("set {a}num 1\n")])])]),a("h2",{attrs:{id:"_4-3-集群伸缩"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-3-集群伸缩"}},[t._v("#")]),t._v(" 4.3.集群伸缩**")]),t._v(" "),a("p",[t._v("redis-cli --cluster提供了很多操作集群的命令，可以通过下面方式查看：")]),t._v(" "),a("p",[a("img",{attrs:{src:"http://stofu80ry.sabkt.gdipper.com/picture/image-20210725160138290.png",alt:"image-20210725160138290"}})]),t._v(" "),a("p",[t._v("比如，添加节点的命令：")]),t._v(" "),a("p",[a("img",{attrs:{src:"http://stofu80ry.sabkt.gdipper.com/picture/image-20210725160448139.png",alt:"image-20210725160448139"}})]),t._v(" "),a("h3",{attrs:{id:"_4-3-1-需求分析"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-3-1-需求分析"}},[t._v("#")]),t._v(" 4.3.1.需求分析")]),t._v(" "),a("p",[t._v("需求：向集群中添加一个新的master节点，并向其中存储 num = 10")]),t._v(" "),a("ul",[a("li",[t._v("启动一个新的redis实例，端口为7004")]),t._v(" "),a("li",[t._v("添加7004到之前的集群，并作为一个master节点")]),t._v(" "),a("li",[t._v("给7004节点分配插槽，使得num这个key可以存储到7004实例")])]),t._v(" "),a("p",[t._v("这里需要两个新的功能：")]),t._v(" "),a("ul",[a("li",[t._v("添加一个节点到集群中")]),t._v(" "),a("li",[t._v("将部分插槽分配到新插槽")])]),t._v(" "),a("h3",{attrs:{id:"_4-3-2-创建新的redis实例"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-3-2-创建新的redis实例"}},[t._v("#")]),t._v(" 4.3.2.创建新的redis实例")]),t._v(" "),a("p",[t._v("创建一个文件夹：")]),t._v(" "),a("div",{staticClass:"language-sh extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[t._v("mkdir")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("7004")]),t._v("\n")])])]),a("p",[t._v("拷贝配置文件：")]),t._v(" "),a("div",{staticClass:"language-sh extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[t._v("cp")]),t._v(" redis.conf /7004\n")])])]),a("p",[t._v("修改配置文件：")]),t._v(" "),a("div",{staticClass:"language-sh extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[t._v("sed")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("-i")]),t._v(" /s/6379/7004/g "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("7004")]),t._v("/redis.conf\n")])])]),a("p",[t._v("启动")]),t._v(" "),a("div",{staticClass:"language-sh extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[t._v("redis-server "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("7004")]),t._v("/redis.conf\n")])])]),a("h3",{attrs:{id:"_4-3-3-添加新节点到redis"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-3-3-添加新节点到redis"}},[t._v("#")]),t._v(" 4.3.3.添加新节点到redis")]),t._v(" "),a("p",[t._v("添加节点的语法如下：")]),t._v(" "),a("p",[a("img",{attrs:{src:"http://stofu80ry.sabkt.gdipper.com/picture/image-20210725160448139.png",alt:"image-20210725160448139"}})]),t._v(" "),a("p",[t._v("执行命令：")]),t._v(" "),a("div",{staticClass:"language-sh extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[t._v("redis-cli "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("--cluster")]),t._v(" add-node  "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("192.168")]),t._v(".150.101:7004 "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("192.168")]),t._v(".150.101:7001\n")])])]),a("p",[t._v("通过命令查看集群状态：")]),t._v(" "),a("div",{staticClass:"language-sh extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[t._v("redis-cli "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("-p")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("7001")]),t._v(" cluster nodes\n")])])]),a("p",[t._v("如图，7004加入了集群，并且默认是一个master节点：")]),t._v(" "),a("p",[a("img",{attrs:{src:"http://stofu80ry.sabkt.gdipper.com/picture/image-20210725161007099.png",alt:"image-20210725161007099"}})]),t._v(" "),a("p",[t._v("但是，可以看到7004节点的插槽数量为0，因此没有任何数据可以存储到7004上")]),t._v(" "),a("h3",{attrs:{id:"_4-3-4-转移插槽"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-3-4-转移插槽"}},[t._v("#")]),t._v(" 4.3.4.转移插槽")]),t._v(" "),a("p",[t._v("我们要将num存储到7004节点，因此需要先看看num的插槽是多少：")]),t._v(" "),a("p",[a("img",{attrs:{src:"http://stofu80ry.sabkt.gdipper.com/picture/image-20210725161241793.png",alt:"image-20210725161241793"}})]),t._v(" "),a("p",[t._v("如上图所示，num的插槽为2765.")]),t._v(" "),a("p",[t._v("我们可以将0~3000的插槽从7001转移到7004，命令格式如下：")]),t._v(" "),a("p",[a("img",{attrs:{src:"http://stofu80ry.sabkt.gdipper.com/picture/image-20210725161401925.png",alt:"image-20210725161401925"}})]),t._v(" "),a("p",[t._v("具体命令如下：")]),t._v(" "),a("p",[t._v("建立连接：")]),t._v(" "),a("p",[a("img",{attrs:{src:"http://stofu80ry.sabkt.gdipper.com/picture/image-20210725161506241.png",alt:"image-20210725161506241"}})]),t._v(" "),a("p",[t._v("得到下面的反馈：")]),t._v(" "),a("p",[a("img",{attrs:{src:"http://stofu80ry.sabkt.gdipper.com/picture/image-20210725161540841.png",alt:"image-20210725161540841"}})]),t._v(" "),a("p",[t._v("询问要移动多少个插槽，我们计划是3000个：")]),t._v(" "),a("p",[t._v("新的问题来了：")]),t._v(" "),a("p",[a("img",{attrs:{src:"http://stofu80ry.sabkt.gdipper.com/picture/image-20210725161637152.png",alt:"image-20210725161637152"}})]),t._v(" "),a("p",[t._v("那个node来接收这些插槽？？")]),t._v(" "),a("p",[t._v("显然是7004，那么7004节点的id是多少呢？")]),t._v(" "),a("p",[a("img",{attrs:{src:"http://stofu80ry.sabkt.gdipper.com/picture/image-20210725161731738.png",alt:"image-20210725161731738"}})]),t._v(" "),a("p",[t._v("复制这个id，然后拷贝到刚才的控制台后：")]),t._v(" "),a("p",[a("img",{attrs:{src:"http://stofu80ry.sabkt.gdipper.com/picture/image-20210725161817642.png",alt:"image-20210725161817642"}})]),t._v(" "),a("p",[t._v("这里询问，你的插槽是从哪里移动过来的？")]),t._v(" "),a("ul",[a("li",[t._v("all：代表全部，也就是三个节点各转移一部分")]),t._v(" "),a("li",[t._v("具体的id：目标节点的id")]),t._v(" "),a("li",[t._v("done：没有了")])]),t._v(" "),a("p",[t._v("这里我们要从7001获取，因此填写7001的id：")]),t._v(" "),a("p",[a("img",{attrs:{src:"http://stofu80ry.sabkt.gdipper.com/picture/image-20210725162030478.png",alt:"image-20210725162030478"}})]),t._v(" "),a("p",[t._v("填完后，点击done，这样插槽转移就准备好了：")]),t._v(" "),a("p",[a("img",{attrs:{src:"http://stofu80ry.sabkt.gdipper.com/picture/image-20210725162101228.png",alt:"image-20210725162101228"}})]),t._v(" "),a("p",[t._v("确认要转移吗？输入yes：")]),t._v(" "),a("p",[t._v("然后，通过命令查看结果：")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("redis-cli -p 7001 cluster nodes\n")])])]),a("p",[t._v("可以看到：")]),t._v(" "),a("p",[a("img",{attrs:{src:"http://stofu80ry.sabkt.gdipper.com/picture/image-20210725162224058.png",alt:"image-20210725162224058"}})]),t._v(" "),a("p",[t._v("目的达成。")]),t._v(" "),a("h2",{attrs:{id:"_4-4-故障转移"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-4-故障转移"}},[t._v("#")]),t._v(" 4.4.故障转移")]),t._v(" "),a("p",[t._v("集群初识状态是这样的：")]),t._v(" "),a("p",[a("img",{attrs:{src:"http://stofu80ry.sabkt.gdipper.com/picture/image-20210727161152065.png",alt:"image-20210727161152065"}})]),t._v(" "),a("p",[t._v("其中7001、7002、7003都是master，我们计划让7002宕机。")]),t._v(" "),a("h3",{attrs:{id:"_4-4-1-自动故障转移"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-4-1-自动故障转移"}},[t._v("#")]),t._v(" 4.4.1.自动故障转移")]),t._v(" "),a("p",[t._v("当集群中有一个master宕机会发生什么呢？")]),t._v(" "),a("p",[t._v("直接停止一个redis实例，例如7002：")]),t._v(" "),a("div",{staticClass:"language-sh extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[t._v("redis-cli "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("-p")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("7002")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("shutdown")]),t._v("\n")])])]),a("p",[t._v("1）首先是该实例与其它实例失去连接")]),t._v(" "),a("p",[t._v("2）然后是疑似宕机：")]),t._v(" "),a("p",[a("img",{attrs:{src:"http://stofu80ry.sabkt.gdipper.com/picture/image-20210725162319490.png",alt:"image-20210725162319490"}})]),t._v(" "),a("p",[t._v("3）最后是确定下线，自动提升一个slave为新的master：")]),t._v(" "),a("p",[a("img",{attrs:{src:"http://stofu80ry.sabkt.gdipper.com/picture/image-20210725162408979.png",alt:"image-20210725162408979"}})]),t._v(" "),a("p",[t._v("4）当7002再次启动，就会变为一个slave节点了：")]),t._v(" "),a("p",[a("img",{attrs:{src:"http://stofu80ry.sabkt.gdipper.com/picture/image-20210727160803386.png",alt:"image-20210727160803386"}})]),t._v(" "),a("h3",{attrs:{id:"_4-4-2-手动故障转移"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-4-2-手动故障转移"}},[t._v("#")]),t._v(" 4.4.2.手动故障转移")]),t._v(" "),a("p",[t._v("利用cluster failover命令可以手动让集群中的某个master宕机，切换到执行cluster failover命令的这个slave节点，实现无感知的数据迁移。其流程如下：")]),t._v(" "),a("p",[a("img",{attrs:{src:"http://stofu80ry.sabkt.gdipper.com/picture/image-20210725162441407.png",alt:"image-20210725162441407"}})]),t._v(" "),a("p",[t._v("这种failover命令可以指定三种模式：")]),t._v(" "),a("ul",[a("li",[t._v("缺省：默认的流程，如图1~6歩")]),t._v(" "),a("li",[t._v("force：省略了对offset的一致性校验")]),t._v(" "),a("li",[t._v("takeover：直接执行第5歩，忽略数据一致性、忽略master状态和其它master的意见")])]),t._v(" "),a("p",[a("strong",[t._v("案例需求")]),t._v("：在7002这个slave节点执行手动故障转移，重新夺回master地位")]),t._v(" "),a("p",[t._v("步骤如下：")]),t._v(" "),a("p",[t._v("1）利用redis-cli连接7002这个节点")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("redis-cli -p 7002\n")])])]),a("p",[t._v("2）执行cluster failover命令")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("cluster failover\n")])])]),a("p",[t._v("效果：")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("redis-cli -p 7001 cluster nodes\n")])])]),a("p",[a("img",{attrs:{src:"http://stofu80ry.sabkt.gdipper.com/picture/image-20210727161152065.png",alt:"image-20210727161152065"}})]),t._v(" "),a("h2",{attrs:{id:"_4-5-redistemplate访问分片集群"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-5-redistemplate访问分片集群"}},[t._v("#")]),t._v(" 4.5.RedisTemplate访问分片集群")]),t._v(" "),a("p",[t._v("RedisTemplate底层同样基于lettuce实现了分片集群的支持，而使用的步骤与哨兵模式基本一致：")]),t._v(" "),a("p",[t._v("1）引入redis的starter依赖")]),t._v(" "),a("p",[t._v("2）配置分片集群地址")]),t._v(" "),a("p",[t._v("3）配置读写分离")]),t._v(" "),a("p",[t._v("与哨兵模式相比，其中只有分片集群的配置方式略有差异，如下：")]),t._v(" "),a("div",{staticClass:"language-yaml extra-class"},[a("pre",{pre:!0,attrs:{class:"language-yaml"}},[a("code",[a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("spring")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("redis")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("cluster")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n      "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("nodes")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" 192.168.150.101"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("7001")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" 192.168.150.101"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("7002")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" 192.168.150.101"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("7003")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" 192.168.150.101"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("8001")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" 192.168.150.101"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("8002")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" 192.168.150.101"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("8003")]),t._v("\n")])])])])}),[],!1,null,null,null);a.default=r.exports}}]);