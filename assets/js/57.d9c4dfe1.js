(window.webpackJsonp=window.webpackJsonp||[]).push([[57],{424:function(_,v,s){"use strict";s.r(v);var e=s(0),a=Object(e.a)({},(function(){var _=this,v=_._self._c;return v("ContentSlotsDistributor",{attrs:{"slot-key":_.$parent.slotKey}},[v("h1",{attrs:{id:"redis使用场景"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#redis使用场景"}},[_._v("#")]),_._v(" redis使用场景")]),_._v(" "),v("ol",[v("li",[_._v("缓存 （穿透、击穿、雪崩）、双写一致、持久化、数据过期策略、数据淘汰策略")]),_._v(" "),v("li",[_._v("分布式锁 （setnx、redisson）")]),_._v(" "),v("li",[_._v("计数器")]),_._v(" "),v("li",[_._v("保存token （数据类型选择：string）")]),_._v(" "),v("li",[_._v("消息队列 （数据类型选择：list）")]),_._v(" "),v("li",[_._v("延迟队列 （数据类型选择：zset）")])]),_._v(" "),v("h1",{attrs:{id:"_1-什么是缓存穿透-怎么解决-null、布隆、降级保底"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_1-什么是缓存穿透-怎么解决-null、布隆、降级保底"}},[_._v("#")]),_._v(" 1. 什么是缓存穿透，怎么解决（null、布隆、降级保底）")]),_._v(" "),v("p",[_._v("缓存穿透是指查询一个一定不存在的数据，由于存储层查不到数据因此不写入缓存，这将导致这个不存在的数据每次请求都要到 DB 去查询，可能导致 DB 挂掉。这种情况大概率是遭到了攻击。")]),_._v(" "),v("p",[_._v("解决方案")]),_._v(" "),v("ol",[v("li",[v("p",[_._v("缓存空数据，查询返回的数据为空，仍然将空数据进行缓存")]),_._v(" "),v("p",[_._v("优点：简单")]),_._v(" "),v("p",[_._v("缺点：消耗内存，可能会发生不一致问题")])]),_._v(" "),v("li",[v("p",[_._v("我们通常都会用布隆过滤器来解决它。（需要缓存预热时，预热布隆过滤器）")]),_._v(" "),v("p",[_._v("优点：占用内存较少，不用缓存多余key")]),_._v(" "),v("p",[_._v("缺点：实现复杂，存在误判（但不会漏判），不能删除")])])]),_._v(" "),v("h1",{attrs:{id:"_2-什么是布隆过滤器"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_2-什么是布隆过滤器"}},[_._v("#")]),_._v(" 2. 什么是布隆过滤器")]),_._v(" "),v("p",[_._v("布隆过滤器主要是用于检索一个元素是否在一个集合中。我们当时使用的是Redisson实现的布隆过滤器。")]),_._v(" "),v("p",[_._v("它的底层原理是，先初始化一个比较大的数组，里面存放的是二进制0或1。一开始都是0，当一个key来了之后，经过3次hash计算，模数组长度找到数据的下标，然后把数组中原来的0改为1。这样，三个数组的位置就能标明一个key的存在。查找的过程也是一样的。当然，布隆过滤器有可能会产生一定的误判，我们一般可以设置这个误判率，大概不会超过5%。其实这个误判是必然存在的，要不就得增加数组的长度。5%以内的误判率一般的项目也能接受，不至于高并发下压倒数据库。")]),_._v(" "),v("h1",{attrs:{id:"_3-什么是缓存击穿-怎么解决-锁、逻辑过期、降级保底"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_3-什么是缓存击穿-怎么解决-锁、逻辑过期、降级保底"}},[_._v("#")]),_._v(" 3. 什么是缓存击穿，怎么解决（锁、逻辑过期、降级保底）")]),_._v(" "),v("p",[_._v("缓存击穿的意思是，对于设置了过期时间的key，缓存在某个时间点过期的时候，恰好这个时间点对这个Key有大量的并发请求过来。这些请求发现缓存过期，一般都会从后端 DB 加载数据并回设到缓存，这个时候大并发的请求可能会瞬间把 DB 压垮。")]),_._v(" "),v("p",[_._v("解决方案有两种方式：")]),_._v(" "),v("ul",[v("li",[v("p",[_._v("第一，可以使用互斥锁：当缓存失效时，不立即去load db，先使用如 Redis 的 "),v("code",[_._v("SETNX")]),_._v(" 去设置一个互斥锁。只有获得互斥锁的进程，才能进行 load db的操作并回设缓存，获取失败的重试get缓存和互斥锁的方法。")])]),_._v(" "),v("li",[v("p",[_._v("第二种方案是设置当前key逻辑过期，大概思路如下：")]),_._v(" "),v("ol",[v("li",[v("p",[_._v("在设置key的时候，设置一个过期时间字段一块存入缓存中，不给当前key设置过期时间；")])]),_._v(" "),v("li",[v("p",[_._v("当查询的时候，从redis取出数据后判断时间是否过期；")])]),_._v(" "),v("li",[v("p",[_._v("如果过期，则开通另外一个线程进行数据同步，当前线程正常返回数据，这个数据可能不是最新的。")])])])]),_._v(" "),v("li",[v("p",[_._v("当然，两种方案各有利弊：")]),_._v(" "),v("ul",[v("li",[_._v("如果选择数据的强一致性，建议使用分布式锁的方案，但性能上可能没那么高，且有可能产生死锁的问题。")]),_._v(" "),v("li",[_._v("如果选择key的逻辑删除，则优先考虑高可用性，性能比较高，但数据同步这块做不到强一致。")])])])]),_._v(" "),v("h1",{attrs:{id:"_4-什么是缓存雪崩-怎么解决-随机过期时间、降级保底"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_4-什么是缓存雪崩-怎么解决-随机过期时间、降级保底"}},[_._v("#")]),_._v(" 4. 什么是缓存雪崩，怎么解决（随机过期时间、降级保底）")]),_._v(" "),v("p",[_._v("缓存雪崩意思是，设置缓存时采用了相同的过期时间，导致缓存在某一时刻同时失效或者redis服务宕机，请求全部转发到DB，DB瞬时压力过重而雪崩。")]),_._v(" "),v("p",[_._v("与缓存击穿的区别是：雪崩是很多key，而击穿是某一个key缓存。")]),_._v(" "),v("p",[_._v("解决方案主要是，")]),_._v(" "),v("ol",[v("li",[_._v("可以将缓存失效时间分散开。比如，可以在原有的失效时间基础上增加一个随机值，比如1-5分钟随机。这样，每一个缓存的过期时间的重复率就会降低，就很难引发集体失效的事件。")]),_._v(" "),v("li",[_._v("redis集群提高服务的可用性，（哨兵、集群）")]),_._v(" "),v("li",[v("strong",[_._v("添加降级限流策略（nginx或spring cloud gateway）")]),_._v("（降级可用做系统的保底策略，适用于穿透、击穿、雪崩）")]),_._v(" "),v("li",[_._v("添加多级缓存（guava、caffeine）")])]),_._v(" "),v("h1",{attrs:{id:"reids双写一致问题"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#reids双写一致问题"}},[_._v("#")]),_._v(" reids双写一致问题")]),_._v(" "),v("p",[_._v("方法：")]),_._v(" "),v("ul",[v("li",[v("p",[_._v("延迟双删（有脏数据）")])]),_._v(" "),v("li",[v("p",[_._v("读写锁（数据强一致）")])]),_._v(" "),v("li",[v("p",[_._v("异步通知")])])]),_._v(" "),v("h2",{attrs:{id:"_5-redis作为缓存-如何保证redis与mysql数据的同步"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_5-redis作为缓存-如何保证redis与mysql数据的同步"}},[_._v("#")]),_._v(" 5. redis作为缓存，如何保证redis与mysql数据的同步")]),_._v(" "),v("p",[_._v("嗯！就说我最近做的这个项目，里面有xxxx（根据自己的简历上写）的功能，需要让数据库与redis"),v("strong",[_._v("高度保持一致")]),_._v("，因为要求时效性比较高。")]),_._v(" "),v("p",[_._v("我们当时采用的"),v("strong",[_._v("读写锁")]),_._v("保证的强一致性。我们使用的是"),v("strong",[_._v("Redisson实现的读写锁")]),_._v("（保持高度一致）。")]),_._v(" "),v("ul",[v("li",[_._v("在读的时候添加共享锁，可以保证读读不互斥、读写互斥。")]),_._v(" "),v("li",[_._v("当我们更新数据的时候，添加排他锁。它是读写、读读都互斥，这样就能保证在写数据的同时，是不会让其他线程读数据的，避免了脏数据。")]),_._v(" "),v("li",[_._v("这里面需要注意的是，读方法和写方法上需要使用同一把锁才行。")])]),_._v(" "),v("h2",{attrs:{id:"_6-那这个排他锁是如何保证读写、读读互斥的呢"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_6-那这个排他锁是如何保证读写、读读互斥的呢"}},[_._v("#")]),_._v(" 6. 那这个排他锁是如何保证读写、读读互斥的呢？")]),_._v(" "),v("p",[_._v("其实排他锁底层使用的也是"),v("code",[_._v("SETNX")]),_._v("，它保证了同时只能有一个线程操作锁住的方法。")]),_._v(" "),v("h2",{attrs:{id:"_7-你听说过延时双删吗-为什么不用它呢"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_7-你听说过延时双删吗-为什么不用它呢"}},[_._v("#")]),_._v(" 7. 你听说过延时双删吗？为什么不用它呢？")]),_._v(" "),v("p",[_._v("延迟双删，如果是写操作，我们先把缓存中的数据删除，然后更新数据库，最后再延时删除缓存中的数据。其中，这个延时多久不太好确定(如果数据库是主从模式，数据库同步时间不确定)。在延时的过程中，可能会出现脏数据，并不能保证强一致性，所以没有采用它。")]),_._v(" "),v("h2",{attrs:{id:"_8-redis作为缓存-如何保证redis与mysql数据的同步"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_8-redis作为缓存-如何保证redis与mysql数据的同步"}},[_._v("#")]),_._v(" 8. redis作为缓存，如何保证redis与mysql数据的同步")]),_._v(" "),v("p",[_._v("嗯！就说我最近做的这个项目，里面有xxxx（根据自己的简历上写）的功能。数据同步可以有一定的延时（这符合大部分业务需求）。")]),_._v(" "),v("ol",[v("li",[_._v("我们当时采用的阿里的Canal组件实现数据同步：不需要更改业务代码，只需部署一个Canal服务。Canal服务把自己伪装成mysql的一个从节点。当mysql数据更新以后，Canal会读取binlog数据，然后再通过Canal的客户端获取到数据，并更新缓存即可。")]),_._v(" "),v("li",[_._v("使用消息队列，在将修改的数据写入数据库后会发送消息给消息队列，在缓存服务中监听消息并更新缓存，由于MQ的可靠性，能保证最终的一致性")])]),_._v(" "),v("h1",{attrs:{id:"_9-redis的数据持久化策略有哪些"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_9-redis的数据持久化策略有哪些"}},[_._v("#")]),_._v(" 9. Redis的数据持久化策略有哪些")]),_._v(" "),v("p",[_._v("在Redis中提供了两种数据持久化的方式：1) RDB；2) AOF。")]),_._v(" "),v("h2",{attrs:{id:"_10-这两种持久化方式有什么区别呢"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_10-这两种持久化方式有什么区别呢"}},[_._v("#")]),_._v(" 10. "),v("strong",[_._v("这两种持久化方式有什么区别呢？")])]),_._v(" "),v("p",[_._v("RDB全称Redis Database Backup file(Redis数据备份文件)，也被叫做Redis数据快照。它是把redis内存存储的数据写到磁盘上。当redis实例宕机恢复数据的时候，可以从RDB的快照文件中恢复数据。")]),_._v(" "),v("ul",[v("li",[_._v("可以手动执行命令save、bgsave或者，设置触发机制，")]),_._v(" "),v("li",[_._v("可以在redis.conf文件中设置为多少秒内修改一次就执行一次bgsave)")])]),_._v(" "),v("p",[_._v("AOF(Append Only File)的含义是追加文件。当redis执行写命令的时候，都会存储到这个文件中。当redis实例宕机恢复数据的时候，会从这个文件中再次执行一遍命令来恢复数据。")]),_._v(" "),v("ul",[v("li",[_._v("redis.conf中可以设置appendonly是否开启AOF功能，默认是no，")]),_._v(" "),v("li",[_._v("AOF中的命令可能会重复操作同一个key，导致AOF文件很大，")]),_._v(" "),v("li",[_._v("可以通过命令"),v("code",[_._v("bgrewriteaof")]),_._v("对AOF文件重写\n"),v("ul",[v("li",[_._v("也可以配置文件auto-aof-rewrite-percentage 增长超过多少百分比触发")]),_._v(" "),v("li",[_._v("auto-aof-rewrite-min-size 文件体积超过多少时触发")])])])]),_._v(" "),v("p",[_._v("容忍数分钟数据丢失：RDB")]),_._v(" "),v("p",[_._v("数据安全性要求高：AOF + [RDB] (通常两者结合使用)")]),_._v(" "),v("h2",{attrs:{id:"_11-这两种方式-哪种恢复的比较快呢"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_11-这两种方式-哪种恢复的比较快呢"}},[_._v("#")]),_._v(" 11. 这两种方式，哪种恢复的比较快呢？")]),_._v(" "),v("p",[_._v("RDB因为是二进制文件，保存时体积也比较小，所以它恢复得比较快。但它有可能会丢数据。")]),_._v(" "),v("p",[_._v("我们通常在项目中也会使用AOF来恢复数据。虽然AOF恢复的速度慢一些，但它丢数据的风险要小很多。")]),_._v(" "),v("p",[_._v("在AOF文件中可以设置刷盘策略。")]),_._v(" "),v("ul",[v("li",[v("p",[_._v("AOF命令记录的频率配置项：")]),_._v(" "),v("ul",[v("li",[v("p",[_._v("always：每一次命令都会记录")])]),_._v(" "),v("li",[v("p",[_._v("everysec：每一秒记录一次")])]),_._v(" "),v("li",[v("p",[_._v("no：由操作系统控制")])])])])]),_._v(" "),v("p",[_._v("我们当时设置的就是每秒批量写入一次命令。")]),_._v(" "),v("h2",{attrs:{id:"rdb的执行原理"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#rdb的执行原理"}},[_._v("#")]),_._v(" RDB的执行原理")]),_._v(" "),v("p",[_._v("bgsave开始时会fork主进程得到子进程，子进程共享主进程的内存数据，从而读取内存数据并写入RDB文件。")]),_._v(" "),v("p",[_._v("fork采用的是copy-on-write技术：")]),_._v(" "),v("ul",[v("li",[_._v("fork时会把共享的内存标记为")]),_._v(" "),v("li",[_._v("read-only当主进程执行读操作时，访问共享内存；")]),_._v(" "),v("li",[_._v("当主进程执行写操作时，则会拷贝一份数据，执行写操作。")])]),_._v(" "),v("h1",{attrs:{id:"_12-redis的数据过期策略有哪些"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_12-redis的数据过期策略有哪些"}},[_._v("#")]),_._v(" 12. Redis的数据过期策略有哪些")]),_._v(" "),v("p",[_._v("在redis中提供了两种数据过期删除策略。")]),_._v(" "),v("ul",[v("li",[_._v("第一种是惰性删除。在设置该key过期时间后，我们不去管它。当需要该key时，我们检查其是否过期。如果过期，我们就删掉它；反之，返回该key。")]),_._v(" "),v("li",[_._v("第二种是定期删除。就是说，每隔一段时间，我们就对一些key进行检查，并删除里面过期的key。")])]),_._v(" "),v("p",[_._v("定期清理的两种模式是：")]),_._v(" "),v("ul",[v("li",[_._v("SLOW模式，是定时任务，执行频率默认为10hz，每次不超过25ms，可以通过修改配置文件redis.conf的hz选项来调整这个次数；")]),_._v(" "),v("li",[_._v("FAST模式，执行频率不固定，每次事件循环会尝试执行，但两次间隔不低于2ms，每次耗时不超过1ms。")])]),_._v(" "),v("p",[_._v("Redis的过期删除策略是：惰性删除 + 定期删除两种策略配合使用。")]),_._v(" "),v("h1",{attrs:{id:"_13-redis的数据淘汰策略有哪些"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_13-redis的数据淘汰策略有哪些"}},[_._v("#")]),_._v(" 13. Redis的数据淘汰策略有哪些")]),_._v(" "),v("p",[_._v("这个在redis中提供了8种数据淘汰策略，")]),_._v(" "),v("ul",[v("li",[v("p",[_._v("默认是noeviction，不删除任何数据，内部不足时直接报错。volatile-ttl、allkeys-random、volatile-random、allkeys-lru、volatile-lru、allkeys-lfu、volatile-lfu。")])]),_._v(" "),v("li",[v("p",[_._v("可以在redis的配置文件中进行设置。")])]),_._v(" "),v("li",[v("p",[_._v("里面有两个非常重要的概念：一个是LRU，另外一个是LFU。")])]),_._v(" "),v("li",[v("p",[_._v("LRU的意思就是最少最近使用。它会用当前时间减去最后一次访问时间。这个值越大，则淘汰优先级越高。")])]),_._v(" "),v("li",[v("p",[_._v("LFU的意思是最少频率使用。它会统计每个key的访问频率。值越小，淘汰优先级越高。")])]),_._v(" "),v("li",[v("p",[_._v("我们在项目中设置的是allkeys-lru，它会挑选最近最少使用的数据进行淘汰，把一些经常访问的key留在redis中。")])])]),_._v(" "),v("p",[_._v("数据淘汰策略-使用建议")]),_._v(" "),v("ol",[v("li",[v("p",[_._v("优先使用 allkeys-Iru 策略。充分利用 LRU 算法的优势，把最近最常访问的数据留在缓存中。如果业务有明显的冷热数据区分，建议使用。")])]),_._v(" "),v("li",[v("p",[_._v("如果业务中数据访问频率差别不大，没有明显冷热数据区分，建议使用 alkeys-random，随机选择淘汰。")])]),_._v(" "),v("li",[v("p",[_._v("如果业务中有置顶的需求，可以使用volatile-lru 策略，同时置顶数据不设置过期时间，这些数据就一直不被删除，会淘汰其他设置过期时间的数据。")])]),_._v(" "),v("li",[v("p",[_._v("如果业务中有短时高频访问的数据，可以使用 allkeys-Ifu 或 volatile-Ifu 策略。")])])]),_._v(" "),v("h2",{attrs:{id:"_14-数据库有1000万数据-redis只能缓存20w数据。如何保证redis中的数据都是热点数据"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_14-数据库有1000万数据-redis只能缓存20w数据。如何保证redis中的数据都是热点数据"}},[_._v("#")]),_._v(" 14. 数据库有1000万数据，Redis只能缓存20w数据。如何保证Redis中的数据都是热点数据？")]),_._v(" "),v("p",[_._v("可以使用allkeys-lru（挑选最近最少使用的数据淘汰）淘汰策略。那留下来的都是经常访问的热点数据。")]),_._v(" "),v("h2",{attrs:{id:"_15-redis的内存用完了会发生什么"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_15-redis的内存用完了会发生什么"}},[_._v("#")]),_._v(" 15. Redis的内存用完了会发生什么？")]),_._v(" "),v("p",[_._v("这个要看redis的数据淘汰策略是什么。如果是默认的配置，redis内存用完以后则直接报错。我们当时设置的是allkeys-lru策略，把最近最常访问的数据留在缓存中。")]),_._v(" "),v("h1",{attrs:{id:"_16-redis分布式锁如何实现"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_16-redis分布式锁如何实现"}},[_._v("#")]),_._v(" 16. Redis分布式锁如何实现")]),_._v(" "),v("p",[_._v("在redis中提供了一个命令"),v("code",[_._v("SETNX")]),_._v("(SET if not exists)。由于redis是单线程的，用了这个命令之后，只能有一个客户端对某一个key设置值。在没有过期或删除key的时候，其他客户端是不能设置这个key的。")]),_._v(" "),v("h2",{attrs:{id:"_17-redis实现分布式锁如何合理的控制锁的有效时长"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_17-redis实现分布式锁如何合理的控制锁的有效时长"}},[_._v("#")]),_._v(" 17. Redis实现分布式锁如何合理的控制锁的有效时长")]),_._v(" "),v("p",[_._v("redis的"),v("code",[_._v("SETNX")]),_._v("指令不好控制这个问题。我们当时采用的是redis的一个框架Redisson实现的。")]),_._v(" "),v("p",[_._v("在Redisson中需要手动加锁，并且可以控制锁的失效时间和等待时间。如果没有指定失效时间，当锁住的一个业务还没有执行完成的时候，Redisson会引入一个看门狗机制。就是说，每隔一段时间就检查当前业务是否还持有锁。如果持有，就增加锁的持有时间。当业务执行完成之后，需要使用释放锁就可以了。")]),_._v(" "),v("p",[_._v("还有一个好处就是，在高并发下，一个业务有可能会执行很快。客户1持有锁的时候，客户2来了以后并不会马上被拒绝。它会自旋不断尝试获取锁。如果客户1释放之后，客户2就可以马上持有锁，性能也得到了提升。")]),_._v(" "),v("h2",{attrs:{id:"_18-redisson实现的分布式锁是可重入的吗"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_18-redisson实现的分布式锁是可重入的吗"}},[_._v("#")]),_._v(" 18. Redisson实现的分布式锁是可重入的吗？")]),_._v(" "),v("p",[_._v("是可以重入的。这样做是为了避免死锁的产生。这个重入其实在内部就是判断是否是当前线程持有的锁，如果是当前线程持有的锁就会计数，如果释放锁就会在计数上减一。在存储数据的时候采用的hash结构，大key可以按照自己的业务进行定制，其中小key是当前线程的唯一标识，value是当前线程重入的次数。")]),_._v(" "),v("h2",{attrs:{id:"_19-redisson实现的分布式锁能解决主从一致性的问题吗"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_19-redisson实现的分布式锁能解决主从一致性的问题吗"}},[_._v("#")]),_._v(" 19. Redisson实现的分布式锁能解决主从一致性的问题吗？")]),_._v(" "),v("p",[_._v("这个是不能的。比如，当线程1加锁成功后，master节点数据会异步复制到slave节点，此时如果当前持有Redis锁的master节点宕机，slave节点被提升为新的master节点，假如现在来了一个线程2，再次加锁，会在新的master节点上加锁成功，这个时候就会出现两个节点同时持有一把锁的问题。")]),_._v(" "),v("p",[_._v("我们可以利用Redisson提供的红锁来解决这个问题，它的主要作用是，不能只在一个Redis实例上创建锁，应该是在多个Redis实例上创建锁，并且要求在大多数Redis节点上都成功创建锁，红锁中要求是Redis的节点数量要过半。这样就能避免线程1加锁成功后master节点宕机导致线程2成功加锁到新的master节点上的问题了。")]),_._v(" "),v("p",[_._v("但是，如果使用了红锁，因为需要同时在多个节点上都添加锁，性能就变得非常低，并且运维维护成本也非常高，所以，我们一般在项目中也不会直接使用红锁，并且官方也暂时废弃了这个红锁。")]),_._v(" "),v("h2",{attrs:{id:"_20-如果业务非要保证数据的强一致性-这个该怎么解决呢"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_20-如果业务非要保证数据的强一致性-这个该怎么解决呢"}},[_._v("#")]),_._v(" 20. 如果业务非要保证数据的强一致性，这个该怎么解决呢？")]),_._v(" "),v("p",[_._v("Redis本身就是AP思想，优先考虑高可用的，要做到强一致性，就非常影响性能，所以，如果有强一致性要求高的业务，建议使用ZooKeeper实现的分布式锁，它是CP思想，可以保证强一致性的。")]),_._v(" "),v("h1",{attrs:{id:"_21-redis集群有哪些方案-知道嘛"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_21-redis集群有哪些方案-知道嘛"}},[_._v("#")]),_._v(" 21. Redis集群有哪些方案，知道嘛")]),_._v(" "),v("p",[_._v("在Redis中提供的集群方案总共有三种：主从复制（高并发）、哨兵模式（高可用）、Redis分片集群（海量数据存储、高并发写）。")]),_._v(" "),v("h1",{attrs:{id:"_22-什么是redis主从同步"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_22-什么是redis主从同步"}},[_._v("#")]),_._v(" 22. 什么是Redis主从同步")]),_._v(" "),v("p",[_._v("单节点Redis的并发能力是有上限的，要进一步提高Redis的并发能力，可以搭建主从集群，实现读写分离。")]),_._v(" "),v("p",[_._v("一般都是一主多从，主节点负责写数据，从节点负责读数据，主节点写入数据之后，需要把数据同步到从节点中。")]),_._v(" "),v("p",[_._v("​")]),_._v(" "),v("h2",{attrs:{id:"_23-能说一下-主从同步数据的流程吗"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_23-能说一下-主从同步数据的流程吗"}},[_._v("#")]),_._v(" 23. 能说一下，主从同步数据的流程吗？")]),_._v(" "),v("p",[_._v("主从同步分为了两个阶段，一个是全量同步，一个是增量同步。")]),_._v(" "),v("ul",[v("li",[v("p",[_._v("全量同步是指从节点第一次与主节点建立连接的时候使用全量同步，流程是这样的：")]),_._v(" "),v("ul",[v("li",[v("p",[_._v("第一：从节点请求主节点同步数据，其中从节点会携带自己的replication id和offset偏移量。")])]),_._v(" "),v("li",[v("p",[_._v("第二：主节点判断是否是第一次请求，主要判断的依据就是，主节点与从节点是否是同一个replication id，如果不是，就说明是第一次同步，那主节点就会把自己的replication id和offset发送给从节点，让从节点与主节点的信息保持一致。")])]),_._v(" "),v("li",[v("p",[_._v("第三：同时主节点会执行"),v("code",[_._v("BGSAVE")]),_._v("，生成RDB文件后，发送给从节点，从节点先把自己的数据清空，然后执行主节点发送过来的RDB文件，这样就保持了一致。")])]),_._v(" "),v("li",[v("p",[_._v("当然，如果在RDB生成执行期间，依然有请求到了主节点，而主节点会以命令的方式记录到缓冲区，缓冲区是一个日志文件，最后把这个日志文件发送给从节点，这样就能保证主节点与从节点完全一致了，后期再同步数据的时候，都是依赖于这个日志文件，这个就是全量同步。")])])])]),_._v(" "),v("li",[v("p",[_._v("增量同步指的是，当从节点服务重启之后，数据就不一致了，所以这个时候，从节点会请求主节点同步数据，主节点还是判断不是第一次请求，不是第一次就获取从节点的offset值，然后主节点从命令日志中获取offset值之后的数据，发送给从节点进行数据同步。")])])]),_._v(" "),v("h1",{attrs:{id:"_24-怎么保证redis的高并发高可用"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_24-怎么保证redis的高并发高可用"}},[_._v("#")]),_._v(" 24. 怎么保证Redis的高并发高可用？")]),_._v(" "),v("p",[_._v("首先可以搭建主从集群，保证高并发，再加上使用Redis中的哨兵模式，保证高可用，")]),_._v(" "),v("ul",[v("li",[_._v("哨兵模式可以实现主从集群的自动故障恢复，里面就包含了对主从服务的监控、自动故障恢复、通知；")]),_._v(" "),v("li",[_._v("如果master故障，Sentinel会将一个slave提升为master。当故障实例恢复后也以新的master为主；同时Sentinel也充当Redis客户端的服务发现来源，当集群发生故障转移时，会将最新信息推送给Redis的客户端，所以一般项目都会采用哨兵的模式来保证Redis的高并发高可用。")])]),_._v(" "),v("h2",{attrs:{id:"_25-你们使用redis是单点还是集群-哪种集群"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_25-你们使用redis是单点还是集群-哪种集群"}},[_._v("#")]),_._v(" 25. 你们使用Redis是单点还是集群，哪种集群？")]),_._v(" "),v("p",[_._v("我们当时使用的是主从（1主1从）加哨兵。一般单节点不超过10G内存，如果Redis内存不足则可以给不同服务分配独立的Redis主从节点。尽量不做分片集群。因为集群维护起来比较麻烦，并且集群之间的心跳检测和数据通信会消耗大量的网络带宽，也没有办法使用Lua脚本和事务。")]),_._v(" "),v("h2",{attrs:{id:"_26-redis集群脑裂-该怎么解决呢"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_26-redis集群脑裂-该怎么解决呢"}},[_._v("#")]),_._v(" 26. Redis集群脑裂，该怎么解决呢？")]),_._v(" "),v("p",[_._v("这个在项目中很少见，不过脑裂的问题是这样的，我们现在用的是Redis的哨兵模式集群的。")]),_._v(" "),v("p",[_._v("有的时候由于网络等原因可能会出现脑裂的情况，就是说，由于Redis master节点和Redis slave节点和Sentinel处于不同的网络分区，使得Sentinel没有能够心跳感知到master，所以通过选举的方式提升了一个slave为master，这样就存在了两个master，就像大脑分裂了一样，这样会导致客户端还在old master那里写入数据，新节点无法同步数据，当网络恢复后，Sentinel会将old master降为slave，这时再从新master同步数据，这会导致old master中的大量数据丢失。")]),_._v(" "),v("p",[_._v("关于解决的话，我记得在Redis的配置中可以设置：")]),_._v(" "),v("ul",[v("li",[_._v("第一可以设置最少的slave节点个数，比如设置至少要有一个从节点才能同步数据，")]),_._v(" "),v("li",[_._v("第二个可以设置主从数据复制和同步的延迟时间，达不到要求就拒绝请求，就可以避免大量的数据丢失。")])]),_._v(" "),v("h1",{attrs:{id:"_27-redis的分片集群有什么作用"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_27-redis的分片集群有什么作用"}},[_._v("#")]),_._v(" 27. Redis的分片集群有什么作用？")]),_._v(" "),v("p",[_._v("分片集群主要解决的是海量数据存储、高并发写的问题，")]),_._v(" "),v("ul",[v("li",[_._v("集群中有多个master，每个master保存不同数据，")]),_._v(" "),v("li",[_._v("并且还可以给每个master设置多个slave节点，就可以继续增大集群的高并发能力。")]),_._v(" "),v("li",[_._v("同时每个master之间通过ping监测彼此健康状态，就类似于哨兵模式了。")]),_._v(" "),v("li",[_._v("当客户端请求可以访问集群任意节点，最终都会被转发到正确节点。")])]),_._v(" "),v("h2",{attrs:{id:"_28-redis分片集群中数据是怎么存储和读取的"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_28-redis分片集群中数据是怎么存储和读取的"}},[_._v("#")]),_._v(" 28. Redis分片集群中数据是怎么存储和读取的？")]),_._v(" "),v("p",[_._v("Redis 集群引入了哈希槽的概念，有 16384 个哈希槽，")]),_._v(" "),v("p",[_._v("集群中每个主节点绑定了一定范围的哈希槽范围，")]),_._v(" "),v("p",[_._v("读写数据时，会根据key的有效部分计算哈希值，有效部分就是key前面如果有大括号，大括号的内容就是有效部分，如果没有，key本身作为有效部分，然后对16384取模来决定放置哪个槽，通过槽找到对应的节点进行存储。")]),_._v(" "),v("h1",{attrs:{id:"_29-redis是单线程的-但是为什么还那么快"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_29-redis是单线程的-但是为什么还那么快"}},[_._v("#")]),_._v(" 29. Redis是单线程的，但是为什么还那么快**？**")]),_._v(" "),v("p",[_._v("有几个原因")]),_._v(" "),v("ol",[v("li",[_._v("完全基于内存的，C语言编写。")]),_._v(" "),v("li",[_._v("采用单线程，避免不必要的上下文切换和竞争条件。")]),_._v(" "),v("li",[_._v("使用多路I/O复用模型，非阻塞IO。")])]),_._v(" "),v("p",[_._v("例如："),v("code",[_._v("BGSAVE")]),_._v("和"),v("code",[_._v("BGREWRITEAOF")]),_._v("都是在后台执行操作，不影响主线程的正常使用，不会产生阻塞。")]),_._v(" "),v("h1",{attrs:{id:"_30-能解释一下i-o多路复模型"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_30-能解释一下i-o多路复模型"}},[_._v("#")]),_._v(" 30. 能解释一下I/O多路复模型？")]),_._v(" "),v("p",[_._v("I/O多路复用是指利用单个线程来同时监听多个Socket，并且在某个Socket可读、可写时得到通知，从而避免无效的等待，充分利用CPU资源。目前的I/O多路复用都是采用的epoll模式实现，它会在通知用户进程Socket就绪的同时，把已就绪的Socket写入用户空间，不需要挨个遍历Socket来判断是否就绪，提升了性能。")]),_._v(" "),v("p",[_._v("其中Redis的网络模型就是使用I/O多路复用结合事件的处理器来应对多个Socket请求，比如，提供了连接应答处理器、命令回复处理器，命令请求处理器；")]),_._v(" "),v("p",[_._v("在Redis6.0之后，为了提升更好的性能，在命令回复处理器使用了多线程来处理回复事件，在命令请求处理器中，将命令的转换使用了多线程，增加命令转换速度，在命令执行的时候，依然是单线程")]),_._v(" "),v("h1",{attrs:{id:"你们用过redis的事务吗-事务的命令有哪些"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#你们用过redis的事务吗-事务的命令有哪些"}},[_._v("#")]),_._v(" 你们用过Redis的事务吗？事务的命令有哪些")]),_._v(" "),v("h1",{attrs:{id:"谈谈对redis的理解"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#谈谈对redis的理解"}},[_._v("#")]),_._v(" 谈谈对redis的理解")]),_._v(" "),v("p",[_._v("​")])])}),[],!1,null,null,null);v.default=a.exports}}]);