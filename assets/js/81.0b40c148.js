(window.webpackJsonp=window.webpackJsonp||[]).push([[81],{448:function(v,_,t){"use strict";t.r(_);var l=t(0),i=Object(l.a)({},(function(){var v=this,_=v._self._c;return _("ContentSlotsDistributor",{attrs:{"slot-key":v.$parent.slotKey}},[_("h2",{attrs:{id:"工厂模式"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#工厂模式"}},[v._v("#")]),v._v(" 工厂模式")]),v._v(" "),_("p",[v._v("开闭原则："),_("strong",[v._v("对扩展开放，对修改关闭")]),v._v("。在程序需要进行拓展的时候，不能去修改原有的代码，实现一个热插拔的效果。简言之，是为了使程序的扩展性好，易于维护和升级。")]),v._v(" "),_("p",[v._v("工厂模式最大的优点就是："),_("strong",[v._v("解耦")]),v._v("。")]),v._v(" "),_("h3",{attrs:{id:"简单工厂模式"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#简单工厂模式"}},[v._v("#")]),v._v(" 简单工厂模式")]),v._v(" "),_("p",[v._v("具体工厂+抽象产品+具体产品")]),v._v(" "),_("p",[_("img",{attrs:{src:"C:%5CUsers%5C86157%5CDesktop%5Cblog-img%5Cimg%5C1744513192224-7.png",alt:"img"}})]),v._v(" "),_("p",[_("strong",[v._v("优点：")])]),v._v(" "),_("p",[v._v("封装了创建对象的过程，可以通过参数直接获取对象。把对象的创建和业务逻辑层分开，这样以后就避免了修改客户代码，如果要实现新产品直接修改工厂类，而不需要在原代码中修改，这样就降低了客户代码修改的可能性，更加容易扩展。")]),v._v(" "),_("p",[_("strong",[v._v("缺点：")])]),v._v(" "),_("p",[v._v("增加新产品时还是需要修改工厂类的代码，违背了“开闭原则”。")]),v._v(" "),_("h3",{attrs:{id:"工厂方法模式"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#工厂方法模式"}},[v._v("#")]),v._v(" 工厂方法模式")]),v._v(" "),_("p",[v._v("抽象工厂+具体工厂+抽象产品+具体产品")]),v._v(" "),_("p",[_("img",{attrs:{src:"C:%5CUsers%5C86157%5CDesktop%5Cblog-img%5Cimg%5C1744513183506-4.png",alt:"img"}})]),v._v(" "),_("p",[v._v("​\t"),_("strong",[v._v("优点：")])]),v._v(" "),_("ul",[_("li",[v._v("用户只需要知道具体工厂的名称就可得到所要的产品，无须知道产品的具体创建过程；")]),v._v(" "),_("li",[v._v("在系统增加新的产品时只需要添加具体产品类和对应的具体工厂类，无须对原工厂进行任何修改，满足开闭原则；")])]),v._v(" "),_("p",[_("strong",[v._v("缺点：")])]),v._v(" "),_("ul",[_("li",[v._v("每增加一个产品就要增加一个具体产品类和一个对应的具体工厂类，这增加了系统的复杂度。")])]),v._v(" "),_("h3",{attrs:{id:"抽象工厂模式"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#抽象工厂模式"}},[v._v("#")]),v._v(" 抽象工厂模式")]),v._v(" "),_("p",[_("img",{attrs:{src:"C:%5CUsers%5C86157%5CDesktop%5Cblog-img%5Cimg%5C1744513164562-1.png",alt:"img"}})]),v._v(" "),_("p",[_("strong",[v._v("优点：")])]),v._v(" "),_("p",[v._v("当一个产品族中的多个对象被设计成一起工作时，它能保证客户端始终只使用同一个产品族中的对象。")]),v._v(" "),_("p",[_("strong",[v._v("缺点：")])]),v._v(" "),_("p",[v._v("当产品族中需要增加一个新的产品时，所有的工厂类都需要进行修改。")]),v._v(" "),_("p",[v._v("使用场景")]),v._v(" "),_("p",[v._v("如：输入法换皮肤，一整套一起换。生成不同操作系统的程序。")]),v._v(" "),_("ol",[_("li",[v._v("简单工厂\n所有的产品都共有一个工厂，如果新增产品，则需要修改代码，违反开闭原则\n是一种编程习惯，可以借鉴这种编程思路")]),v._v(" "),_("li",[v._v("工厂方法模式\n给每个产品都提供了一个工厂，让工厂专门负责对应的产品的生产，遵循开闭原则\n项目中用的最多")]),v._v(" "),_("li",[v._v("抽象工厂方法模式\n如果有多个纬度的产品需要配合生产时，优先建议采用抽象工厂（工厂的工厂）\n一般的企业开发中的较少")])]),v._v(" "),_("h2",{attrs:{id:"策略模式"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#策略模式"}},[v._v("#")]),v._v(" 策略模式")]),v._v(" "),_("p",[v._v("策略模式的主要角色如下：")]),v._v(" "),_("ul",[_("li",[v._v("抽象策略（Strategy）类：这是一个抽象角色，通常由一个接口或抽象类实现。此角色给出所有的具体策略类所需的接口。")]),v._v(" "),_("li",[v._v("具体策略（Concrete Strategy）类：实现了抽象策略定义的接口，提供具体的算法实现或行为。")]),v._v(" "),_("li",[v._v("环境（Context）类：持有一个策略类的引用，最终给客户端调用。")])]),v._v(" "),_("p",[_("img",{attrs:{src:"C:%5CUsers%5C86157%5CDesktop%5Cblog-img%5Cimg%5C1744513299481-10.png",alt:"img"}})]),v._v(" "),_("p",[_("a",{attrs:{href:"https://www.bilibili.com/video/BV1yT411H7YK?p=140",target:"_blank",rel:"noopener noreferrer"}},[v._v("综合案例"),_("OutboundLink")],1),v._v("\n下图是gitee的登录的入口，其中有多种方式可以进行登录")]),v._v(" "),_("ul",[_("li",[v._v("用户名密码登录")]),v._v(" "),_("li",[v._v("短信验证码登录")]),v._v(" "),_("li",[v._v("微信登录")]),v._v(" "),_("li",[v._v("QQ登录")])]),v._v(" "),_("h3",{attrs:{id:"举一反三"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#举一反三"}},[v._v("#")]),v._v(" 举一反三")]),v._v(" "),_("p",[v._v("其实像这样的需求，在日常开发中非常常见，场景有很多，以下的情景都可以使用工厂模式+策略模式解决比如：")]),v._v(" "),_("ul",[_("li",[v._v("订单的支付策略\n"),_("ul",[_("li",[v._v("支付宝支付")]),v._v(" "),_("li",[v._v("微信支付")]),v._v(" "),_("li",[v._v("银行卡支付")]),v._v(" "),_("li",[v._v("现金支付")])])]),v._v(" "),_("li",[v._v("解析不同类型excel\n"),_("ul",[_("li",[v._v("xls格式")]),v._v(" "),_("li",[v._v("xlsx格式")])])]),v._v(" "),_("li",[v._v("打折促销\n"),_("ul",[_("li",[v._v("满300元9折")]),v._v(" "),_("li",[v._v("满500元8折")]),v._v(" "),_("li",[v._v("满1000元7折")])])]),v._v(" "),_("li",[v._v("物流运费阶梯计算\n"),_("ul",[_("li",[v._v("5kg以下")]),v._v(" "),_("li",[v._v("5kg-10kg")]),v._v(" "),_("li",[v._v("10kg-20kg")]),v._v(" "),_("li",[v._v("20kg以上")])])])]),v._v(" "),_("p",[v._v("一句话总结："),_("strong",[v._v("只要代码中有冗长的 if-else 或 switch 分支判断都可以采用策略模式优化")])]),v._v(" "),_("h2",{attrs:{id:"责任链设计模式"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#责任链设计模式"}},[v._v("#")]),v._v(" 责任链设计模式")]),v._v(" "),_("p",[v._v("职责链模式主要包含以下角色:")]),v._v(" "),_("ul",[_("li",[v._v("抽象处理者（Handler）角色：定义一个处理请求的接口，包含抽象处理方法和一个后继连接。")]),v._v(" "),_("li",[v._v("具体处理者（Concrete Handler）角色：实现抽象处理者的处理方法，判断能否处理本次请求，如果可以处理请求则处理，否则将该请求转给它的后继者。")]),v._v(" "),_("li",[v._v("客户类（Client）角色：创建处理链，并向链头的具体处理者对象提交请求，它不关心处理细节和请求的传递过程")])]),v._v(" "),_("p",[_("img",{attrs:{src:"C:%5CUsers%5C86157%5CDesktop%5Cblog-img%5Cimg%5C1744513485774-13.png",alt:"img"}})]),v._v(" "),_("p",[_("strong",[v._v("优点")])]),v._v(" "),_("ul",[_("li",[v._v("降低了对象之间的耦合度")]),v._v(" "),_("li",[v._v("该模式降低了请求发送者和接收者的耦合度。")]),v._v(" "),_("li",[v._v("增强了系统的可扩展性")]),v._v(" "),_("li",[v._v("可以根据需要增加新的请求处理类，满足开闭原则。")]),v._v(" "),_("li",[v._v("增强了给对象指派职责的灵活性")]),v._v(" "),_("li",[v._v("当工作流程发生变化，可以动态地改变链内的成员或者修改它们的次序，也可动态地新增或者删除责任。")]),v._v(" "),_("li",[v._v("责任链简化了对象之间的连接")]),v._v(" "),_("li",[v._v("一个对象只需保持一个指向其后继者的引用，不需保持其他所有处理者的引用，这避免了使用众多的 if 或者 if···else 语句。")]),v._v(" "),_("li",[v._v("责任分担")]),v._v(" "),_("li",[v._v("每个类只需要处理自己该处理的工作，不能处理的传递给下一个对象完成，明确各类的责任范围，符合类的单一职责原则。")])]),v._v(" "),_("p",[_("strong",[v._v("缺点：")])]),v._v(" "),_("ul",[_("li",[v._v("不能保证每个请求一定被处理。由于一个请求没有明确的接收者，所以不能保证它一定会被处理，该请求可能一直传到链的末端都得不到处理。")]),v._v(" "),_("li",[v._v("对比较长的职责链，请求的处理可能涉及多个处理对象，系统性能将受到一定影响。")]),v._v(" "),_("li",[v._v("职责链建立的合理性要靠客户端来保证，增加了客户端的复杂性，可能会由于职责链的错误设置而导致系统出错，如可能会造成循环调用。")])]),v._v(" "),_("h3",{attrs:{id:"举一反三-2"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#举一反三-2"}},[v._v("#")]),v._v(" 举一反三")]),v._v(" "),_("p",[v._v("内容审核（视频、文章、课程….）")]),v._v(" "),_("ul",[_("li",[v._v("文本审核->图片审核->视频审核")])]),v._v(" "),_("p",[v._v("订单创建")]),v._v(" "),_("ul",[_("li",[v._v("检验参数->填充->订单算价->落库->返佣")])]),v._v(" "),_("p",[v._v("简易流程审批")]),v._v(" "),_("ul",[_("li",[v._v("组长审批->主管审批->副总裁->总裁")])])])}),[],!1,null,null,null);_.default=i.exports}}]);