(window.webpackJsonp=window.webpackJsonp||[]).push([[73],{446:function(a,e,s){"use strict";s.r(e);var n=s(1),t=Object(n.a)({},(function(){var a=this,e=a._self._c;return e("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[e("h2",{attrs:{id:"准备环境-linux、docker"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#准备环境-linux、docker"}},[a._v("#")]),a._v(" 准备环境：linux、docker")]),a._v(" "),e("h2",{attrs:{id:"docker安装"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#docker安装"}},[a._v("#")]),a._v(" docker安装")]),a._v(" "),e("hr"),a._v(" "),e("h2",{attrs:{id:"一、dockerfile"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#一、dockerfile"}},[a._v("#")]),a._v(" 一、Dockerfile")]),a._v(" "),e("p",[e("strong",[a._v("这里以黑马点评项目为例")])]),a._v(" "),e("p",[e("strong",[a._v("在操作过程可以通过"),e("code",[a._v("docker logs <容器id>")]),a._v("查看日志")])]),a._v(" "),e("h2",{attrs:{id:"创建网络"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#创建网络"}},[a._v("#")]),a._v(" 创建网络")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("[root@localhost ~]# docker network create hmdpNW\nc7453ef75706426c68c226362aec408ead885099ba456dbc0418f2e3d13b5e90\n\n[root@localhost ~]# docker network ls\nNETWORK ID     NAME      DRIVER    SCOPE\n619a865af092   bridge    bridge    local\nc7453ef75706   hmdpNW    bridge    local\n4c581145b41c   host      host      local\n0293dfa69762   none      null      local\n# 其中，除了hmdpNW以外，其它都是默认的网络\n\n")])])]),e("h2",{attrs:{id:"mysql安装"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#mysql安装"}},[a._v("#")]),a._v(" mysql安装")]),a._v(" "),e("p",[a._v("删除MySQL")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("docker rm -f mysql\ndocker images # 查看旧mysql 的版本Tag\ndocker rmi mysql:{版本}\n")])])]),e("h3",{attrs:{id:"准备文件"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#准备文件"}},[a._v("#")]),a._v(" 准备文件")]),a._v(" "),e("p",[a._v("数据库初始化、数据的sql文件（用于在安装mysql时自动执行，可以用mysqldump工具在cmd将本地数据库hmdp数据导出为sql）")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("mysqldump -uroot -p123456 --databases hmdp > hmdp.sql\n")])])]),e("p",[a._v("hm.conf文件")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("[client]\ndefault_character_set=utf8mb4\n[mysql]\ndefault_character_set=utf8mb4\n[mysqld]\ncharacter_set_server=utf8mb4\ncollation_server=utf8mb4_unicode_ci\ninit_connect='SET NAMES utf8mb4'\n")])])]),e("p",[a._v("文件目录")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("mysql\n|——init\n|\t|——hmdp.sql\n|——conf\n    |——hm.conf\n")])])]),e("p",[e("strong",[a._v("将文件夹mysql放入部署环境根目录/root中")])]),a._v(" "),e("h3",{attrs:{id:"docker安装mysql-不建议使用mysql8"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#docker安装mysql-不建议使用mysql8"}},[a._v("#")]),a._v(" docker安装mysql（不建议使用MySQL8）")]),a._v(" "),e("p",[a._v("在根目录/root执行")]),a._v(" "),e("p",[a._v("（设置自己MySQL的密码，要记住）")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("docker run -d \\\n  --name mysql \\\n  -p 3306:3306 \\\n  -e TZ=Asia/Shanghai \\\n  -e MYSQL_ROOT_PASSWORD=123 \\\n  -v ./mysql/data:/var/lib/mysql \\\n  -v ./mysql/conf:/etc/mysql/conf.d \\\n  -v ./mysql/init:/docker-entrypoint-initdb.d \\\n  --network hmdpNW \\\n  mysql:5.7\n")])])]),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v('# 5.查看MySQL容器内数据\n# 5.1.进入MySQL\ndocker exec -it mysql mysql -uroot -p123\n# 5.2.查看编码表\nshow variables like "%char%";\n# 5.3.结果，发现编码是utf8mb4没有问题\n+--------------------------+--------------------------------+\n| Variable_name            | Value                          |\n+--------------------------+--------------------------------+\n| character_set_client     | utf8mb4                        |\n| character_set_connection | utf8mb4                        |\n| character_set_database   | utf8mb4                        |\n| character_set_filesystem | binary                         |\n| character_set_results    | utf8mb4                        |\n| character_set_server     | utf8mb4                        |\n| character_set_system     | utf8mb3                        |\n| character_sets_dir       | /usr/share/mysql-8.0/charsets/ |\n+--------------------------+--------------------------------+\n\n# 6.查看数据\n# 6.1.查看数据库\nshow databases;\n# 结果，hmdp是黑马商城数据库\n+--------------------+\n| Database           |\n+--------------------+\n| hmdp              |\n| information_schema |\n| mysql              |\n| performance_schema |\n| sys                |\n+--------------------+\n5 rows in set (0.00 sec)\n')])])]),e("p",[a._v("注意："),e("strong",[a._v("如果没有生成hmdp数据库")]),a._v("，（比如版本不一样导致数据库初始化失败），也可以在本地win环境的cmd中手动执行")]),a._v(" "),e("ul",[e("li",[a._v("先在Linux中查询IP地址")])]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("ifconfig\n# 如果提示没有ifconfig命令，需要先安装net-tools\nyum install net-tools\n")])])]),e("ul",[e("li",[a._v("IP地址是ens33里inet后面的，比如我的192.168.10.131")])]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("mysql -h192.168.10.131 -uroot -p123\n# 执行sql文件\nsource C:\\Users\\86157\\hmdp.sql\n")])])]),e("h2",{attrs:{id:"redis安装"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#redis安装"}},[a._v("#")]),a._v(" Redis安装")]),a._v(" "),e("h3",{attrs:{id:"准备文件-不需要"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#准备文件-不需要"}},[a._v("#")]),a._v(" "),e("s",[a._v("准备文件")]),a._v("(不需要)")]),a._v(" "),e("p",[e("s",[a._v("准备一个redis.conf文件")])]),a._v(" "),e("p",[e("s",[a._v("然后修改redis.conf文件中的一些配置：")])]),a._v(" "),e("div",{staticClass:"language-properties extra-class"},[e("pre",{pre:!0,attrs:{class:"language-properties"}},[e("code",[e("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# 允许访问的地址，默认是127.0.0.1，会导致只能在本地访问。修改为0.0.0.0则可以在任意IP访问，生产环境不要设置为0.0.0.0")]),a._v("\n"),e("span",{pre:!0,attrs:{class:"token key attr-name"}},[a._v("bind")]),a._v(" "),e("span",{pre:!0,attrs:{class:"token value attr-value"}},[a._v("0.0.0.0")]),a._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# 守护进程，修改为yes后即可后台运行")]),a._v("\n"),e("span",{pre:!0,attrs:{class:"token key attr-name"}},[a._v("daemonize")]),a._v(" "),e("span",{pre:!0,attrs:{class:"token value attr-value"}},[a._v("yes ")]),a._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# 密码，设置后访问Redis必须输入密码")]),a._v("\n"),e("span",{pre:!0,attrs:{class:"token key attr-name"}},[a._v("requirepass")]),a._v(" "),e("span",{pre:!0,attrs:{class:"token value attr-value"}},[a._v("123456")]),a._v("\n")])])]),e("p",[e("s",[a._v("上传到部署环境")])]),a._v(" "),e("h3",{attrs:{id:"docker安装redis"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#docker安装redis"}},[a._v("#")]),a._v(" docker安装redis")]),a._v(" "),e("p",[a._v("设置自己的密码")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("docker run -d \\\n  --restart=always \\\n  --name redis \\\n  -p 6379:6379 \\\n  -v ./redis/data:/data \\\n  -v ./redis/redis.conf:/etc/redis/redis.conf \\\n  --network hmdpNW \\\n  redis:6.2.18-alpine \\\n  redis-server /etc/redis/redis.conf \\\n  --appendonly yes \\\n  --requirepass 123456\n")])])]),e("h2",{attrs:{id:"后端部署"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#后端部署"}},[a._v("#")]),a._v(" 后端部署")]),a._v(" "),e("h3",{attrs:{id:"准备文件-2"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#准备文件-2"}},[a._v("#")]),a._v(" 准备文件")]),a._v(" "),e("p",[a._v("将项目打包为jar包，（只需要jar包，jar包可以改名）")]),a._v(" "),e("ul",[e("li",[e("p",[a._v("其中java项目的配置文件采用了多环境的方式："),e("code",[a._v("application-dev.yaml")]),a._v("是部署到开发环境的配置，"),e("code",[a._v("application-local.yaml")]),a._v("是本地运行时的配置。")]),a._v(" "),e("p",[a._v("application.yml")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("spring:\n  application:\n    name: hmdp\n  datasource:\n    driver-class-name: com.mysql.jdbc.Driver\n    url: jdbc:mysql://${db.host}:3306/hmdp?useSSL=false&serverTimezone=UTC\n    username: root\n    password: ${db.pw}\n  redis:\n    host: ${rs.host}\n    port: 6379\n    password: ${rs.pw}\n")])])]),e("p",[a._v("application-prod.yml")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("db:\n  host: mysql\n  pw: 123\nrs:\n  host: redis\n  pw: 123456\n")])])]),e("p",[a._v("application-dev.yml")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("db:\n  host: localhost\n  pw: 123456\nrs:\n  host: 127.0.0.1\n  pw:\n")])])])]),a._v(" "),e("li",[e("p",[a._v("在prod生产环境（也就是Docker部署时）采用了mysql作为地址，密码就是等下要部署在docker的MySQL密码，刚好是我们的mysql容器名，只要两者在一个网络，就一定能互相访问。")])]),a._v(" "),e("li",[e("p",[a._v("注意：代码中不要有redis的硬编码，如：")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v('    @Bean\n    public RedissonClient redissonClient(){\n        // 配置\n        Config config = new Config();\n        config.useSingleServer().setAddress("redis://127.0.0.1:6379");\n        // 创建RedissonClient对象\n        return Redisson.create(config);\n    }\n')])])])])]),a._v(" "),e("p",[a._v("准备Dockerfile文件，")]),a._v(" "),e("p",[a._v("一起上传到要部署的Linux环境的路径下（我放在/root/）")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v('# 基础镜像选择合适的版本\n# FROM openjdk:11.0-jre-buster\nFROM openjdk:8-jre\n# 设定时区\nENV TZ=Asia/Shanghai\nRUN ln -snf /usr/share/zoneinfo/$TZ /etc/localtime && echo $TZ > /etc/timezone\n# 拷贝jar包\nCOPY hmdp.jar /app.jar\n# 入口 \nENTRYPOINT ["java", "-jar", "/app.jar"]\n')])])]),e("h3",{attrs:{id:"部署项目"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#部署项目"}},[a._v("#")]),a._v(" 部署项目")]),a._v(" "),e("p",[a._v("在根目录/root（需要有jar包、和Dockerfile文件）")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v('# 1.构建项目镜像，不指定tag，则默认为latest\ndocker build -t hmdp .\n# 2.查看镜像\ndocker images\n# 结果\nREPOSITORY   TAG       IMAGE ID       CREATED       SIZE\nhmdp         latest    03fd24581034   8 hours ago   319MB\nmysql        8.0       00a697b8380c   2 weeks ago   772MB\n# 3.创建并运行容器，并通过--network将其加入hmall网络，这样才能通过容器名访问mysql\ndocker run -d --name hmdp --network hmdpNW -e "SPRING_PROFILES_ACTIVE=prod" -p 8081:8081 hmdp\n')])])]),e("h2",{attrs:{id:"前端部署"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#前端部署"}},[a._v("#")]),a._v(" 前端部署")]),a._v(" "),e("h3",{attrs:{id:"准备文件-3"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#准备文件-3"}},[a._v("#")]),a._v(" 准备文件")]),a._v(" "),e("p",[a._v("准备好自己项目的html和nginx.conf文件")]),a._v(" "),e("p",[a._v("其中nginx.conf文件需要根据"),e("strong",[a._v("实际修改location、proxy_pass")]),a._v("的路径\nlocation中的root修改为绝对路径\nproxy_pass修改为别名，可以通过网络访问")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("server {\n        listen       8090;\n        server_name  localhost;\n        # 指定前端项目所在的位置\n        location / {\n            root   /usr/share/nginx/html/hmdp;\n            index  index.html index.htm;\n        }\n\n        error_page   500 502 503 504  /50x.html;\n        location = /50x.html {\n            root   html;\n        }\n\n\n        location /api {  \n            default_type  application/json;\n            #internal;  \n            keepalive_timeout   30s;  \n            keepalive_requests  1000;  \n            #支持keep-alive  \n            proxy_http_version 1.1;  \n            rewrite /api(/.*) $1 break;  \n            proxy_pass_request_headers on;\n            #more_clear_input_headers Accept-Encoding;  \n            proxy_next_upstream error timeout;  \n            #proxy_pass http://127.0.0.1:8081;\n            proxy_pass http://backend;\n        }\n    }\n\n    upstream backend {\n        server hmdp:8081 max_fails=5 fail_timeout=10s weight=1;\n        #server hmdp:8082 max_fails=5 fail_timeout=10s weight=1;\n    }  \n")])])]),e("p",[a._v("文件目录")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("nginx\n|——nginx.conf\n|\n|——html\n")])])]),e("p",[e("strong",[a._v("将文件夹nginx放入部署环境根目录/root中")])]),a._v(" "),e("h3",{attrs:{id:"部署项目-2"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#部署项目-2"}},[a._v("#")]),a._v(" 部署项目")]),a._v(" "),e("p",[a._v("创建nginx容器并完成两个挂载")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("docker run -d \\\n  --name nginx \\\n  -p 8090:8090 \\\n  -v /root/nginx/html:/usr/share/nginx/html \\\n  -v /root/nginx/nginx.conf:/etc/nginx/nginx.conf \\\n  --network hmdpNW \\\n  nginx\n")])])]),e("h2",{attrs:{id:"网络添加补充"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#网络添加补充"}},[a._v("#")]),a._v(" 网络添加补充")]),a._v(" "),e("p",[a._v("如果前面"),e("strong",[a._v("网络没有添加成功")]),a._v("也可以手动添加")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("# 3.让dd和mysql都加入该网络，注意，在加入网络时可以通过--alias给容器起别名\n# 这样该网络内的其它容器可以用别名互相访问！\n# 3.1.mysql容器，指定别名为db，另外每一个容器都有一个别名是容器名\ndocker network connect hmdpNW mysql --alias db\n\ndocker network connect hmdpNW redis\n# 3.2.hmdp容器，也就是我们的java项目\ndocker network connect hmdpNW hmdp\n# 3.3.nginx容器，也就是我们的前端项目\ndocker network connect hmdpNW nginx\n\ndocker network inspect hmdpNW\n\n# 4.进入dd容器，尝试利用别名访问db\n# 4.1.进入容器\ndocker exec -it dd bash\n# 4.2.用db别名访问\nping db\n# 结果\nPING db (172.18.0.2) 56(84) bytes of data.\n64 bytes from mysql.hmall (172.18.0.2): icmp_seq=1 ttl=64 time=0.070 ms\n64 bytes from mysql.hmall (172.18.0.2): icmp_seq=2 ttl=64 time=0.056 ms\n# 4.3.用容器名访问\nping mysql\n# 结果：\nPING mysql (172.18.0.2) 56(84) bytes of data.\n64 bytes from mysql.hmall (172.18.0.2): icmp_seq=1 ttl=64 time=0.044 ms\n64 bytes from mysql.hmall (172.18.0.2): icmp_seq=2 ttl=64 time=0.054 ms\n")])])]),e("h2",{attrs:{id:"启动项目"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#启动项目"}},[a._v("#")]),a._v(" 启动项目")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("docker start mysql\ndocker start redis\ndocker start hmdp\ndocker start nginx\n# 如果启动失败，可以查看docker日志\ndockers logs <容器名>\n# 启动后端项目后，可以通过以下命令实时查看控制台日志\ndocker logs --tail 40 -f hmdp\n")])])]),e("h2",{attrs:{id:"停止项目"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#停止项目"}},[a._v("#")]),a._v(" 停止项目")]),a._v(" "),e("p",[a._v("一次性停止所有 Docker 容器")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("docker stop $(docker ps -q)\n")])])]),e("h2",{attrs:{id:"rabbitmq"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#rabbitmq"}},[a._v("#")]),a._v(" RabbitMQ")]),a._v(" "),e("p",[a._v("基于Docker来安装RabbitMQ，使用下面的命令即可：")]),a._v(" "),e("div",{staticClass:"language-Shell extra-class"},[e("pre",{pre:!0,attrs:{class:"language-shell"}},[e("code",[e("span",{pre:!0,attrs:{class:"token function"}},[a._v("docker")]),a._v(" run "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("\\")]),a._v("\n "),e("span",{pre:!0,attrs:{class:"token parameter variable"}},[a._v("-e")]),a._v(" "),e("span",{pre:!0,attrs:{class:"token assign-left variable"}},[a._v("RABBITMQ_DEFAULT_USER")]),e("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v("cyan "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("\\")]),a._v("\n "),e("span",{pre:!0,attrs:{class:"token parameter variable"}},[a._v("-e")]),a._v(" "),e("span",{pre:!0,attrs:{class:"token assign-left variable"}},[a._v("RABBITMQ_DEFAULT_PASS")]),e("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),e("span",{pre:!0,attrs:{class:"token number"}},[a._v("123456")]),a._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("\\")]),a._v("\n "),e("span",{pre:!0,attrs:{class:"token parameter variable"}},[a._v("-v")]),a._v(" mq-plugins:/plugins "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("\\")]),a._v("\n "),e("span",{pre:!0,attrs:{class:"token parameter variable"}},[a._v("--name")]),a._v(" mq "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("\\")]),a._v("\n "),e("span",{pre:!0,attrs:{class:"token parameter variable"}},[a._v("--hostname")]),a._v(" mq "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("\\")]),a._v("\n "),e("span",{pre:!0,attrs:{class:"token parameter variable"}},[a._v("-p")]),a._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[a._v("15672")]),a._v(":15672 "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("\\")]),a._v("\n "),e("span",{pre:!0,attrs:{class:"token parameter variable"}},[a._v("-p")]),a._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[a._v("5672")]),a._v(":5672 "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("\\")]),a._v("\n "),e("span",{pre:!0,attrs:{class:"token parameter variable"}},[a._v("--network")]),a._v(" hmdpNW"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("\\")]),a._v("\n "),e("span",{pre:!0,attrs:{class:"token parameter variable"}},[a._v("-d")]),a._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("\\")]),a._v("\n rabbitmq:3.8-management\n")])])]),e("hr"),a._v(" "),e("h2",{attrs:{id:"二、使用dockercompose"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#二、使用dockercompose"}},[a._v("#")]),a._v(" 二、使用DockerCompose")]),a._v(" "),e("h3",{attrs:{id:"准备好所有文件-conf、数据等"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#准备好所有文件-conf、数据等"}},[a._v("#")]),a._v(" 准备好所有文件（.conf、数据等）")]),a._v(" "),e("p",[a._v("mysql")]),a._v(" "),e("p",[a._v("redis")]),a._v(" "),e("p",[a._v("项目jar包hmdp")]),a._v(" "),e("p",[a._v("nginx")]),a._v(" "),e("h3",{attrs:{id:"执行dockercompose"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#执行dockercompose"}},[a._v("#")]),a._v(" 执行DockerCompose")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v('version: "3.8"\n\nservices:\n  mysql:\n    image: mysql\n    container_name: mysql\n    ports:\n      - "3306:3306"\n    environment:\n      TZ: Asia/Shanghai\n      MYSQL_ROOT_PASSWORD: 123\n    volumes:\n      - "./mysql/conf:/etc/mysql/conf.d"\n      - "./mysql/data:/var/lib/mysql"\n      - "./mysql/init:/docker-entrypoint-initdb.d"\n    networks:\n      - hm-net\n  redis:\n    image: redis:6.2.18-alpine\n    container_name: redis\n    restart: always\n    ports:\n      - "6379:6379"\n    volumes:\n      - "./redis/data:/data"\n      - "./redis/redis.conf:/etc/redis/redis.conf"\n    command: redis-server /etc/redis/redis.conf --appendonly yes --requirepass 123456\n    networks:\n      - hm-net\n  hmdp:\n    build: \n      context: .\n      dockerfile: Dockerfile\n    container_name: hmdp\n    ports:\n      - "8081:8081"\n    networks:\n      - hm-net\n    depends_on:\n      - mysql\n      - redis\n  nginx:\n    image: nginx\n    container_name: nginx\n    ports:\n      - "8090:8090"\n    volumes:\n      - "./nginx/nginx.conf:/etc/nginx/nginx.conf"\n      - "./nginx/html:/usr/share/nginx/html"\n    depends_on:\n      - hmdp\n    networks:\n      - hm-net\nnetworks:\n  hm-net:\n    name: hmdpNW\n')])])]),e("p",[e("strong",[e("code",[a._v("hm-net")])]),a._v("：这是在 Docker Compose 文件中引用这个网络时使用的名称（比如在 "),e("code",[a._v("services")]),a._v(" 部分的 "),e("code",[a._v("networks")]),a._v(" 配置中使用的名称）")]),a._v(" "),e("p",[e("strong",[e("code",[a._v("name: hmdpNW")])]),a._v("：这是可选配置，指定了 Docker 实际创建的网络名称。如果不指定，Docker 会默认使用 "),e("code",[a._v("[项目名称]_hm-net")]),a._v(" 这样的格式自动生成名称（项目名称通常取自所在目录名）")])])}),[],!1,null,null,null);e.default=t.exports}}]);