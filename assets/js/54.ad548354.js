(window.webpackJsonp=window.webpackJsonp||[]).push([[54],{427:function(t,s,a){"use strict";a.r(s);var n=a(1),e=Object(n.a)({},(function(){var t=this,s=t._self._c;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("p",[s("img",{attrs:{src:"https://raw.gitmirror.com/cyanyep/blog-img/master/img/1280X1280.PNG",alt:"1280X1280"}})]),t._v(" "),s("h2",{attrs:{id:"list"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#list"}},[t._v("#")]),t._v(" List")]),t._v(" "),s("h2",{attrs:{id:"为什么数组索引从0开始呢-假如从1开始不行吗"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#为什么数组索引从0开始呢-假如从1开始不行吗"}},[t._v("#")]),t._v(" 为什么数组索引从0开始呢？假如从1开始不行吗？")]),t._v(" "),s("p",[t._v("在根据数组索引获取元素的时候，会用索引和寻址公式来计算内存所对应的元素数据，寻址公式是：数组的首地址+索引 * 存储数据的类型大小\n如果数组的索引从1开始，寻址公式中，就需要增加一次减法操作，对于CPU来说就多了一次指令，性能不高。")]),t._v(" "),s("h2",{attrs:{id:"arraylist底层的实现原理是什么"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#arraylist底层的实现原理是什么"}},[t._v("#")]),t._v(" ArrayList底层的实现原理是什么")]),t._v(" "),s("ul",[s("li",[t._v("ArrayList底层是用动态的数组实现的")]),t._v(" "),s("li",[t._v("ArrayList初始容量为0，当第一次添加数据的时候才会初始化容量为10")]),t._v(" "),s("li",[t._v("ArrayList在进行扩容的时候是原来容量的1.5倍，每次扩容都需要拷贝数组")]),t._v(" "),s("li",[t._v("ArrayList在添加数据的时候\n"),s("ul",[s("li",[t._v("确保数组已使用长度(size)加1之后足够存下下一个数据")]),t._v(" "),s("li",[t._v("计算数组的容量，如果当前数组已使用长度+1后的大于当前的数组长度，则调用grow方法扩容（原来的1.5倍）")]),t._v(" "),s("li",[t._v("确保新增的数据有地方存储之后，则将新元素添加到位于size的位置上。")]),t._v(" "),s("li",[t._v("返回添加成功布尔值。")])])])]),t._v(" "),s("p",[s("img",{attrs:{src:"https://raw.gitmirror.com/cyanyep/blog-img/master/img/dba56bcb-9cb6-4f2b-866e-adcb955c949f.png",alt:"dba56bcb-9cb6-4f2b-866e-adcb955c949f"}})]),t._v(" "),s("h3",{attrs:{id:"面试题-arraylist-list-new-arraylist-10-中的list扩容几次"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#面试题-arraylist-list-new-arraylist-10-中的list扩容几次"}},[t._v("#")]),t._v(" 面试题-ArrayList list=new ArrayList(10)中的list扩容几次")]),t._v(" "),s("p",[t._v("该语句只是声明和实例了一个 ArrayList，指定了容量为 10，未扩容")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://raw.gitmirror.com/cyanyep/blog-img/master/img/output.png",alt:"output"}})]),t._v(" "),s("h3",{attrs:{id:"如何实现数组和list之间的转换"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#如何实现数组和list之间的转换"}},[t._v("#")]),t._v(" 如何实现数组和List之间的转换")]),t._v(" "),s("p",[t._v("数组转List,使用JDK中java.util.Arrays工具类的asList方法")]),t._v(" "),s("p",[t._v("List转数组，使用List的toArray方法。无参toArray方法返回Object数组，传入初始化长度的数组对象，返回该对象数组")]),t._v(" "),s("h3",{attrs:{id:"用arrays-aslist转list后-如果修改了数组内容-iist受影响吗"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#用arrays-aslist转list后-如果修改了数组内容-iist受影响吗"}},[t._v("#")]),t._v(" 用Arrays.asList转List后，如果修改了数组内容，Iist受影响吗")]),t._v(" "),s("p",[t._v("Arrays.asList转换list之后，如果修改了数组的内容，list会受影响，因为它的底层使用的Arrays类中的一个内部类ArrayList来构造的集合，在这个集合的构造器中，把我们传入的这个集合进行了包装而已，最终指向的都是同一个内存地址")]),t._v(" "),s("p",[s("s",[t._v("可以根据spring 的动态代理逻辑记，因为List是接口，将Arrays转为List是创建了一个代理对象（进行包装），所以修改array，list会受影响")])]),t._v(" "),s("h3",{attrs:{id:"list用toarray转数组后-如果修改了list内容-数组受影响吗"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#list用toarray转数组后-如果修改了list内容-数组受影响吗"}},[t._v("#")]),t._v(" List用toArray转数组后，如果修改了List内容，数组受影响吗")]),t._v(" "),s("p",[t._v("list用了toArray转数组后，如果修改了list内容，数组不会影响，当调用了toArray以后，在底层是它是进行了数组的拷贝，跟原来的元素就没啥关系了，所以即使list修改了以后，数组也不受影响")]),t._v(" "),s("h2",{attrs:{id:"面试题-arraylist和linkedlist的区别是什么"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#面试题-arraylist和linkedlist的区别是什么"}},[t._v("#")]),t._v(" 面试题-ArrayList和LinkedList的区别是什么？")]),t._v(" "),s("ul",[s("li",[t._v("底层数据结构\n"),s("ul",[s("li",[t._v("ArrayList 是"),s("strong",[t._v("动态数组")]),t._v("的数据结构实现")]),t._v(" "),s("li",[t._v("LinkedList 是"),s("strong",[t._v("双向链表")]),t._v("的数据结构实现")])])]),t._v(" "),s("li",[t._v("操作数据效率\n"),s("ul",[s("li",[t._v("ArrayList按照下标查询的时间复杂度O(1)【内存是连续的，根据寻址公式】， LinkedList不支持下标查询")]),t._v(" "),s("li",[t._v("查找（"),s("strong",[t._v("未知索引")]),t._v("）： ArrayList需要遍历，链表也需要遍历，时间复杂度都是O(n)")]),t._v(" "),s("li",[t._v("新增和删除\n"),s("ul",[s("li",[t._v("ArrayList尾部插入和删除，时间复杂度是O(1)；其他部分增删需要挪动数组，时间复杂度是O(n)")]),t._v(" "),s("li",[t._v("LinkedList头尾节点增删时间复杂度是O(1)，其他都需要遍历链表，时间复杂度是O(n)")])])])])]),t._v(" "),s("li",[t._v("内存空间占用\n"),s("ul",[s("li",[t._v("ArrayList底层是数组，内存连续，节省内存")]),t._v(" "),s("li",[t._v("LinkedList 是双向链表需要存储数据，和两个指针，更占用内存")])])]),t._v(" "),s("li",[t._v("线程安全\n"),s("ul",[s("li",[t._v("ArrayList和LinkedList都不是线程安全的")]),t._v(" "),s("li",[t._v("如果需要保证线程安全，有两种方案：\n"),s("ul",[s("li",[t._v("在方法内使用，局部变量则是线程安全的")]),t._v(" "),s("li",[t._v("使用线程安全的ArrayList和LinkedList")])])])])])]),t._v(" "),s("h2",{attrs:{id:"hashmap"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#hashmap"}},[t._v("#")]),t._v(" HashMap")]),t._v(" "),s("h2",{attrs:{id:"说一下hashmap的实现原理"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#说一下hashmap的实现原理"}},[t._v("#")]),t._v(" 说一下HashMap的实现原理？")]),t._v(" "),s("p",[t._v("HashMap的数据结构： 底层使用hash表数据结构，即数组和链表或红黑树")]),t._v(" "),s("ol",[s("li",[s("p",[t._v("当我们往HashMap中put元素时，利用key的hashCode计算出当前对象的元素在数组中的下标")])]),t._v(" "),s("li",[s("p",[t._v("存储时，如果出现hash值相同的key，此时有两种情况。")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",[s("code",[t._v(" a. 如果key相同，则覆盖原始值；\n\n  b. 如果key不同（出现冲突），则将当前的key-value放入链表或红黑树中 \n")])])])]),t._v(" "),s("li",[s("p",[t._v("获取时，直接找到hash值对应的下标，在进一步判断key是否相同，从而找到对应值。")])])]),t._v(" "),s("h3",{attrs:{id:"hashmap的jdk1-7和jdk1-8有什么区别"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#hashmap的jdk1-7和jdk1-8有什么区别"}},[t._v("#")]),t._v(" HashMap的jdk1.7和jdk1.8有什么区别")]),t._v(" "),s("ul",[s("li",[t._v("JDK1.8之前采用的是拉链法。拉链法：将链表和数组相结合。也就是说创建一个链表数组，数组中每一格就是一个链表。若遇到哈希冲突，则将冲突的值加到链表中即可。")]),t._v(" "),s("li",[t._v("jdk1.8在解决哈希冲突时有了较大的变化，当链表长度大于阈值（默认为8） 时并且数组长度达到64时，将链表转化为红黑树，以减少搜索时间。扩容 resize( ) 时，红黑树拆分成的树的结点数小于等于临界值6个，则退化成链表")])]),t._v(" "),s("h3",{attrs:{id:"hashmap的put方法的具体流程"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#hashmap的put方法的具体流程"}},[t._v("#")]),t._v(" hashMap的put方法的具体流程")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://raw.gitmirror.com/cyanyep/blog-img/master/img/image-20250407204110241.png",alt:"image-20250407204110241"}})]),t._v(" "),s("div",{staticClass:"language-Java extra-class"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("V")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("put")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("K")]),t._v(" key"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("V")]),t._v(" value"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("putVal")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("hash")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("key"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" key"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" value"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("false")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("final")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("V")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("putVal")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" hash"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("K")]),t._v(" key"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("V")]),t._v(" value"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("boolean")]),t._v(" onlyIfAbsent"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n                   "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("boolean")]),t._v(" evict"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Node")]),s("span",{pre:!0,attrs:{class:"token generics"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("K")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("V")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" tab"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Node")]),s("span",{pre:!0,attrs:{class:"token generics"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("K")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("V")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v(" p"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" i"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//判断数组是否未初始化")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("tab "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" table"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("||")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("n "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" tab"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("length"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//如果未初始化，调用resize方法 进行初始化")]),t._v("\n        n "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("tab "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("resize")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("length"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//通过 & 运算求出该数据（key）的数组下标并判断该下标位置是否有数据")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("p "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" tab"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("i "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("n "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v(" hash"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//如果没有，直接将数据放在该下标位置")]),t._v("\n        tab"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("i"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("newNode")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("hash"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" key"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" value"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//该数组下标有数据的情况")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("else")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Node")]),s("span",{pre:!0,attrs:{class:"token generics"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("K")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("V")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v(" e"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("K")]),t._v(" k"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//判断该位置数据的key和新来的数据是否一样")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("p"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("hash "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" hash "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&&")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("k "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" p"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("key"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" key "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("||")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("key "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&&")]),t._v(" key"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("equals")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("k"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//如果一样，证明为修改操作，该节点的数据赋值给e,后边会用到")]),t._v("\n            e "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" p"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" \n        "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//判断是不是红黑树")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("else")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("p "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("instanceof")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("TreeNode")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//如果是红黑树的话，进行红黑树的操作")]),t._v("\n            e "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("TreeNode")]),s("span",{pre:!0,attrs:{class:"token generics"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("K")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("V")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("p"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("putTreeVal")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" tab"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" hash"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" key"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" value"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//新数据和当前数组既不相同，也不是红黑树节点，证明是链表")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("else")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//遍历链表")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" binCount "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),t._v("binCount"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n                "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//判断next节点，如果为空的话，证明遍历到链表尾部了")]),t._v("\n                "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("e "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" p"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("next"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n                    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//把新值放入链表尾部")]),t._v("\n                    p"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("next "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("newNode")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("hash"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" key"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" value"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n                    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//因为新插入了一条数据，所以判断链表长度是不是大于等于8")]),t._v("\n                    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("binCount "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("TREEIFY_THRESHOLD")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// -1 for 1st")]),t._v("\n                        "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//如果是，进行转换红黑树操作")]),t._v("\n                        "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("treeifyBin")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("tab"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" hash"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n                    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("break")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n                "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n                "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//判断链表当中有数据相同的值，如果一样，证明为修改操作")]),t._v("\n                "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("e"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("hash "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" hash "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&&")]),t._v("\n                    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("k "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" e"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("key"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" key "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("||")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("key "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&&")]),t._v(" key"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("equals")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("k"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n                    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("break")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n                "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//把下一个节点赋值为当前节点")]),t._v("\n                p "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" e"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//判断e是否为空（e值为修改操作存放原数据的变量）")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("e "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// existing mapping for key")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//不为空的话证明是修改操作，取出老值")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("V")]),t._v(" oldValue "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" e"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("value"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//一定会执行  onlyIfAbsent传进来的是false")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!")]),t._v("onlyIfAbsent "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("||")]),t._v(" oldValue "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n                "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//将新值赋值当前节点")]),t._v("\n                e"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("value "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" value"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("afterNodeAccess")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("e"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//返回老值")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" oldValue"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//计数器，计算当前节点的修改次数")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),t._v("modCount"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//当前数组中的数据数量如果大于扩容阈值")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),t._v("size "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" threshold"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//进行扩容操作")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("resize")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//空方法")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("afterNodeInsertion")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("evict"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//添加操作时 返回空值")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("ol",[s("li",[s("p",[t._v("判断键值对数组table是否为空或为null，否则执行resize()进行扩容（初始化）")])]),t._v(" "),s("li",[s("p",[t._v("根据键值key计算hash值得到数组索引（取余）")])]),t._v(" "),s("li",[s("p",[t._v("判断table[i]==null，条件成立，直接新建节点添加")])]),t._v(" "),s("li",[s("p",[t._v("如果table[i]==null ,不成立")]),t._v(" "),s("p",[t._v("4.1 判断table[i]的首个元素是否和key一样，如果相同直接覆盖value")]),t._v(" "),s("p",[t._v("4.2 判断table[i] 是否为treeNode，即table[i] 是否是红黑树，如果是红黑树，则直接在树中插入键值对")]),t._v(" "),s("p",[t._v("4.3 遍历table[i]，链表的尾部插入数据，然后判断链表长度是否大于8且table大于64，满足条件的话把链表转换为红黑树，在红黑树中执行插入操 作，遍历过程中若发现key已经存在直接覆盖value")])]),t._v(" "),s("li",[s("p",[t._v("插入成功后，判断实际存在的键值对数量size是否超多了最大容量threshold（数组长度*0.75），如果超过，")])]),t._v(" "),s("li",[s("p",[t._v("进行扩容。")])])]),t._v(" "),s("h3",{attrs:{id:"讲一讲hashmap的扩容机制"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#讲一讲hashmap的扩容机制"}},[t._v("#")]),t._v(" 讲一讲HashMap的扩容机制")]),t._v(" "),s("p",[s("img",{attrs:{src:"C:%5CUsers%5C86157%5CDesktop%5Cblog-img%5Cimg%5Coutput-1744098347943-1.png",alt:"output"}})]),t._v(" "),s("ul",[s("li",[t._v("在添加元素或初始化的时候需要调用resize方法进行扩容，第一次添加数据初始化数组长度为16，以后每次扩容都是达到了扩容阈值（数组长度 * 0.75）")]),t._v(" "),s("li",[t._v("每次扩容的时候，都是扩容之前容量的2倍；")]),t._v(" "),s("li",[t._v("扩容之后，会新创建一个数组，需要把老数组中的数据挪动到新的数组中\n"),s("ul",[s("li",[t._v("没有hash冲突的节点，则直接使用 e.hash & (newCap - 1) 计算新数组的索引位置")]),t._v(" "),s("li",[t._v("如果是红黑树，走红黑树的添加")]),t._v(" "),s("li",[t._v("如果是链表，则需要遍历链表，可能需要拆分链表，判断(e.hash & oldCap)是否为0，该元素的位置要么停留在原始位置，要么移动到原始位置+增加的数组大小这个位置上")])])])]),t._v(" "),s("h3",{attrs:{id:"hashmap的寻址算法"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#hashmap的寻址算法"}},[t._v("#")]),t._v(" hashMap的寻址算法")]),t._v(" "),s("ul",[s("li",[t._v("计算对象的hashCode()")]),t._v(" "),s("li",[t._v("再进行调用hash()方法进行二次哈希，具体操作是hashcode值与自身右移16位的值进行异或运算，让哈希分布更为均匀")]),t._v(" "),s("li",[t._v("最后(capacity-1)&hash得到索引")])]),t._v(" "),s("h3",{attrs:{id:"为何hashmap的数组长度一定是2的次幂"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#为何hashmap的数组长度一定是2的次幂"}},[t._v("#")]),t._v(" 为何HashMap的数组长度一定是2的次幂？")]),t._v(" "),s("ol",[s("li",[t._v("计算索引时效率更高：如果是 2 的 n 次幂可以使用位与运算代替取模")]),t._v(" "),s("li",[t._v("扩容时重新计算索引效率更高： hash & oldCap == 0 的元素留在原来位置 ，否则新位置 = 旧位置 + oldCap")])]),t._v(" "),s("h3",{attrs:{id:"hashmap在1-7情况下的多线程死循环问题"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#hashmap在1-7情况下的多线程死循环问题"}},[t._v("#")]),t._v(" hashmap在1.7情况下的多线程死循环问题")]),t._v(" "),s("p",[t._v("在jdk1.7的hashmap中由多个线程对数组进行扩容的时候，因为链表是头插法，在进行数据迁移的过程中，有可能导致死循环")]),t._v(" "),s("p",[t._v("比如说，现在有两个线程同时对hashmap的一个链表AB进行数据迁移")]),t._v(" "),s("p",[t._v("线程一：读取到当前链表的数据，准备扩容时，线程二介入")]),t._v(" "),s("p",[t._v("线程二：也读取hashmap，直接进行扩容。因为是头插法，链表的顺序会进行颠倒过来。比如原来的顺序是AB，扩容后的顺序是BA，线程二执行结束。")]),t._v(" "),s("p",[t._v("线程一：但是线程一仍然指向AB，继续执行的时候就会出现死循环的问题。")]),t._v(" "),s("p",[t._v("线程一先将A移入新的链表，再将B插入到链头，由于另外一个线程的原因，B的next指向了A，所以A又插入了一次，")]),t._v(" "),s("p",[t._v("导致链表顺序为A->B->A,形成循环。")]),t._v(" "),s("p",[t._v("当然，JDK 8 将扩容算法做了调整，不再将元素加入链表头（而是保持与扩容前一样的顺序），"),s("strong",[t._v("尾插法")]),t._v("，就避免了jdk7中死循环的问题。")]),t._v(" "),s("h3",{attrs:{id:"面试题-hashset与hashmap的区别"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#面试题-hashset与hashmap的区别"}},[t._v("#")]),t._v(" 面试题-HashSet与HashMap的区别")]),t._v(" "),s("p",[t._v("(1)HashSet实现了Set接口, 仅存储对象; HashMap实现了 Map接口, 存储的是键值对.")]),t._v(" "),s("p",[t._v("(2)HashSet底层其实是用HashMap实现存储的, HashSet封装了一系列HashMap的方法. 依靠HashMap来存储元素值,(利用hashMap的key键进行存储), 而value值默认为Object对象. 所以HashSet也不允许出现重复值, 判断标准和HashMap判断标准相同, 两个元素的hashCode相等并且通过equals()方法返回true.")]),t._v(" "),s("h2",{attrs:{id:"hashtable与hashmap的区别"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#hashtable与hashmap的区别"}},[t._v("#")]),t._v(" HashTable与HashMap的区别")]),t._v(" "),s("table",[s("thead",[s("tr",[s("th",[t._v("区别")]),t._v(" "),s("th",[t._v("HashTable")]),t._v(" "),s("th",[t._v("HashMap")])])]),t._v(" "),s("tbody",[s("tr",[s("td",[t._v("数据结构")]),t._v(" "),s("td",[t._v("数组+链表")]),t._v(" "),s("td",[t._v("数组+链表+红黑树")])]),t._v(" "),s("tr",[s("td",[t._v("是否可以为null")]),t._v(" "),s("td",[t._v("Key和value都不能为null")]),t._v(" "),s("td",[t._v("可以为null")])]),t._v(" "),s("tr",[s("td",[t._v("hash算法")]),t._v(" "),s("td",[t._v("key的hashCode()")]),t._v(" "),s("td",[t._v("二次hash")])]),t._v(" "),s("tr",[s("td",[t._v("扩容方式")]),t._v(" "),s("td",[t._v("当前容量翻倍 +1")]),t._v(" "),s("td",[t._v("当前容量翻倍")])]),t._v(" "),s("tr",[s("td",[t._v("线程安全")]),t._v(" "),s("td",[t._v("同步(synchronized)的，线程安全")]),t._v(" "),s("td",[t._v("非线程安全")])])])]),t._v(" "),s("p",[t._v("在实际开中不建议使用HashTable，在多线程环境下可以使用ConcurrentHashMap类")])])}),[],!1,null,null,null);s.default=e.exports}}]);