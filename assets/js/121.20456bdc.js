(window.webpackJsonp=window.webpackJsonp||[]).push([[121],{493:function(a,v,t){"use strict";t.r(v);var s=t(1),_=Object(s.a)({},(function(){var a=this,v=a._self._c;return v("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[v("h2",{attrs:{id:"大型互联网项目架构目标"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#大型互联网项目架构目标"}},[a._v("#")]),a._v(" 大型互联网项目架构目标")]),a._v(" "),v("h3",{attrs:{id:"衡量网站的性能指标"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#衡量网站的性能指标"}},[a._v("#")]),a._v(" 衡量网站的性能指标：")]),a._v(" "),v("p",[v("strong",[a._v("响应时间")]),a._v("：指执行一个请求从开始到最后收到响应数据所花费的总体时间。")]),a._v(" "),v("p",[v("strong",[a._v("并发数")]),a._v("：指系统同时能处理的请求数量。")]),a._v(" "),v("ul",[v("li",[v("strong",[a._v("并发连接数")]),a._v("：指的是客户端向服务器发起请求，并建立了TCP连接。每秒钟服务器连接的总TCP数量")]),a._v(" "),v("li",[v("strong",[a._v("请求数")]),a._v("：也称为QPS(Query Per Second) 指每秒多少请求.")]),a._v(" "),v("li",[v("strong",[a._v("并发用户数")]),a._v("：单位时间内有多少用户")])]),a._v(" "),v("p",[v("strong",[a._v("吞吐量")]),a._v("：指单位时间内系统能处理的请求数量。")]),a._v(" "),v("ul",[v("li",[v("p",[v("strong",[a._v("QPS")]),a._v("：Query Per Second 每秒查询数。")])]),a._v(" "),v("li",[v("p",[v("strong",[a._v("TPS")]),a._v("：Transactions Per Second 每秒事务数。")])]),a._v(" "),v("li",[v("p",[a._v("一个事务是指一个客户机向服务器发送请求然后服务器做出反应的过程。客户机在发送请求时开始计时，收到服务器响应后结束计时，以此来计算使用的时间和完成的事务个数。")])]),a._v(" "),v("li",[v("p",[a._v("一个页面的一次访问，只会形成一个TPS；但一次页面请求，可能产生多次对服务器的请求，就会有多个QPS")])])]),a._v(" "),v("p",[a._v("QPS >= 并发连接数 >= TPS")]),a._v(" "),v("ul",[v("li",[v("strong",[a._v("高性能")]),a._v("：提供快速的访问体验。")]),a._v(" "),v("li",[v("strong",[a._v("高可用")]),a._v("：网站服务一直可以正常访问。")]),a._v(" "),v("li",[v("strong",[a._v("可伸缩")]),a._v("：通过硬件增加/减少，提高/降低处理能力。")]),a._v(" "),v("li",[v("strong",[a._v("高可扩展")]),a._v("：系统间耦合低，方便的通过新增/移除方式，增加/减")]),a._v(" "),v("li",[a._v("少新的功能/模块。")]),a._v(" "),v("li",[v("strong",[a._v("安全性")]),a._v("：提供网站安全访问和数据加密，安全存储等策略。")]),a._v(" "),v("li",[v("strong",[a._v("敏捷性")]),a._v("：随需应变，快速响应")])]),a._v(" "),v("h2",{attrs:{id:"分布式系统中的相关概念"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#分布式系统中的相关概念"}},[a._v("#")]),a._v(" 分布式系统中的相关概念")]),a._v(" "),v("h3",{attrs:{id:"集群和分布式"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#集群和分布式"}},[a._v("#")]),a._v(" 集群和分布式")]),a._v(" "),v("p",[a._v("集群：很多“人”一起 ，干一样的事。")]),a._v(" "),v("p",[a._v("分布式：很多“人”一起，干不一样的事。这些不一样的事，合起来是一件大事。")]),a._v(" "),v("h2",{attrs:{id:"架构演进"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#架构演进"}},[a._v("#")]),a._v(" 架构演进")]),a._v(" "),v("p",[a._v("单体架构——》垂直架构 ——》分布式架构 ——》SOA架构 ——》微服务架构")]),a._v(" "),v("h3",{attrs:{id:"单体架构"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#单体架构"}},[a._v("#")]),a._v(" 单体架构")]),a._v(" "),v("p",[a._v("优点：")]),a._v(" "),v("ul",[v("li",[a._v("简单：开发部署都很方便，小型项目首选")])]),a._v(" "),v("p",[a._v("缺点：")]),a._v(" "),v("ul",[v("li",[v("p",[a._v("项目启动慢")])]),a._v(" "),v("li",[v("p",[a._v("可靠性差")])]),a._v(" "),v("li",[v("p",[a._v("可伸缩性差")])]),a._v(" "),v("li",[v("p",[a._v("扩展性和可维护性差")])]),a._v(" "),v("li",[v("p",[a._v("性能低")])])]),a._v(" "),v("h3",{attrs:{id:"垂直架构"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#垂直架构"}},[a._v("#")]),a._v(" 垂直架构")]),a._v(" "),v("p",[a._v("垂直架构是指将单体架构中的多个模块拆分为多个独立的项目。形成多个独立的单体架构。")]),a._v(" "),v("p",[a._v("垂直架构存在的问题：")]),a._v(" "),v("ul",[v("li",[a._v("重复功能太多")])]),a._v(" "),v("h3",{attrs:{id:"分布式架构"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#分布式架构"}},[a._v("#")]),a._v(" 分布式架构")]),a._v(" "),v("ul",[v("li",[a._v("分布式架构是指在垂直架构的基础上，将公共业务模块抽取出来，作为独立的服务，供其他调用者消费，以实现服务的共享和重用。")]),a._v(" "),v("li",[a._v("RPC： Remote Procedure Call 远程过程调用。有非常多的协议和技术来都实现了RPC的过程。比如：HTTP REST风格，Java RMI规范、WebService SOAP协议、Hession等等。")])]),a._v(" "),v("p",[a._v("分布式架构存在的问题：")]),a._v(" "),v("ul",[v("li",[a._v("服务提供方一旦产生变更，所有消费方都需要变更。")])]),a._v(" "),v("h3",{attrs:{id:"soa架构"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#soa架构"}},[a._v("#")]),a._v(" SOA架构")]),a._v(" "),v("ul",[v("li",[v("p",[a._v("SOA：（Service-Oriented Architecture，面向服务的架构）是一个组件模型，它将应用程序的不同功能单元（称为服务）进行拆分，并通过这些服务之间定义良好的接口和契约联系起来。")])]),a._v(" "),v("li",[v("p",[a._v("ESB：(Enterparise Servce Bus) 企业服务总线，服务中介。主要是提供了一个服务于服务之间的交互。ESB 包含的功能如：负载均衡，流量控制，加密处理，服务的监控，异常处理，监控告急等等。")])])]),a._v(" "),v("h3",{attrs:{id:"微服务架构"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#微服务架构"}},[a._v("#")]),a._v(" 微服务架构")]),a._v(" "),v("ul",[v("li",[v("p",[a._v("微服务架构是在 SOA 上做的升华，微服务架构强调的一个重点是“业务需要彻底的组件化和服务化”，原有的单个业务系统会拆分为多个可以独立开发、设计、运行的小应用。这些小应用之间通过服务完成交互和集成。")])]),a._v(" "),v("li",[v("p",[a._v("微服务架构 = 80%的SOA服务架构思想 + 100%的组件化架构思想 + 80%的领域建模思想")])])]),a._v(" "),v("p",[a._v("特点：")]),a._v(" "),v("ul",[v("li",[v("p",[a._v("服务实现组件化：开发者可以自由选择开发技术。也不需要协调其他团队")])]),a._v(" "),v("li",[v("p",[a._v("服务之间交互一般使用REST API")])]),a._v(" "),v("li",[v("p",[a._v("去中心化：每个微服务有自己私有的数据库持久化业务数据")])]),a._v(" "),v("li",[v("p",[a._v("自动化部署：把应用拆分成为一个一个独立的单个服务，方便自动化部署、测试、运维")])])]),a._v(" "),v("p",[a._v("Dubbo 是 SOA时代的产物，SpringCloud 是微服务时代的产物")]),a._v(" "),v("h2",{attrs:{id:"dubbo概述"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#dubbo概述"}},[a._v("#")]),a._v(" Dubbo概述")]),a._v(" "),v("p",[a._v("Dubbo是阿里巴巴公司开源的一个高性能、轻量级的 Java RPC 框架。")]),a._v(" "),v("p",[a._v("致力于提供高性能和透明化的 RPC 远程服务调用方案，以及 SOA 服务治理方案。")]),a._v(" "),v("p",[v("img",{attrs:{src:"C:%5CUsers%5C86157%5CDesktop%5Cblog-img%5Cimg%5Cimage-20250521152906073.png",alt:"image-20250521152906073"}})]),a._v(" "),v("p",[a._v("节点角色说明：")]),a._v(" "),v("ul",[v("li",[v("p",[a._v("**Provider：**暴露服务的服务提供方")])]),a._v(" "),v("li",[v("p",[v("strong",[a._v("Container")]),a._v("：服务运行容器")])]),a._v(" "),v("li",[v("p",[v("strong",[a._v("Consumer")]),a._v("：调用远程服务的服务消费方")])]),a._v(" "),v("li",[v("p",[v("strong",[a._v("Registry")]),a._v("：服务注册与发现的注册中心")])]),a._v(" "),v("li",[v("p",[v("strong",[a._v("Monitor")]),a._v("：统计服务的调用次数和调用时间的监控中心")])])]),a._v(" "),v("h2",{attrs:{id:"dubbo快速入门"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#dubbo快速入门"}},[a._v("#")]),a._v(" Dubbo快速入门")]),a._v(" "),v("h3",{attrs:{id:"zookeeper安装"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#zookeeper安装"}},[a._v("#")]),a._v(" Zookeeper安装")]),a._v(" "),v("p",[a._v("Dubbo官方推荐使用Zookeeper作为注册中心")]),a._v(" "),v("p",[v("RouterLink",{attrs:{to:"/40.Spring生态/08.MicroServices/Zookeeper/#安装"}},[a._v("Zookeeper安装")])],1),a._v(" "),v("h3",{attrs:{id:"实现步骤"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#实现步骤"}},[a._v("#")]),a._v(" 实现步骤")]),a._v(" "),v("p",[a._v("① 创建服务提供者Provider模块")]),a._v(" "),v("p",[a._v("② 创建服务消费者Consumer模块")]),a._v(" "),v("p",[a._v("③ 在服务提供者模块编写 UserServiceImpl 提供服务")]),a._v(" "),v("p",[a._v("④ 在服务消费者中的 UserController 远程调用UserServiceImpl 提供的服务")]),a._v(" "),v("p",[a._v("⑤ 分别启动两个服务，测试")]),a._v(" "),v("p",[v("img",{attrs:{src:"C:%5CUsers%5C86157%5CDesktop%5Cblog-img%5Cimg%5Cimage-20250521161847594.png",alt:"image-20250521161847594"}})]),a._v(" "),v("h2",{attrs:{id:"dubbo-高级特性"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#dubbo-高级特性"}},[a._v("#")]),a._v(" Dubbo 高级特性")]),a._v(" "),v("h3",{attrs:{id:"dubbo-admin"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#dubbo-admin"}},[a._v("#")]),a._v(" dubbo-admin")]),a._v(" "),v("ul",[v("li",[v("p",[a._v("dubbo-admin 管理平台，是图形化的服务管理页面")])]),a._v(" "),v("li",[v("p",[a._v("从注册中心中获取到所有的提供者 / 消费者进行配置管理")])]),a._v(" "),v("li",[v("p",[a._v("路由规则、动态配置、服务降级、访问控制、权重调整、负载均衡等管理功能")])]),a._v(" "),v("li",[v("p",[a._v("dubbo-admin 是一个前后端分离的项目。前端使用vue ，后端使用springboot")])]),a._v(" "),v("li",[v("p",[a._v("安装 dubbo-admin 其实就是部署该项目")])])]),a._v(" "),v("h4",{attrs:{id:"dubbo-admin安装"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#dubbo-admin安装"}},[a._v("#")]),a._v(" dubbo-admin安装")]),a._v(" "),v("p",[v("strong",[a._v("1、环境准备")])]),a._v(" "),v("p",[a._v("dubbo-admin 是一个前后端分离的项目。前端使用vue，后端使用springboot，安装 dubbo-admin 其实就是部署该项目。我们将dubbo-admin安装到开发环境上。要保证开发环境有jdk，maven，nodejs")]),a._v(" "),v("p",[a._v("安装node**(如果当前机器已经安装请忽略)**")]),a._v(" "),v("p",[a._v("因为前端工程是用vue开发的，所以需要安装node.js，node.js中自带了npm，后面我们会通过npm启动")]),a._v(" "),v("p",[a._v("下载地址")]),a._v(" "),v("div",{staticClass:"language- extra-class"},[v("pre",{pre:!0,attrs:{class:"language-text"}},[v("code",[a._v("https://nodejs.org/en/\n")])])]),v("p",[v("strong",[a._v("2、下载 Dubbo-Admin")])]),a._v(" "),v("p",[a._v("进入github，搜索dubbo-admin")]),a._v(" "),v("div",{staticClass:"language- extra-class"},[v("pre",{pre:!0,attrs:{class:"language-text"}},[v("code",[a._v("https://github.com/apache/dubbo-admin\n")])])]),v("p",[a._v("下载：")]),a._v(" "),v("p",[a._v("3、把下载的zip包解压到指定文件夹(解压到那个文件夹随意)")]),a._v(" "),v("p",[v("strong",[a._v("4、修改配置文件")])]),a._v(" "),v("p",[a._v("解压后我们进入…\\dubbo-admin-develop\\dubbo-admin-server\\src\\main\\resources目录，找到 "),v("strong",[a._v("application.properties")]),a._v(" 配置文件 进行配置修改")]),a._v(" "),v("p",[a._v("修改zookeeper地址")]),a._v(" "),v("div",{staticClass:"language-shell extra-class"},[v("pre",{pre:!0,attrs:{class:"language-shell"}},[v("code",[v("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# centers in dubbo2.7")]),a._v("\n"),v("span",{pre:!0,attrs:{class:"token assign-left variable"}},[a._v("admin.registry.address")]),v("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v("zookeeper://192.168.149.135:2181\nadmin.config-center"),v("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v("zookeeper://192.168.149.135:2181\nadmin.metadata-report.address"),v("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v("zookeeper://192.168.149.135:2181\n\n")])])]),v("p",[a._v("admin.registry.address注册中心\nadmin.config-center 配置中心\nadmin.metadata-report.address元数据中心")]),a._v(" "),v("p",[v("strong",[a._v("5、打包项目")])]),a._v(" "),v("p",[a._v("在 dubbo-admin-develop 目录执行打包命令")]),a._v(" "),v("div",{staticClass:"language-shell extra-class"},[v("pre",{pre:!0,attrs:{class:"language-shell"}},[v("code",[a._v("mvn  clean package\n")])])]),v("p",[v("strong",[a._v("6、启动后端")])]),a._v(" "),v("p",[a._v("切换到目录")]),a._v(" "),v("div",{staticClass:"language-shell extra-class"},[v("pre",{pre:!0,attrs:{class:"language-shell"}},[v("code",[a._v("dubbo-Admin-develop"),v("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("\\")]),a._v("dubbo-admin-distribution"),v("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("\\")]),a._v("target"),v("span",{pre:!0,attrs:{class:"token operator"}},[a._v(">")]),a._v("\n")])])]),v("p",[a._v("执行下面的命令启动 dubbo-admin，dubbo-admin后台由SpringBoot构建。")]),a._v(" "),v("div",{staticClass:"language-shell extra-class"},[v("pre",{pre:!0,attrs:{class:"language-shell"}},[v("code",[v("span",{pre:!0,attrs:{class:"token function"}},[a._v("java")]),a._v(" "),v("span",{pre:!0,attrs:{class:"token parameter variable"}},[a._v("-jar")]),a._v(" ."),v("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("\\")]),a._v("dubbo-admin-0.1.jar\n")])])]),v("p",[v("strong",[a._v("7、前台后端")])]),a._v(" "),v("p",[a._v("dubbo-admin-ui 目录下执行命令")]),a._v(" "),v("div",{staticClass:"language-shell extra-class"},[v("pre",{pre:!0,attrs:{class:"language-shell"}},[v("code",[v("span",{pre:!0,attrs:{class:"token function"}},[a._v("npm")]),a._v(" run dev\n")])])]),v("p",[v("strong",[a._v("8、访问")])]),a._v(" "),v("p",[a._v("浏览器输入。用户名密码都是root")]),a._v(" "),v("div",{staticClass:"language- extra-class"},[v("pre",{pre:!0,attrs:{class:"language-text"}},[v("code",[a._v("http://localhost:8081/\n")])])]),v("h4",{attrs:{id:"dubbo-admin简单使用"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#dubbo-admin简单使用"}},[a._v("#")]),a._v(" dubbo-admin简单使用")]),a._v(" "),v("p",[a._v("注意:Dubbo Admin【服务Mock】【服务统计】将在后续版本发布....")]),a._v(" "),v("p",[a._v("在上面的步骤中，我们已经进入了Dubbo-Admin的主界面，在【快速入门】章节中，我们定义了服务生产者、和服务消费者，下面我们从Dubbo-Admin管理界面找到这个两个服务")]),a._v(" "),v("ul",[v("li",[v("p",[a._v("A:输入的查询条件com.itheima.service.UserService")])]),a._v(" "),v("li",[v("p",[a._v("B:搜索类型，主要分为【按服务名】【按IP地址】【按应用】三种类型查询")])]),a._v(" "),v("li",[v("p",[a._v("C:搜索结果")])])]),a._v(" "),v("p",[v("strong",[a._v("3.1.4 dubo-admin查看详情")])]),a._v(" "),v("p",[a._v("我们查看com.itheima.service.UserService （服务提供者）的具体详细信息，包含【元数据信息】")]),a._v(" "),v("p",[v("strong",[a._v("1）点击详情")])]),a._v(" "),v("p",[a._v("从【详情】界面查看，主要分为3个区域")]),a._v(" "),v("ul",[v("li",[v("p",[a._v("A区域：主要包含服务端 基础信息比如服务名称、应用名称等")])]),a._v(" "),v("li",[v("p",[a._v("B区域：主要包含了生产者、消费者一些基本信息")])]),a._v(" "),v("li",[v("p",[v("strong",[a._v("C区域：是元数据信息，注意看上面的图,元数据信息是空的")])])])]),a._v(" "),v("p",[a._v("我们需要打开我们的生产者配置文件加入下面配置")]),a._v(" "),v("div",{staticClass:"language-xml extra-class"},[v("pre",{pre:!0,attrs:{class:"language-xml"}},[v("code",[a._v("    "),v("span",{pre:!0,attrs:{class:"token comment"}},[a._v("\x3c!-- 元数据配置 --\x3e")]),a._v("\n    "),v("span",{pre:!0,attrs:{class:"token tag"}},[v("span",{pre:!0,attrs:{class:"token tag"}},[v("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("<")]),v("span",{pre:!0,attrs:{class:"token namespace"}},[a._v("dubbo:")]),a._v("metadata-report")]),a._v(" "),v("span",{pre:!0,attrs:{class:"token attr-name"}},[a._v("address")]),v("span",{pre:!0,attrs:{class:"token attr-value"}},[v("span",{pre:!0,attrs:{class:"token punctuation attr-equals"}},[a._v("=")]),v("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v('"')]),a._v("zookeeper://192.168.149.135:2181"),v("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v('"')])]),a._v(" "),v("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("/>")])]),a._v("\n")])])]),v("p",[a._v("重新启动生产者，再次打开Dubbo-Admin")]),a._v(" "),v("p",[a._v("这样我们的元数据信息就出来了")]),a._v(" "),v("hr"),a._v(" "),v("h3",{attrs:{id:"dubbo-常用高级配置⭐"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#dubbo-常用高级配置⭐"}},[a._v("#")]),a._v(" dubbo 常用高级配置⭐")]),a._v(" "),v("h4",{attrs:{id:"序列化⭐"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#序列化⭐"}},[a._v("#")]),a._v(" 序列化⭐")]),a._v(" "),v("p",[v("strong",[a._v("两个机器传输数据，如何传输Java对象？")])]),a._v(" "),v("ul",[v("li",[v("p",[a._v("dubbo 内部已经将序列化和反序列化的过程内部封装了")])]),a._v(" "),v("li",[v("p",[a._v("我们只需要在定义pojo类时实现Serializable接口即可")])]),a._v(" "),v("li",[v("p",[a._v("一般会定义一个公共的pojo模块，让生产者和消费者都依赖该模块")])])]),a._v(" "),v("img",{staticStyle:{zoom:"33%"},attrs:{src:"C:\\Users\\86157\\Desktop\\blog-img\\img\\image-20250521162451122.png",alt:"image-20250521162451122"}}),a._v(" "),v("p",[a._v("实现序列化接口 "),v("strong",[a._v("implements")]),a._v(" Serializable")]),a._v(" "),v("h4",{attrs:{id:"地址缓存⭐"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#地址缓存⭐"}},[a._v("#")]),a._v(" 地址缓存⭐")]),a._v(" "),v("p",[v("strong",[a._v("注册中心挂了，服务是否可以正常访问？")])]),a._v(" "),v("ul",[v("li",[v("p",[a._v("可以，因为dubbo服务消费者在第一次调用时，会将服务提供方地址缓存到本地，以后在调用则不会访问注册中心。")])]),a._v(" "),v("li",[v("p",[a._v("当服务提供者地址发生变化时，注册中心会通知服务消费者。")])])]),a._v(" "),v("h4",{attrs:{id:"超时与重试⭐"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#超时与重试⭐"}},[a._v("#")]),a._v(" 超时与重试⭐")]),a._v(" "),v("ul",[v("li",[v("p",[a._v("服务消费者在调用服务提供者的时候发生了阻塞、等待的情形，这个时候，服务消费者会一直等待下去。")])]),a._v(" "),v("li",[v("p",[a._v("在某个峰值时刻，大量的请求都在同时请求服务消费者，会造成线程的大量堆积，势必会造成雪崩。")])]),a._v(" "),v("li",[v("p",[a._v("dubbo 利用超时机制来解决这个问题，设置一个超时时间，在这个时间段内，无法完成服务访问，则自动断开连接。")]),a._v(" "),v("ul",[v("li",[a._v("使用timeout属性配置超时时间，默认值1000，单位毫秒。")])])]),a._v(" "),v("li",[v("p",[a._v("如果出现网络抖动，则这一次请求就会失败。")]),a._v(" "),v("ul",[v("li",[v("p",[a._v("Dubbo 提供重试机制来避免类似问题的发生。")])]),a._v(" "),v("li",[v("p",[a._v("通过 retries 属性来设置重试次数。默认为 2 次。")])])])])]),a._v(" "),v("h4",{attrs:{id:"多版本⭐"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#多版本⭐"}},[a._v("#")]),a._v(" 多版本⭐")]),a._v(" "),v("ul",[v("li",[v("p",[a._v("灰度发布：当出现新功能时，会让一部分用户先使用新功能，用户反馈没问题时，再将所有用户迁移到新功能。")])]),a._v(" "),v("li",[v("p",[a._v("dubbo 中使用version 属性来设置和调用同一个接口的不同版本")])])]),a._v(" "),v("img",{staticStyle:{zoom:"50%"},attrs:{src:"C:\\Users\\86157\\Desktop\\blog-img\\img\\image-20250521163647817.png",alt:"image-20250521163647817"}}),a._v(" "),v("h4",{attrs:{id:"负载均衡⭐"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#负载均衡⭐"}},[a._v("#")]),a._v(" 负载均衡⭐")]),a._v(" "),v("p",[a._v("负载均衡策略（4种） ：")]),a._v(" "),v("ul",[v("li",[v("p",[a._v("Random ：按权重随机，默认值。按权重设置随机概率。")])]),a._v(" "),v("li",[v("p",[a._v("RoundRobin ：按权重轮询")])]),a._v(" "),v("li",[v("p",[a._v("LeastActive：最少活跃调用数，相同活跃数的随机。")])]),a._v(" "),v("li",[v("p",[a._v("ConsistentHash：一致性 Hash，相同参数的请求总是发到同一提供者")])])]),a._v(" "),v("h4",{attrs:{id:"集群容错⭐"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#集群容错⭐"}},[a._v("#")]),a._v(" 集群容错⭐")]),a._v(" "),v("p",[a._v("集群容错模式：")]),a._v(" "),v("ul",[v("li",[v("p",[a._v("Failover Cluster：失败重试。默认值。当出现失败，重试其它服务器 ，默认重试2次，使用 retries 配置。一般用于读操作")])]),a._v(" "),v("li",[v("p",[a._v("Failfast Cluster ：快速失败，只发起一次调用，失败立即报错。通常用于写操作。")])]),a._v(" "),v("li",[v("p",[a._v("Failsafe Cluster ：失败安全，出现异常时，直接忽略。返回一个空结果。")])]),a._v(" "),v("li",[v("p",[a._v("Failback Cluster ：失败自动恢复，后台记录失败请求，定时重发。通常用于消息通知操作。")])]),a._v(" "),v("li",[v("p",[a._v("Forking Cluster ：并行调用多个服务器，只要一个成功即返回。")])]),a._v(" "),v("li",[v("p",[a._v("Broadcast Cluster ：广播调用所有提供者，逐个调用，任意一台报错则报错。")])])]),a._v(" "),v("h4",{attrs:{id:"服务降级⭐"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#服务降级⭐"}},[a._v("#")]),a._v(" 服务降级⭐")]),a._v(" "),v("p",[a._v("服务降级方式：")]),a._v(" "),v("ul",[v("li",[a._v("mock=force：returnnull表示消费方对该服务的方法调用都直接返回null值，不发起远程调用。用来屏蔽不重要服务不可用时对调用方的影响。")]),a._v(" "),v("li",[a._v("mock=fail：returnnull表示消费方对该服务的方法调用在失败后，再返回null值，不抛异常。用来容忍不重要服务不稳定时对调用方的影响。")])])])}),[],!1,null,null,null);v.default=_.exports}}]);