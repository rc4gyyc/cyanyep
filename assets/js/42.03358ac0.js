(window.webpackJsonp=window.webpackJsonp||[]).push([[42],{417:function(v,t,_){"use strict";_.r(t);var e=_(1),i=Object(e.a)({},(function(){var v=this,t=v._self._c;return t("ContentSlotsDistributor",{attrs:{"slot-key":v.$parent.slotKey}},[t("p",[v._v("重要指令：工作流程图上的7个指令(clone+fetch+pul+checkout+add+commit+push)和2个常用指令(log+merge)\n常用指令速查：")]),v._v(" "),t("ul",[t("li",[t("p",[v._v("基本操作类：\n"),t("code",[v._v("git init")]),v._v("\n初始化仓库\n"),t("code",[v._v("git-log")]),v._v("\n查看日志，这个命令很重要！！！！！！！！！！！！！！！！！！！")]),v._v(" "),t("p",[t("code",[v._v("git status")]),v._v(" ！！")]),v._v(" "),t("p",[v._v("​\t查看本地仓库状态，可以查看是否add、commit")]),v._v(" "),t("p",[t("code",[v._v("git add <文件名 | .>")]),v._v(" ！！\n添加到暂存区\n"),t("code",[v._v("git commit -m '注释'")]),v._v(" ！！\n提交到仓库")]),v._v(" "),t("p",[t("code",[v._v("git reset --hard <commitID>")])]),v._v(" "),t("p",[v._v("​\t版本回退")])]),v._v(" "),t("li",[t("p",[v._v("分支类：\n"),t("code",[v._v("git branch [-vv]")]),v._v(" ！！")]),v._v(" "),t("p",[v._v("​\t查看分支")]),v._v(" "),t("p",[t("code",[v._v("git checkout <分支名>")]),v._v("  ！！\n切换到某个分支\n"),t("code",[v._v("git checkout -b <分支名>")]),v._v("\n创建并切换到某个分支（分支原来不存在）")]),v._v(" "),t("p",[t("code",[v._v("git merge <分支名>")]),v._v("\n合并指定分支到当前活跃分支")])]),v._v(" "),t("li",[t("p",[v._v("远程操作\n"),t("code",[v._v("remote add")])]),v._v(" "),t("p",[t("code",[v._v("git fetch")])]),v._v(" "),t("p",[t("code",[v._v("git clone <远程地址> [本地文件夹]")]),v._v(" ！！\nclone远程仓库到本地\n"),t("code",[v._v("git pull")]),v._v(" ！！\n拉取远端仓库的修改并合并\n"),t("code",[v._v("git push [--set-upstream] origin 本地分支名[:远程分支名]")]),v._v(" ！！\n推送本地修改到远端分支\n--set-upstream表示和远端分支绑定关联关系，只有第一次推送时才需要此参数")])])]),v._v(" "),t("h2",{attrs:{id:"常见问题"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#常见问题"}},[v._v("#")]),v._v(" 常见问题")]),v._v(" "),t("h2",{attrs:{id:"带着修改切换分支"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#带着修改切换分支"}},[v._v("#")]),v._v(" 带着修改切换分支")]),v._v(" "),t("h3",{attrs:{id:"sit1-切换没有冲突"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#sit1-切换没有冲突"}},[v._v("#")]),v._v(" SIT1：切换没有冲突")]),v._v(" "),t("p",[v._v("如果当前分支与切换的分支没有冲突")]),v._v(" "),t("ul",[t("li",[t("p",[v._v("强制切换分支并保留修改")]),v._v(" "),t("ul",[t("li",[v._v("使用 checkout或者switch（Git 2.23+）：")])])]),v._v(" "),t("li",[t("p",[t("code",[v._v("git checkout/switch -m <目标分支>")])]),v._v(" "),t("ul",[t("li",[t("code",[v._v("-m")]),v._v(" 参数表示在切换分支时保留当前的修改。")])])])]),v._v(" "),t("h3",{attrs:{id:"sit2-切换存在冲突"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#sit2-切换存在冲突"}},[v._v("#")]),v._v(" SIT2：切换存在冲突")]),v._v(" "),t("ol",[t("li",[t("p",[v._v("使用 "),t("code",[v._v("git stash")]),v._v(" 暂存修改")]),v._v(" "),t("ul",[t("li",[t("p",[v._v("暂存当前修改"),t("code",[v._v("git stash")])])]),v._v(" "),t("li",[t("p",[v._v("切换到目标分支"),t("code",[v._v("git checkout <目标分支>")])])]),v._v(" "),t("li",[t("p",[v._v("恢复暂存的修改："),t("code",[v._v("git stash pop")])])])])])]),v._v(" "),t("blockquote",[t("p",[v._v("注意：")]),v._v(" "),t("ul",[t("li",[v._v("如果你有未跟踪的文件（即新创建但尚未 "),t("code",[v._v("git add")]),v._v(" 的文件），默认情况下 "),t("code",[v._v("git stash")]),v._v(" 不会包含它们。你可以使用 "),t("code",[v._v("git stash -u")]),v._v(" 或 "),t("code",[v._v("git stash --include-untracked")]),v._v(" 来包含未跟踪文件。")]),v._v(" "),t("li",[v._v("如果暂存后的修改与目标分支的内容冲突，Git 会提示冲突，你需要手动解决。")])])]),v._v(" "),t("ol",{attrs:{start:"2"}},[t("li",[t("p",[v._v("直接提交修改后将修改再次作用到你的分支上")]),v._v(" "),t("ul",[t("li",[t("p",[v._v("将你的修改提交并切换分支后")])]),v._v(" "),t("li",[t("p",[v._v("通过git log查看提交的哈希值")])]),v._v(" "),t("li",[t("p",[v._v("将指定的提交应用到你的分支上")])])]),v._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[v._v("git cherry-pick <commit-hash>\n")])])])]),v._v(" "),t("li",[t("p",[v._v("丢弃修改后切换分支")]),v._v(" "),t("ul",[t("li",[t("p",[v._v("丢弃已跟踪文件的修改"),t("code",[v._v("git reset --hard")])])]),v._v(" "),t("li",[t("p",[v._v("丢弃未跟踪的文件"),t("code",[v._v("git clean -fd")])])]),v._v(" "),t("li",[t("p",[v._v("切换分支"),t("code",[v._v("git checkout <目标分支>")])])])])])]),v._v(" "),t("h2",{attrs:{id:"git错误提交"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#git错误提交"}},[v._v("#")]),v._v(" Git错误提交")]),v._v(" "),t("h3",{attrs:{id:"错误提交到本地仓库"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#错误提交到本地仓库"}},[v._v("#")]),v._v(" 错误提交到本地仓库")]),v._v(" "),t("p",[v._v("比如将我们的代码提交到master分支，而不是工作分支feature")]),v._v(" "),t("p",[v._v("可以使用"),t("code",[v._v("Git cherry-pick")]),v._v("命令")]),v._v(" "),t("ul",[t("li",[t("p",[v._v("通过git log查看本次提交的ID，然后先切换到正确的feature分支，通过cherry-pick 将修改内容复制到正确的分支上，")])]),v._v(" "),t("li",[t("p",[v._v("切换回master分支，用git reset --hard HEAD~1回退最近一次提交。")])])]),v._v(" "),t("h3",{attrs:{id:"错误推送到远程仓库"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#错误推送到远程仓库"}},[v._v("#")]),v._v(" 错误推送到远程仓库")]),v._v(" "),t("ul",[t("li",[t("p",[v._v("首先，需要立即通知团队成员，避免他们同步到错误代码")])]),v._v(" "),t("li",[t("p",[v._v("然后使用"),t("code",[v._v("git revert")]),v._v("来撤销错误提交，revert比reset安全，因为它不会改变历史记录，只是添加一个新的提交来撤销之前的更改")])]),v._v(" "),t("li",[t("p",[v._v("接着，在正确的分支上使用cherry-pick复制修改的内容，或者手动复制修改的内容，并提交到正确的分支")])]),v._v(" "),t("li",[t("p",[v._v("如果团队规模比较小，也可以考虑使用git reset --hard 和git push --force，但这需要团队所有成员的配合")])]),v._v(" "),t("li",[t("p",[v._v("不过force push是一个危险操作，会重写历\n史，可能导致其他开发者的工作丢失，所以我一般更倾向于使用revert方法，除非确认\n没有其他人在使用这个分支。")])])]),v._v(" "),t("p",[t("code",[v._v("git cherry-pick <commit-hash>")]),v._v("：用于将提交的修改应用到另一个分支")]),v._v(" "),t("p",[t("code",[v._v("git revert <commit-hash>]")]),v._v("：用于撤销已经推送的提交")]),v._v(" "),t("p",[t("code",[v._v("git reset [--soft|--mixed|--hard] [HEAD~x|<commit-hash>]")]),v._v("：可以撤销已经推送的提交")]),v._v(" "),t("ul",[t("li",[v._v("--hard 完全丢弃最近一次提交及其所有代码修改")]),v._v(" "),t("li",[v._v("--mixed 撤销提交，并将修改移回工作目录")]),v._v(" "),t("li",[v._v("--soft 撤销修改，并保留所有修改在暂存区")]),v._v(" "),t("li",[v._v("HEAD~x 撤销前几次")])]),v._v(" "),t("h3",{attrs:{id:"预防错误提交的措施"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#预防错误提交的措施"}},[v._v("#")]),v._v(" 预防错误提交的措施")]),v._v(" "),t("ol",[t("li",[t("p",[v._v("规范好分支命名，比如feature/xxx")])]),v._v(" "),t("li",[t("p",[v._v("提交前使用git status和git branch检查当前分支")])]),v._v(" "),t("li",[t("p",[v._v("如果是个人/简单的项目，可以使用脚本来提交，这样可以通过脚本判断当前分支是否为自己的工作分支，从而减低错误提交的风险")])]),v._v(" "),t("li",[t("p",[v._v("但是如果是团队/复杂的项目，容易涉及到多分支合并、冲突，应该优先使用Git原生命令或者协作工具（如：xxx，我也没用过，自己举例）")])])])])}),[],!1,null,null,null);t.default=i.exports}}]);