(window.webpackJsonp=window.webpackJsonp||[]).push([[123],{495:function(e,a,s){"use strict";s.r(a);var r=s(1),t=Object(r.a)({},(function(){var e=this,a=e._self._c;return a("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[a("h2",{attrs:{id:"初识-zookeeper"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#初识-zookeeper"}},[e._v("#")]),e._v(" 初识 Zookeeper")]),e._v(" "),a("p",[a("strong",[e._v("Zookeeper 概念")])]),e._v(" "),a("ul",[a("li",[a("p",[e._v("Zookeeper 是 Apache Hadoop 项目下的一个子项目，是一个树形目录服务。")])]),e._v(" "),a("li",[a("p",[e._v("Zookeeper 翻译过来就是 动物园管理员，他是用来管 Hadoop（大象）、Hive(蜜蜂)、Pig(小 猪)的管理员。简称zk")])]),e._v(" "),a("li",[a("p",[e._v("Zookeeper 是一个分布式的、开源的分布式应用程序的协调服务。")])]),e._v(" "),a("li",[a("p",[e._v("Zookeeper 提供的主要功能包括：")]),e._v(" "),a("ul",[a("li",[a("p",[e._v("配置管理（配置中心管理各个服务的配置）")])]),e._v(" "),a("li",[a("p",[e._v("分布式锁")])]),e._v(" "),a("li",[a("p",[e._v("集群管理（注册中心）")])])])])]),e._v(" "),a("h2",{attrs:{id:"zookeeper-安装与配置"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#zookeeper-安装与配置"}},[e._v("#")]),e._v(" ZooKeeper 安装与配置")]),e._v(" "),a("h3",{attrs:{id:"安装"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#安装"}},[e._v("#")]),e._v(" 安装")]),e._v(" "),a("p",[a("strong",[e._v("1、环境准备")])]),e._v(" "),a("p",[e._v("ZooKeeper服务器是用Java创建的，它运行在JVM之上。需要安装JDK 7或更高版本。")]),e._v(" "),a("p",[a("strong",[e._v("2、上传")])]),e._v(" "),a("p",[e._v("将下载的ZooKeeper放到/opt/ZooKeeper目录下")]),e._v(" "),a("div",{staticClass:"language-shell extra-class"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#上传zookeeper alt+p")]),e._v("\nput f:/setup/apache-zookeeper-3.5.6-bin.tar.gz\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#打开 opt目录")]),e._v("\n"),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[e._v("cd")]),e._v(" /opt\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#创建zooKeeper目录")]),e._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[e._v("mkdir")]),e._v("  zooKeeper\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#将zookeeper安装包移动到 /opt/zooKeeper")]),e._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[e._v("mv")]),e._v(" apache-zookeeper-3.5.6-bin.tar.gz /opt/zookeeper/\n")])])]),a("p",[a("strong",[e._v("3、解压")])]),e._v(" "),a("p",[e._v("将tar包解压到/opt/zookeeper目录下")]),e._v(" "),a("div",{staticClass:"language-shell extra-class"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[e._v("tar")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[e._v("-zxvf")]),e._v(" apache-ZooKeeper-3.5.6-bin.tar.gz \n")])])]),a("h3",{attrs:{id:"配置启动"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#配置启动"}},[e._v("#")]),e._v(" 配置启动")]),e._v(" "),a("p",[a("strong",[e._v("1、配置zoo.cfg")])]),e._v(" "),a("p",[e._v("进入到conf目录拷贝一个zoo_sample.cfg并完成配置")]),e._v(" "),a("div",{staticClass:"language-shell extra-class"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#进入到conf目录")]),e._v("\n"),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[e._v("cd")]),e._v(" /opt/zooKeeper/apache-zooKeeper-3.5.6-bin/conf/\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#拷贝")]),e._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[e._v("cp")]),e._v("  zoo_sample.cfg  zoo.cfg\n")])])]),a("p",[e._v("修改zoo.cfg")]),e._v(" "),a("div",{staticClass:"language-shell extra-class"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#打开目录")]),e._v("\n"),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[e._v("cd")]),e._v(" /opt/zooKeeper/\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#创建zooKeeper存储目录")]),e._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[e._v("mkdir")]),e._v("  zkdata\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#修改zoo.cfg")]),e._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[e._v("vim")]),e._v(" /opt/zooKeeper/apache-zooKeeper-3.5.6-bin/conf/zoo.cfg\n")])])]),a("p",[e._v("修改存储目录：dataDir=/opt/zookeeper/zkdata")]),e._v(" "),a("p",[a("strong",[e._v("2、启动ZooKeeper")])]),e._v(" "),a("div",{staticClass:"language-shell extra-class"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[e._v("cd")]),e._v(" /opt/zooKeeper/apache-zooKeeper-3.5.6-bin/bin/\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#启动")]),e._v("\n ./zkServer.sh  start\n")])])]),a("p",[a("strong",[e._v("3、查看ZooKeeper状态")])]),e._v(" "),a("div",{staticClass:"language-shell extra-class"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[e._v("./zkServer.sh status\n")])])]),a("p",[e._v("zookeeper启动成功。standalone代表zk没有搭建集群，现在是单节点")]),e._v(" "),a("p",[e._v("/zookeeper没有启动")]),e._v(" "),a("h2",{attrs:{id:"zookeeper-命令操作"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#zookeeper-命令操作"}},[e._v("#")]),e._v(" ZooKeeper 命令操作")]),e._v(" "),a("h3",{attrs:{id:"zookeeper-数据模型"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#zookeeper-数据模型"}},[e._v("#")]),e._v(" Zookeeper 数据模型")]),e._v(" "),a("ul",[a("li",[a("p",[e._v("ZooKeeper 是一个树形目录服务,其数据模型和Unix的文件系统目录树很类似，拥有一个层次化结构。")])]),e._v(" "),a("li",[a("p",[e._v("这里面的每一个节点都被称为： ZNode，每个节点上都会保存自己的数据和节点信息。")])]),e._v(" "),a("li",[a("p",[e._v("节点可以拥有子节点，同时也允许少量（1MB）数据存储在该节点之下。")])]),e._v(" "),a("li",[a("p",[e._v("节点可以分为四大类：")]),e._v(" "),a("ul",[a("li",[a("p",[e._v("PERSISTENT 持久化节点")])]),e._v(" "),a("li",[a("p",[e._v("EPHEMERAL 临时节点 ：-e")])]),e._v(" "),a("li",[a("p",[e._v("PERSISTENT_SEQUENTIAL 持久化顺序节点 ：-s")])]),e._v(" "),a("li",[a("p",[e._v("EPHEMERAL_SEQUENTIAL 临时顺序节点 ：-es")])])])])]),e._v(" "),a("h3",{attrs:{id:"zookeeper-服务端常用命令"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#zookeeper-服务端常用命令"}},[e._v("#")]),e._v(" Zookeeper 服务端常用命令")]),e._v(" "),a("ul",[a("li",[a("p",[e._v("启动 ZooKeeper 服务: ./zkServer.sh start")])]),e._v(" "),a("li",[a("p",[e._v("查看 ZooKeeper 服务状态: ./zkServer.sh status")])]),e._v(" "),a("li",[a("p",[e._v("停止 ZooKeeper 服务: ./zkServer.sh stop")])]),e._v(" "),a("li",[a("p",[e._v("重启 ZooKeeper 服务: ./zkServer.sh restart")])])]),e._v(" "),a("h3",{attrs:{id:"zookeeper-客户端常用命令"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#zookeeper-客户端常用命令"}},[e._v("#")]),e._v(" Zookeeper 客户端常用命令")]),e._v(" "),a("ul",[a("li",[e._v("连接ZooKeeper服务端\n"),a("ul",[a("li",[e._v("./zkCli.sh –server ip:port")])])]),e._v(" "),a("li",[e._v("断开连接\n"),a("ul",[a("li",[e._v("quit")])])]),e._v(" "),a("li",[e._v("查看命令帮助\n"),a("ul",[a("li",[e._v("help")])])]),e._v(" "),a("li",[e._v("显示指定目录下节点\n"),a("ul",[a("li",[e._v("ls 目录")])])]),e._v(" "),a("li",[e._v("创建节点\n"),a("ul",[a("li",[e._v("create /节点path value")])])]),e._v(" "),a("li",[e._v("获取节点值\n"),a("ul",[a("li",[e._v("get /节点path")])])]),e._v(" "),a("li",[e._v("设置节点值\n"),a("ul",[a("li",[e._v("set /节点path value")])])]),e._v(" "),a("li",[e._v("删除单个节点\n"),a("ul",[a("li",[e._v("delete /节点path")])])]),e._v(" "),a("li",[e._v("删除带有子节点的节点\n"),a("ul",[a("li",[e._v("deleteall /节点path")])])])]),e._v(" "),a("hr"),e._v(" "),a("ul",[a("li",[a("p",[e._v("创建临时节点")]),e._v(" "),a("ul",[a("li",[e._v("create -e /节点path value")])])]),e._v(" "),a("li",[a("p",[e._v("创建顺序节点")]),e._v(" "),a("ul",[a("li",[e._v("create -s /节点path value")])])]),e._v(" "),a("li",[a("p",[e._v("查询节点详细信息")]),e._v(" "),a("ul",[a("li",[a("p",[e._v("ls –s /节点path")])]),e._v(" "),a("li",[a("p",[e._v("查询结果")]),e._v(" "),a("ul",[a("li",[a("p",[e._v("czxid：节点被创建的事务ID")])]),e._v(" "),a("li",[a("p",[e._v("ctime: 创建时间")])]),e._v(" "),a("li",[a("p",[e._v("mzxid: 最后一次被更新的事务ID")])]),e._v(" "),a("li",[a("p",[e._v("mtime: 修改时间")])]),e._v(" "),a("li",[a("p",[e._v("pzxid：子节点列表最后一次被更新的事务ID")])]),e._v(" "),a("li",[a("p",[e._v("cversion：子节点的版本号")])]),e._v(" "),a("li",[a("p",[e._v("dataversion：数据版本号")])]),e._v(" "),a("li",[a("p",[e._v("aclversion：权限版本号")])]),e._v(" "),a("li",[a("p",[e._v("ephemeralOwner：用于临时节点，代表临时节点的事务ID，如果为持久节点则为0")])]),e._v(" "),a("li",[a("p",[e._v("dataLength：节点存储的数据的长度")])]),e._v(" "),a("li",[a("p",[e._v("numChildren：当前节点的子节点个数")])])])])])])]),e._v(" "),a("h2",{attrs:{id:"zookeeper-javaapi-操作"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#zookeeper-javaapi-操作"}},[e._v("#")]),e._v(" ZooKeeper JavaAPI 操作")]),e._v(" "),a("h3",{attrs:{id:"curator-介绍"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#curator-介绍"}},[e._v("#")]),e._v(" Curator 介绍")]),e._v(" "),a("p",[e._v("Curator 是 Apache ZooKeeper 的Java客户端库。")]),e._v(" "),a("ul",[a("li",[e._v("常见的ZooKeeper Java API ：\n"),a("ul",[a("li",[e._v("原生Java API")]),e._v(" "),a("li",[e._v("ZkClient")]),e._v(" "),a("li",[e._v("Curator")])])]),e._v(" "),a("li",[e._v("Curator 项目的目标是简化 ZooKeeper 客户端的使用。")]),e._v(" "),a("li",[e._v("Curator 最初是 Netfix 研发的,后来捐献了 Apache 基金会,目前是 Apache 的顶级项目。")]),e._v(" "),a("li",[e._v("官网：http://curator.apache.org/")])]),e._v(" "),a("h3",{attrs:{id:"curator-api-常用操作-todo代码"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#curator-api-常用操作-todo代码"}},[e._v("#")]),e._v(" Curator API 常用操作 TODO代码")]),e._v(" "),a("ul",[a("li",[a("p",[e._v("建立连接")]),e._v(" "),a("ul",[a("li",[a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('CuratorFramework client = CuratorFrameworkFactory.newClient(\n    "localhost:2181", \n    new RetryNTimes(3, 1000)\n);\n')])])])])])]),e._v(" "),a("li",[a("p",[e._v("添加节点")]),e._v(" "),a("ul",[a("li",[a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('// 持久节点\nclient.create().forPath("/node", "data".getBytes());\n\n// 临时顺序节点（适合锁）\nclient.create()\n    .withMode(CreateMode.EPHEMERAL_SEQUENTIAL)\n    .forPath("/lock/seq-");\n')])])])])])]),e._v(" "),a("li",[a("p",[e._v("删除节点")]),e._v(" "),a("ul",[a("li",[a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('client.delete().forPath("/node");          // 删除单节点\nclient.delete().deletingChildrenIfNeeded() // 递归删除\n             .forPath("/parent"); \n')])])])])])]),e._v(" "),a("li",[a("p",[e._v("修改节点")]),e._v(" "),a("ul",[a("li",[a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('client.setData().forPath("/node", "new_data".getBytes());\n\nclient.setData()\n    .withVersion(stat.getVersion())\n    .forPath("/node", "v2".getBytes());\n')])])])])])]),e._v(" "),a("li",[a("p",[e._v("查询节点")]),e._v(" "),a("ul",[a("li",[a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('Stat stat = new Stat();\nbyte[] data = client.getData().storingStatIn(stat).forPath("/node"); // 数据\n')])])])])])]),e._v(" "),a("li",[a("p",[e._v("Watch事件监听")])]),e._v(" "),a("li",[a("p",[e._v("分布式锁实现")])])]),e._v(" "),a("h3",{attrs:{id:"watch事件监听"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#watch事件监听"}},[e._v("#")]),e._v(" Watch事件监听")]),e._v(" "),a("ul",[a("li",[e._v("ZooKeeper 允许用户在指定节点上注册一些Watcher，并且在一些特定事件触发的时候，ZooKeeper 服务端会将事件通到感兴趣的客户端上去，该机制是 ZooKeeper 实现分布式协调服务的重要特性。")]),e._v(" "),a("li",[e._v("ZooKeeper 中引入了Watcher机制来实现了发布/订阅功能能，能够让多个订阅者同时监听某一个对象，当一个对象自身状态变化时，会通知所有订阅者。")]),e._v(" "),a("li",[e._v("ZooKeeper 原生支持通过注册Watcher来进行事件监听，但是其使用并不是特别方便，需要开发人员自己反复注册Watcher，比较繁琐。")]),e._v(" "),a("li",[e._v("Curator引入了 Cache 来实现对 ZooKeeper 服务端事件的监听。")]),e._v(" "),a("li",[e._v("ZooKeeper提供了三种Watcher：\n"),a("ul",[a("li",[a("strong",[e._v("NodeCache")]),e._v(" : 只是监听某一个特定的节点")]),e._v(" "),a("li",[a("strong",[e._v("PathChildrenCache")]),e._v(" : 监控一个ZNode的子节点.")]),e._v(" "),a("li",[a("strong",[e._v("TreeCache")]),e._v(" : 可以监控整个树上的所有节点，类似于PathChildrenCache和NodeCache的组合")])])])]),e._v(" "),a("h3",{attrs:{id:"分布式锁"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#分布式锁"}},[e._v("#")]),e._v(" 分布式锁")]),e._v(" "),a("ul",[a("li",[e._v("在我们进行单机应用开发，涉及并发同步的时候，我们往往采用synchronized或者Lock的方式来解决多线程间的代码同步问题，这时多线程的运行都是在同一个JVM之下，没有任何问题。")]),e._v(" "),a("li",[e._v("但当我们的应用是分布式集群工作的情况下，属于多JVM下的工作环境，跨JVM之间已经无法通过多线程的锁解决同步问题。")]),e._v(" "),a("li",[e._v("那么就需要一种更加高级的锁机制，来处理种"),a("strong",[e._v("跨机器的进程之间的数据同步问题")]),e._v("——这就是分布式锁。")])]),e._v(" "),a("h4",{attrs:{id:"核心思想⭐"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#核心思想⭐"}},[e._v("#")]),e._v(" 核心思想⭐")]),e._v(" "),a("p",[e._v("当客户端要获取锁，则创建节点，使用完锁，则删除该节点。")]),e._v(" "),a("ol",[a("li",[a("p",[e._v("客户端获取锁时，在lock节点下创建"),a("strong",[e._v("临时顺序")]),e._v("节点。")])]),e._v(" "),a("li",[a("p",[e._v("然后获取lock下面的所有子节点，客户端获取到所有的子节点之后，如果发现自己创建的子节点序号最小，那么就认为该客户端获取到了锁。使用完锁后，将该节点删除。")])]),e._v(" "),a("li",[a("p",[e._v("如果发现自己创建的节点并非lock所有子节点中最小的，说明自己还没有获取到锁，此时客户端需要找到比自己小的那个节点，同时对其注册事件监听器，监听删除事件。")])]),e._v(" "),a("li",[a("p",[e._v("如果发现比自己小的那个节点被删除，则客户端的Watcher会收到相应通知，此时再次判断自己创建的节点是否是lock子节点中序号最小的，如果是则获取到了锁，如果不是则重复以上步骤继续获取到比自己小的一个节点并注册监听。")])])]),e._v(" "),a("h3",{attrs:{id:"模拟12306售票案例"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#模拟12306售票案例"}},[e._v("#")]),e._v(" 模拟12306售票案例")]),e._v(" "),a("h2",{attrs:{id:"zookeeper-集群搭建"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#zookeeper-集群搭建"}},[e._v("#")]),e._v(" ZooKeeper 集群搭建")]),e._v(" "),a("h3",{attrs:{id:"集群介绍"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#集群介绍"}},[e._v("#")]),e._v(" 集群介绍")]),e._v(" "),a("p",[e._v("Leader选举：")]),e._v(" "),a("ul",[a("li",[a("p",[e._v("Serverid：服务器ID")]),e._v(" "),a("ul",[a("li",[a("p",[e._v("比如有三台服务器，编号分别是1,2,3。")])]),e._v(" "),a("li",[a("p",[e._v("编号越大在选择算法中的权重越大。")])])])]),e._v(" "),a("li",[a("p",[e._v("Zxid：数据ID")]),e._v(" "),a("ul",[a("li",[e._v("服务器中存放的最大数据ID.值越大说明数据 越新，在选举算法中数据越新权重越大。")])])]),e._v(" "),a("li",[a("p",[e._v("在Leader选举的过程中，如果某台ZooKeeper获得了超过半数的选票，则此ZooKeeper就可以成为Leader了。")])])]),e._v(" "),a("h3",{attrs:{id:"集群搭建"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#集群搭建"}},[e._v("#")]),e._v(" 集群搭建")]),e._v(" "),a("h4",{attrs:{id:"准备文件"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#准备文件"}},[e._v("#")]),e._v(" 准备文件")]),e._v(" "),a("p",[e._v("一台虚拟机作为我们搭建集群的测试服务器。")]),e._v(" "),a("ol",[a("li",[e._v("将解压后的Zookeeper复制到以下三个目录")])]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("[root@localhost ~]# mkdir /usr/local/zookeeper-cluster\n[root@localhost ~]# cp -r  apache-zookeeper-3.5.6-bin /usr/local/zookeeper-cluster/zookeeper-1\n[root@localhost ~]# cp -r  apache-zookeeper-3.5.6-bin /usr/local/zookeeper-cluster/zookeeper-2\n[root@localhost ~]# cp -r  apache-zookeeper-3.5.6-bin /usr/local/zookeeper-cluster/zookeeper-3\n")])])]),a("ol",{attrs:{start:"2"}},[a("li",[e._v("创建data目录 ，并且将 conf下zoo_sample.cfg 文件改名为 zoo.cfg")])]),e._v(" "),a("div",{staticClass:"language-shell extra-class"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[e._v("mkdir")]),e._v(" /usr/local/zookeeper-cluster/zookeeper-1/data\n"),a("span",{pre:!0,attrs:{class:"token function"}},[e._v("mkdir")]),e._v(" /usr/local/zookeeper-cluster/zookeeper-2/data\n"),a("span",{pre:!0,attrs:{class:"token function"}},[e._v("mkdir")]),e._v(" /usr/local/zookeeper-cluster/zookeeper-3/data\n\n"),a("span",{pre:!0,attrs:{class:"token function"}},[e._v("mv")]),e._v("  /usr/local/zookeeper-cluster/zookeeper-1/conf/zoo_sample.cfg  /usr/local/zookeeper-cluster/zookeeper-1/conf/zoo.cfg\n"),a("span",{pre:!0,attrs:{class:"token function"}},[e._v("mv")]),e._v("  /usr/local/zookeeper-cluster/zookeeper-2/conf/zoo_sample.cfg  /usr/local/zookeeper-cluster/zookeeper-2/conf/zoo.cfg\n"),a("span",{pre:!0,attrs:{class:"token function"}},[e._v("mv")]),e._v("  /usr/local/zookeeper-cluster/zookeeper-3/conf/zoo_sample.cfg  /usr/local/zookeeper-cluster/zookeeper-3/conf/zoo.cfg\n")])])]),a("ol",{attrs:{start:"3"}},[a("li",[e._v("配置每一个Zookeeper 的dataDir 和 clientPort 分别为2181  2182  2183")])]),e._v(" "),a("ul",[a("li",[e._v("修改/usr/local/zookeeper-cluster/zookeeper-1/conf/zoo.cfg")])]),e._v(" "),a("div",{staticClass:"language-shell extra-class"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[e._v("vim")]),e._v(" /usr/local/zookeeper-cluster/zookeeper-1/conf/zoo.cfg\n\n"),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[e._v("clientPort")]),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[e._v("2181")]),e._v("\n"),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[e._v("dataDir")]),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v("/usr/local/zookeeper-cluster/zookeeper-1/data\n")])])]),a("ul",[a("li",[e._v("修改/usr/local/zookeeper-cluster/zookeeper-2/conf/zoo.cfg")])]),e._v(" "),a("div",{staticClass:"language-shell extra-class"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[e._v("vim")]),e._v(" /usr/local/zookeeper-cluster/zookeeper-2/conf/zoo.cfg\n\n"),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[e._v("clientPort")]),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[e._v("2182")]),e._v("\n"),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[e._v("dataDir")]),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v("/usr/local/zookeeper-cluster/zookeeper-2/data\n")])])]),a("ul",[a("li",[e._v("修改/usr/local/zookeeper-cluster/zookeeper-3/conf/zoo.cfg")])]),e._v(" "),a("div",{staticClass:"language-shell extra-class"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[e._v("vim")]),e._v(" /usr/local/zookeeper-cluster/zookeeper-3/conf/zoo.cfg\n\n"),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[e._v("clientPort")]),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[e._v("2183")]),e._v("\n"),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[e._v("dataDir")]),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v("/usr/local/zookeeper-cluster/zookeeper-3/data\n")])])]),a("h4",{attrs:{id:"配置"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#配置"}},[e._v("#")]),e._v(" 配置")]),e._v(" "),a("p",[e._v("在每个zookeeper的 data 目录下创建一个 myid 文件，内容分别是1、2、3 。这个文件就是记录每个服务器的ID")]),e._v(" "),a("div",{staticClass:"language-shell extra-class"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[e._v("echo")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[e._v("1")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v(">")]),e._v("/usr/local/zookeeper-cluster/zookeeper-1/data/myid\n"),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[e._v("echo")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[e._v("2")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v(">")]),e._v("/usr/local/zookeeper-cluster/zookeeper-2/data/myid\n"),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[e._v("echo")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[e._v("3")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v(">")]),e._v("/usr/local/zookeeper-cluster/zookeeper-3/data/myid\n")])])]),a("p",[e._v("在每一个zookeeper 的 zoo.cfg配置客户端访问端口（clientPort）和集群服务器IP列表。")]),e._v(" "),a("p",[e._v("集群服务器IP列表如下")]),e._v(" "),a("div",{staticClass:"language-shell extra-class"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[e._v("vim")]),e._v(" /usr/local/zookeeper-cluster/zookeeper-1/conf/zoo.cfg\n"),a("span",{pre:!0,attrs:{class:"token function"}},[e._v("vim")]),e._v(" /usr/local/zookeeper-cluster/zookeeper-2/conf/zoo.cfg\n"),a("span",{pre:!0,attrs:{class:"token function"}},[e._v("vim")]),e._v(" /usr/local/zookeeper-cluster/zookeeper-3/conf/zoo.cfg\n\n"),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[e._v("server.1")]),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[e._v("192.168")]),e._v(".149.135:2881:3881\n"),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[e._v("server.2")]),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[e._v("192.168")]),e._v(".149.135:2882:3882\n"),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[e._v("server.3")]),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[e._v("192.168")]),e._v(".149.135:2883:3883\n")])])]),a("p",[e._v("解释：server.服务器ID=服务器IP地址：服务器之间通信端口：服务器之间投票选举端口")]),e._v(" "),a("p",[e._v("2818是客户端与服务端通信端口")]),e._v(" "),a("h4",{attrs:{id:"启动集群"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#启动集群"}},[e._v("#")]),e._v(" 启动集群")]),e._v(" "),a("p",[e._v("启动集群就是分别启动每个实例。")]),e._v(" "),a("div",{staticClass:"language-shell extra-class"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[e._v("/usr/local/zookeeper-cluster/zookeeper-1/bin/zkServer.sh start\n/usr/local/zookeeper-cluster/zookeeper-2/bin/zkServer.sh start\n/usr/local/zookeeper-cluster/zookeeper-3/bin/zkServer.sh start\n")])])]),a("p",[e._v("启动后我们查询一下每个实例的运行状态")]),e._v(" "),a("div",{staticClass:"language-shell extra-class"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[e._v("/usr/local/zookeeper-cluster/zookeeper-1/bin/zkServer.sh status\n/usr/local/zookeeper-cluster/zookeeper-2/bin/zkServer.sh status\n/usr/local/zookeeper-cluster/zookeeper-3/bin/zkServer.sh status\n")])])]),a("p",[e._v("先查询第一个服务")]),e._v(" "),a("p",[e._v("Mode为follower表示是"),a("strong",[e._v("跟随者")]),e._v("（从）")]),e._v(" "),a("p",[e._v("再查询第二个服务Mod 为leader表示是"),a("strong",[e._v("领导者")]),e._v("（主）")]),e._v(" "),a("p",[e._v("查询第三个为跟随者（从）")]),e._v(" "),a("h4",{attrs:{id:"模拟集群异常"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#模拟集群异常"}},[e._v("#")]),e._v(" 模拟集群异常")]),e._v(" "),a("p",[e._v("（1）首先我们先测试如果是从服务器挂掉，会怎么样")]),e._v(" "),a("p",[e._v("把3号服务器停掉，观察1号和2号，发现状态并没有变化")]),e._v(" "),a("div",{staticClass:"language-shell extra-class"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[e._v("/usr/local/zookeeper-cluster/zookeeper-3/bin/zkServer.sh stop\n\n/usr/local/zookeeper-cluster/zookeeper-1/bin/zkServer.sh status\n/usr/local/zookeeper-cluster/zookeeper-2/bin/zkServer.sh status\n")])])]),a("p",[e._v("由此得出结论，3个节点的集群，从服务器挂掉，集群正常")]),e._v(" "),a("p",[e._v("（2）我们再把1号服务器（从服务器）也停掉，查看2号（主服务器）的状态，发现已经停止运行了。")]),e._v(" "),a("div",{staticClass:"language-shell extra-class"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[e._v("/usr/local/zookeeper-cluster/zookeeper-1/bin/zkServer.sh stop\n\n/usr/local/zookeeper-cluster/zookeeper-2/bin/zkServer.sh status\n")])])]),a("p",[e._v("由此得出结论，3个节点的集群，2个从服务器都挂掉，主服务器也无法运行。因为可运行的机器没有超过集群总数量的半数。")]),e._v(" "),a("p",[e._v("（3）我们再次把1号服务器启动起来，发现2号服务器又开始正常工作了。而且依然是领导者。")]),e._v(" "),a("div",{staticClass:"language-shell extra-class"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[e._v("/usr/local/zookeeper-cluster/zookeeper-1/bin/zkServer.sh start\n\n/usr/local/zookeeper-cluster/zookeeper-2/bin/zkServer.sh status\n")])])]),a("p",[e._v("（4）我们把3号服务器也启动起来，把2号服务器停掉,停掉后观察1号和3号的状态。")]),e._v(" "),a("div",{staticClass:"language-shell extra-class"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[e._v("/usr/local/zookeeper-cluster/zookeeper-3/bin/zkServer.sh start\n/usr/local/zookeeper-cluster/zookeeper-2/bin/zkServer.sh stop\n\n/usr/local/zookeeper-cluster/zookeeper-1/bin/zkServer.sh status\n/usr/local/zookeeper-cluster/zookeeper-3/bin/zkServer.sh status\n")])])]),a("p",[e._v("发现新的leader产生了~")]),e._v(" "),a("p",[e._v("由此我们得出结论，当集群中的主服务器挂了，集群中的其他服务器会自动进行选举状态，然后产生新得leader")]),e._v(" "),a("p",[e._v("（5）我们再次测试，当我们把2号服务器重新启动起来启动后，会发生什么？2号服务器会再次成为新的领导吗？我们看结果")]),e._v(" "),a("div",{staticClass:"language-shell extra-class"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[e._v("/usr/local/zookeeper-cluster/zookeeper-2/bin/zkServer.sh start\n\n/usr/local/zookeeper-cluster/zookeeper-2/bin/zkServer.sh status\n/usr/local/zookeeper-cluster/zookeeper-3/bin/zkServer.sh status\n")])])]),a("p",[e._v("我们会发现，2号服务器启动后依然是跟随者（从服务器），3号服务器依然是领导者（主服务器），没有撼动3号服务器的领导地位。")]),e._v(" "),a("p",[e._v("由此我们得出结论，当领导者产生后，再次有新服务器加入集群，不会影响到现任领导者。")]),e._v(" "),a("h2",{attrs:{id:"zookeeper-核心理论"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#zookeeper-核心理论"}},[e._v("#")]),e._v(" Zookeeper 核心理论")]),e._v(" "),a("h3",{attrs:{id:"集群角色"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#集群角色"}},[e._v("#")]),e._v(" 集群角色")]),e._v(" "),a("p",[e._v("在ZooKeeper集群服务中有三个角色：(主写读从)")]),e._v(" "),a("p",[e._v("Leader 领导者 ：")]),e._v(" "),a("ol",[a("li",[e._v("处理事务请求")]),e._v(" "),a("li",[e._v("集群内部各服务器的调度者（同步数据）")])]),e._v(" "),a("p",[e._v("Follower 跟随者 ：")]),e._v(" "),a("ol",[a("li",[e._v("处理客户端非事务请求，"),a("strong",[e._v("转发事务请求给Leader服务器")])]),e._v(" "),a("li",[e._v("参与Leader选举投票")])]),e._v(" "),a("p",[e._v("Observer 观察者：")]),e._v(" "),a("ol",[a("li",[e._v("处理客户端非事务请求，转发事务请求给Leader服务器")])])])}),[],!1,null,null,null);a.default=t.exports}}]);