(window.webpackJsonp=window.webpackJsonp||[]).push([[55],{423:function(_,v,e){"use strict";e.r(v);var a=e(0),r=Object(a.a)({},(function(){var _=this,v=_._self._c;return v("ContentSlotsDistributor",{attrs:{"slot-key":_.$parent.slotKey}},[v("h2",{attrs:{id:"_1-spring框架中的单例bean是线程安全的吗"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_1-spring框架中的单例bean是线程安全的吗"}},[_._v("#")]),_._v(" 1. Spring框架中的单例bean是线程安全的吗？")]),_._v(" "),v("p",[_._v("不是线程安全的。当多用户同时请求一个服务时，容器会给每个请求分配一个线程，这些线程会并发执行业务逻辑。如果处理逻辑中包含对单例状态的修改，比如修改单例的成员属性，就必须考虑线程同步问题。Spring框架本身并不对单例bean进行线程安全封装，线程安全和并发问题需要开发者自行处理。")]),_._v(" "),v("p",[_._v("通常在项目中使用的Spring bean是不可变状态（如Service类和DAO类），因此在某种程度上可以说Spring的单例bean是线程安全的。如果bean有多种状态（如View Model对象），就需要自行保证线程安全。最简单的解决办法是将单例bean的作用域由“singleton”变更为“prototype”。")]),_._v(" "),v("h2",{attrs:{id:"_2-什么是aop"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_2-什么是aop"}},[_._v("#")]),_._v(" 2. 什么是AOP？")]),_._v(" "),v("p",[_._v("AOP，即面向切面编程，在Spring中用于将那些与业务无关但对多个对象产生影响的公共行为和逻辑抽取出来，实现公共模块复用，降低耦合。常见的应用场景包括公共日志保存和事务处理。")]),_._v(" "),v("h3",{attrs:{id:"_3-你们项目中有没有使用到aop"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_3-你们项目中有没有使用到aop"}},[_._v("#")]),_._v(" 3. 你们项目中有没有使用到AOP？")]),_._v(" "),v("p",[_._v("我们之前在后台管理系统中使用AOP来记录系统操作日志。主要思路是使用AOP的环绕通知和切点表达式，找到需要记录日志的方法，然后通过环绕通知的参数获取请求方法的参数，例如类信息、方法信息、注解、请求方式等，并将这些参数保存到数据库。")]),_._v(" "),v("h3",{attrs:{id:"_4-spring中的事务是如何实现的"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_4-spring中的事务是如何实现的"}},[_._v("#")]),_._v(" 4. Spring中的事务是如何实现的？")]),_._v(" "),v("p",[_._v("Spring实现事务的本质是利用AOP完成的。它对方法前后进行拦截，在执行方法前开启事务，在执行完目标方法后根据执行情况提交或回滚事务。")]),_._v(" "),v("h3",{attrs:{id:"_5-spring中事务失效的场景有哪些"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_5-spring中事务失效的场景有哪些"}},[_._v("#")]),_._v(" 5. Spring中事务失效的场景有哪些？")]),_._v(" "),v("p",[_._v("在项目中，我遇到过几种导致事务失效的场景：")]),_._v(" "),v("ol",[v("li",[_._v("如果方法内部捕获并处理了异常，没有将异常抛出，会导致事务失效。因此，处理异常后应该确保异常能够被抛出。")]),_._v(" "),v("li",[_._v("如果方法抛出非RuntimeException/Error，即检查型异常（checked exception），并且没有在"),v("code",[_._v("@Transactional")]),_._v("注解上配置"),v("code",[_._v("rollbackFor")]),_._v("属性为"),v("code",[_._v("Exception")]),_._v("，那么异常发生时事务可能不会回滚。")]),_._v(" "),v("li",[_._v("如果事务注解的方法不是公开（public）修饰的，也可能导致事务失效。")]),_._v(" "),v("li",[_._v("自调用：如果在类内部方法直接调用带@Transaction的方法，会绕过AOP代理，导致事务失效")])]),_._v(" "),v("h2",{attrs:{id:"_6-spring的bean的生命周期"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_6-spring的bean的生命周期"}},[_._v("#")]),_._v(" 6. Spring的bean的生命周期？")]),_._v(" "),v("p",[_._v("Spring的Bean生命周期主要分为五大步")]),_._v(" "),v("ol",[v("li",[v("p",[_._v("实例化")]),_._v(" "),v("ol",[v("li",[_._v("通过"),v("code",[_._v("BeanDefinition")]),_._v("获取bean的定义信息(beanClassName、initMethodName、propertyValues、scope、lazyInit)。")]),_._v(" "),v("li",[_._v("通过反射调用构造函数或工厂方法创建Bean对象。")])])]),_._v(" "),v("li",[v("p",[_._v("属性赋值")])]),_._v(" "),v("li",[v("p",[_._v("进行bean的依赖注入：通过Setter方法、字段注入（如"),v("code",[_._v("@Autowired")]),_._v("）或构造器注入完成属性赋值")])]),_._v(" "),v("li",[v("p",[_._v("处理循环依赖")])]),_._v(" "),v("li",[v("p",[_._v("Aware接口回调")]),_._v(" "),v("ol",[v("li",[_._v("若Bean实现了"),v("code",[_._v("Aware")]),_._v("接口(BeanNameAware、BeanFactoryAware、ApplicationContextA ware)，会调用相关的Aware注入BeanName、容器等底层资源")])])]),_._v(" "),v("li",[v("p",[_._v("初始化")]),_._v(" "),v("ol",[v("li",[_._v("BeanPostProcessor前置处理")]),_._v(" "),v("li",[_._v("调用初始化生命周期回调（@PostConstruct、InitializingBean#afterPropertiesSet()、init-method）")]),_._v(" "),v("li",[_._v("BeanPostProcessor后置处理 "),v("strong",[_._v("可能在这里产生代理对象")]),_._v("（JDK、CGLIB动态代理）")])])]),_._v(" "),v("li",[v("p",[_._v("销毁")]),_._v(" "),v("ol",[v("li",[_._v("调用销毁生命周期回调（PreDestroy(常用) 、destroy() 、destroy-method）")])])])]),_._v(" "),v("h2",{attrs:{id:"_7-spring中的循环引用"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_7-spring中的循环引用"}},[_._v("#")]),_._v(" 7. Spring中的循环引用？")]),_._v(" "),v("p",[_._v("循环依赖发生在两个或两个以上的bean互相持有对方，形成闭环。Spring框架允许循环依赖存在，并通过三级缓存解决大部分循环依赖问题：")]),_._v(" "),v("ol",[v("li",[_._v("一级缓存：单例池，缓存已完成初始化的bean对象。")]),_._v(" "),v("li",[_._v("二级缓存：缓存尚未完成生命周期的早期bean对象。")]),_._v(" "),v("li",[_._v("三级缓存：缓存"),v("code",[_._v("ObjectFactory")]),_._v("，用于创建bean对象。")])]),_._v(" "),v("p",[_._v("构造器注入的循环依赖三级缓存无法解决，需使用注解@Lazy")]),_._v(" "),v("h3",{attrs:{id:"_8-那具体解决流程清楚吗"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_8-那具体解决流程清楚吗"}},[_._v("#")]),_._v(" 8. 那具体解决流程清楚吗？")]),_._v(" "),v("p",[_._v("解决循环依赖的流程如下：")]),_._v(" "),v("ol",[v("li",[_._v("实例化A对象，并创建"),v("code",[_._v("ObjectFactory")]),_._v("存入三级缓存。")]),_._v(" "),v("li",[_._v("A在初始化时需要B对象，开始B的创建逻辑。")]),_._v(" "),v("li",[_._v("B实例化完成，也创建"),v("code",[_._v("ObjectFactory")]),_._v("存入三级缓存。")]),_._v(" "),v("li",[_._v("B需要注入A，通过三级缓存获取"),v("code",[_._v("ObjectFactory")]),_._v("生成A对象，存入二级缓存。")]),_._v(" "),v("li",[_._v("B通过二级缓存获得A对象后，B创建成功，存入一级缓存。")]),_._v(" "),v("li",[_._v("A对象初始化时，由于B已创建完成，可以直接注入B，A创建成功存入一级缓存。")]),_._v(" "),v("li",[_._v("清除二级缓存中的临时对象A。")])]),_._v(" "),v("h3",{attrs:{id:"_9-构造方法出现了循环依赖怎么解决"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_9-构造方法出现了循环依赖怎么解决"}},[_._v("#")]),_._v(" 9. 构造方法出现了循环依赖怎么解决？")]),_._v(" "),v("p",[_._v("由于构造函数是bean生命周期中最先执行的，Spring框架无法解决构造方法的循环依赖问题。可以使用"),v("code",[_._v("@Lazy")]),_._v("懒加载注解，延迟bean的创建直到实际需要时。")]),_._v(" "),v("h2",{attrs:{id:"_10-springmvc的执行流程-视图阶段-jsp"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_10-springmvc的执行流程-视图阶段-jsp"}},[_._v("#")]),_._v(" 10. SpringMVC的执行流程？视图阶段（JSP）")]),_._v(" "),v("p",[_._v("SpringMVC的执行流程包括以下步骤：、")]),_._v(" "),v("p",[v("img",{attrs:{src:"C:/Users/86157/Desktop/blog-img/img/image-20250405003249905.png",alt:"image-20250405003249905"}})]),_._v(" "),v("ol",[v("li",[_._v("用户发送出请求到前端控制器DispatcherServlet（DispatcherServlet是一个调度中心，负责调用其他的组件来完成用户的请求）")]),_._v(" "),v("li",[_._v("DispatcherServlet收到请求调用HandlerMapping(处理器映射器)")]),_._v(" "),v("li",[_._v("HandlerMapping找到具体的处理器，生成处理器对像及处理器拦截器（如果有），再一起返回给DispatcherServlet。")]),_._v(" "),v("li",[_._v("DispatcherServlet调用HandlerAdapter(处理器适配器)")]),_._v(" "),v("li",[_._v("HandlerAdapter经过适配调用具体的处理器(Handler/Controller)，Controller中的方法")]),_._v(" "),v("li",[_._v("Controller执行完成返回ModelAndView对象")]),_._v(" "),v("li",[_._v("HandlerAdapter将Controller执行结果ModelAndView返回给DispatcherServlet")]),_._v(" "),v("li",[_._v("DispatcherServlet将ModelAndView传给ViewReslover(视图解析器)")]),_._v(" "),v("li",[_._v("ViewReslover解析后返回具体View(视图)")]),_._v(" "),v("li",[_._v("DispatcherServlet根据View进行渲染视图（即将模型数据填充至视图中）")]),_._v(" "),v("li",[_._v("DispatcherServlet响应用户")])]),_._v(" "),v("h3",{attrs:{id:"springmvc的四大核心组件"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#springmvc的四大核心组件"}},[_._v("#")]),_._v(" SpringMVC的四大核心组件")]),_._v(" "),v("ol",[v("li",[_._v("DispatcherServlet前端控制器，负责接收前端发来的所有请求，然后调用其他的三个组件处理用户请求")]),_._v(" "),v("li",[_._v("HandlerMapping处理器映射器，生成并返回handler处理器")]),_._v(" "),v("li",[_._v("HandlerAdapter处理器适配器，处理handler的参数和返回值")]),_._v(" "),v("li",[_._v("HandlerResolver处理器解析器，将逻辑视图解析为具体视图，")])]),_._v(" "),v("h3",{attrs:{id:"springmvc的执行流程-前后端分离阶段"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#springmvc的执行流程-前后端分离阶段"}},[_._v("#")]),_._v(" SpringMVC的执行流程（前后端分离阶段）")]),_._v(" "),v("p",[v("img",{attrs:{src:"C:/Users/86157/Desktop/blog-img/img/image-20250405142844276.png",alt:"image-20250405142844276"}})]),_._v(" "),v("ol",[v("li",[_._v("用户发送出请求到前端控制器DispatcherServlet")]),_._v(" "),v("li",[_._v("DispatcherServlet收到请求调用HandlerMapping(处理器映射器)")]),_._v(" "),v("li",[_._v("HandlerMapping找到具体的处理器，生成处理器对象及处理器拦截器（如果有），再一起返回给DispatcherServlet。")]),_._v(" "),v("li",[_._v("DispatcherServlet调用HandlerAdapter(处理器适配器)")]),_._v(" "),v("li",[_._v("HandlerAdapter经过适配调用具体的处理器(Handler/Controller)")]),_._v(" "),v("li",[_._v("由于方法上添加了@ResponseBody")]),_._v(" "),v("li",[_._v("处理器会通过HttpMessageConverter将返回结果转换为JSON并响应给用户")])]),_._v(" "),v("h2",{attrs:{id:"_12-spring-的常见注解有哪些"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_12-spring-的常见注解有哪些"}},[_._v("#")]),_._v(" 12. Spring 的常见注解有哪些？")]),_._v(" "),v("p",[_._v("Spring的常见注解包括：")]),_._v(" "),v("ol",[v("li",[_._v("声明Bean的注解："),v("code",[_._v("@Component")]),_._v("、"),v("code",[_._v("@Service")]),_._v("、"),v("code",[_._v("@Repository")]),_._v("、"),v("code",[_._v("@Controller")]),_._v("。")]),_._v(" "),v("li",[_._v("依赖注入相关注解："),v("code",[_._v("@Autowired")]),_._v("、"),v("code",[_._v("@Qualifier")]),_._v("。")]),_._v(" "),v("li",[_._v("设置作用域的注解："),v("code",[_._v("@Scope")]),_._v("。")]),_._v(" "),v("li",[_._v("配置相关注解："),v("code",[_._v("@Configuration")]),_._v("、"),v("code",[_._v("@ComponentScan")]),_._v("、"),v("code",[_._v("@Bean")]),_._v("。")]),_._v(" "),v("li",[_._v("AOP相关注解："),v("code",[_._v("@Aspect")]),_._v("、"),v("code",[_._v("@Before")]),_._v("、"),v("code",[_._v("@After")]),_._v("、"),v("code",[_._v("@Around")]),_._v("、"),v("code",[_._v("@Pointcut")]),_._v("。")])]),_._v(" "),v("h3",{attrs:{id:"autowired和-resource的区别"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#autowired和-resource的区别"}},[_._v("#")]),_._v(" @Autowired和@Resource的区别")]),_._v(" "),v("ul",[v("li",[v("p",[_._v("@Autowired是Spring提供的注解，默认根据类型注入，")])]),_._v(" "),v("li",[v("p",[_._v("@Autowired有一个属性required，默认为true，表示强制要求bean实例的注入，在项目启动时，如果在IOC容器中没有对应类型的Bean就会报错，如果不想要自动注入，也可以设置为false。")])]),_._v(" "),v("li",[v("p",[_._v("但IOC容器中有多个相同类型的Bean，由于@Autowired注解时根据类型注入bean的，所以会报错，可以用@Primary、@Qualifier注解解决，")]),_._v(" "),v("ul",[v("li",[_._v("@Primary是指定主要的bean，当有多个相同类型的bean时，会优先使用声明了@Primary注解的bean。")]),_._v(" "),v("li",[_._v("而使用@Qualifier可以根据bean的名字去装配")])])]),_._v(" "),v("li",[v("p",[_._v("@Resource是JDK提供的注解，Spring提供了对这个注解的支持，")])]),_._v(" "),v("li",[v("p",[_._v("@Resource可以通过属性name和type指定注入bean的方式，使用name可以根据bean的名字注入，type可以根据类型注入，如果都不指定，默认是根据名字注入，如果没有匹配成功，再通过类型注入，如果两个都没有匹配到的话，就会报错。")])]),_._v(" "),v("li",[v("p",[_._v("总结：")]),_._v(" "),v("ul",[v("li",[_._v("@Autowired是spring提供的注解。@Resource是jdk提供的注解，只是spring提供了对这个注解的支持。")]),_._v(" "),v("li",[_._v("@Autowired默认根据类型注入bean，如果有多个相同类型的bean，可以通过@Primary、@Qualifier注解来解决。而@Resource可以指定通过名字或者类型来注入bean。默认是根据bean的名字注入，如果没有匹配到，再根据类型注入。")])])])]),_._v(" "),v("h3",{attrs:{id:"component和-bean的区别"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#component和-bean的区别"}},[_._v("#")]),_._v(" @Component和@Bean的区别")]),_._v(" "),v("p",[_._v("用途：")]),_._v(" "),v("ul",[v("li",[_._v("@Component适用于标注一个普通类")]),_._v(" "),v("li",[_._v("@Bean注解是在配置类的方法上声明和配置一个定制化的Bean对象")])]),_._v(" "),v("p",[_._v("使用方式：")]),_._v(" "),v("ul",[v("li",[v("p",[_._v("@Component是一个类级别的注解，Spring通过@ComponentScan注解扫描修饰了@Component注解的类并注册到SpringIOC容器中为Bean")])]),_._v(" "),v("li",[v("p",[_._v("@Bean是方法级别的注解，在带有@Configuration注解的配置类中手动声明和配置Bean")])])]),_._v(" "),v("p",[_._v("控制权：")]),_._v(" "),v("ul",[v("li",[_._v("@Component注解修饰的类是由Spring框架来创建和初始化的")]),_._v(" "),v("li",[_._v("@Bean注解允许开发人员手动控制Bean的创建和配置过程")])]),_._v(" "),v("h3",{attrs:{id:"bean-在-component-和-configuration-中的区别"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#bean-在-component-和-configuration-中的区别"}},[_._v("#")]),_._v(" @Bean 在 @Component 和 @Configuration 中的区别")]),_._v(" "),v("ul",[v("li",[v("strong",[v("code",[_._v("@Bean")]),_._v(" 在 "),v("code",[_._v("@Component")]),_._v(" 中")]),_._v("`\n"),v("ul",[v("li",[v("code",[_._v("@Bean")]),_._v(" 方法会被当作普通的工厂方法调用，每次调用都会返回一个新的实例。")]),_._v(" "),v("li",[_._v("不支持 "),v("code",[_._v("@Bean")]),_._v(" 方法之间的依赖注入（通过方法调用）。")])])]),_._v(" "),v("li",[v("strong",[v("code",[_._v("@Bean")]),_._v(" 在 "),v("code",[_._v("@Configuration")]),_._v(" 中")]),_._v(" "),v("ul",[v("li",[v("code",[_._v("@Bean")]),_._v(" 方法会被 Spring 代理，确保\t每次调用返回的是同一个实例（单例）。")]),_._v(" "),v("li",[_._v("支持 "),v("code",[_._v("@Bean")]),_._v(" 方法之间的依赖注入（通过方法调用）。")])])])]),_._v(" "),v("h3",{attrs:{id:"如何给bean指定名称"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#如何给bean指定名称"}},[_._v("#")]),_._v(" 如何给bean指定名称")]),_._v(" "),v("table",[v("thead",[v("tr",[v("th",[_._v("方法")]),_._v(" "),v("th",[_._v("示例代码")]),_._v(" "),v("th",[_._v("适用场景")])])]),_._v(" "),v("tbody",[v("tr",[v("td",[v("code",[_._v('@Component("name")')])]),_._v(" "),v("td",[v("code",[_._v('@Component("myBean")')])]),_._v(" "),v("td",[_._v("自动扫描组件时指定名称")])]),_._v(" "),v("tr",[v("td",[v("code",[_._v('@Bean(name = "name")')])]),_._v(" "),v("td",[v("code",[_._v('@Bean(name = "customBean")')])]),_._v(" "),v("td",[_._v("在配置类中手动定义Bean时指定名称")])]),_._v(" "),v("tr",[v("td",[v("code",[_._v('@Qualifier("name")')])]),_._v(" "),v("td",[v("code",[_._v('@Qualifier("primaryService")')])]),_._v(" "),v("td",[_._v("解决多Bean冲突时指定限定符")])]),_._v(" "),v("tr",[v("td",[_._v("XML "),v("code",[_._v('<bean id="name">')])]),_._v(" "),v("td",[v("code",[_._v('<bean id="myBean">')])]),_._v(" "),v("td",[_._v("使用XML配置时指定名称")])]),_._v(" "),v("tr",[v("td",[v("code",[_._v('@Named("name")')])]),_._v(" "),v("td",[v("code",[_._v('@Named("customName")')])]),_._v(" "),v("td",[_._v("使用JSR-330标准时指定名称")])])])]),_._v(" "),v("h3",{attrs:{id:"async-为什么不建议用"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#async-为什么不建议用"}},[_._v("#")]),_._v(" @Async 为什么不建议用？")]),_._v(" "),v("ol",[v("li",[v("p",[_._v("默认线程池的弊端")]),_._v(" "),v("ul",[v("li",[v("p",[_._v("线程无复用：默认使用SimpleAsyncTaskExecutor，每次调用都会创建新线程，而非复用线程池中的线程，可能导致系统资源耗尽（如内存溢出）")])]),_._v(" "),v("li",[v("p",[_._v("缺乏流量控制：默认配置下线程数无上限(Integer.MAX_VALUE),高并发时可能引发性能问题。")])])])]),_._v(" "),v("li",[v("p",[_._v("异常处理困难")]),_._v(" "),v("ul",[v("li",[_._v("异步方法抛出的异常不会直接传递给调用方，需通过AsyncUncaughtExceptionHandler或Future.get()捕获，增加了调试复杂度")])])]),_._v(" "),v("li",[v("p",[_._v("事务与上下文问题")]),_._v(" "),v("ul",[v("li",[v("p",[_._v("事务上下文默认不会传递到异步方法中，可能导致事务失效")])]),_._v(" "),v("li",[v("p",[_._v("自调用（同类方法调用@Asyc方法）因代理机制失效，无法异步执行")])])])]),_._v(" "),v("li",[v("p",[_._v("性能与稳定性风险")]),_._v(" "),v("ul",[v("li",[_._v("线程阻塞：若异步方法中包含阻塞操作（如IO)，可能会导致线程死锁")])])])]),_._v(" "),v("h2",{attrs:{id:"_13-springmvc常见的注解有哪些"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_13-springmvc常见的注解有哪些"}},[_._v("#")]),_._v(" 13. SpringMVC常见的注解有哪些？")]),_._v(" "),v("p",[_._v("SpringMVC的常见注解有：")]),_._v(" "),v("ul",[v("li",[v("code",[_._v("@RequestMapping")]),_._v("：映射请求路径，用于类上，表示类中所有的方法都是以该地址为父路径。")]),_._v(" "),v("li",[v("code",[_._v("@RequestBody")]),_._v("：接收HTTP请求的JSON数据，将JSON转换为Java对象。")]),_._v(" "),v("li",[v("code",[_._v("@RequestParam")]),_._v("：指定请求路径的查询参数名称。")]),_._v(" "),v("li",[v("code",[_._v("@PathVariable")]),_._v("：从请求路径中获取参数。")]),_._v(" "),v("li",[v("code",[_._v("@ResponseBody")]),_._v("：将Controller方法返回的对象转化为JSON。")]),_._v(" "),v("li",[v("code",[_._v("@RequestHeader")]),_._v("：获取请求头数据。")]),_._v(" "),v("li",[v("code",[_._v("@RestController")]),_._v("="),v("code",[_._v("@ResponseBody")]),_._v(" + "),v("code",[_._v("@Controller")]),_._v("等。")])]),_._v(" "),v("h2",{attrs:{id:"_14-springboot常见注解有哪些"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_14-springboot常见注解有哪些"}},[_._v("#")]),_._v(" 14. Springboot常见注解有哪些？")]),_._v(" "),v("p",[_._v("Spring Boot的常见注解包括：")]),_._v(" "),v("ul",[v("li",[v("code",[_._v("@SpringBootApplication")]),_._v("：由"),v("code",[_._v("@SpringBootConfiguration")]),_._v("、"),v("code",[_._v("@EnableAutoConfiguration")]),_._v("和"),v("code",[_._v("@ComponentScan")]),_._v("组成。")]),_._v(" "),v("li",[v("code",[_._v("@SpringBootConfiguration")]),_._v("是组合了"),v("code",[_._v("@Configuration")])]),_._v(" "),v("li",[v("code",[_._v("@EnableAutoConfiguration")]),_._v("打开自动配置功能")])]),_._v(" "),v("h2",{attrs:{id:"_15-mybatis执行流程"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_15-mybatis执行流程"}},[_._v("#")]),_._v(" 15. MyBatis执行流程？")]),_._v(" "),v("p",[_._v("MyBatis的执行流程如下：")]),_._v(" "),v("ol",[v("li",[_._v("读取MyBatis"),v("strong",[_._v("全局配置文件"),v("code",[_._v("mybatis-config.xml")]),_._v("和配置文件")]),_._v("。")]),_._v(" "),v("li",[_._v("构造会话工厂"),v("code",[_._v("SqlSessionFactory")]),_._v("。")]),_._v(" "),v("li",[_._v("会话工厂创建"),v("code",[_._v("SqlSession")]),_._v("对象。")]),_._v(" "),v("li",[_._v("创建操作数据库的接口，"),v("code",[_._v("Executor")]),_._v("执行器。")]),_._v(" "),v("li",[_._v("获取Mapper代理对象")]),_._v(" "),v("li",[v("code",[_._v("Executor")]),_._v("执行方法中的"),v("code",[_._v("MappedStatement")]),_._v("类型的参数。")]),_._v(" "),v("li",[_._v("输入参数映射，从Java类型->JDBC类型。")]),_._v(" "),v("li",[_._v("执行SQL")]),_._v(" "),v("li",[_._v("输出结果映射，从JDBC类型->Java类型。")])]),_._v(" "),v("h2",{attrs:{id:"_16-mybatis是否支持延迟加载"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_16-mybatis是否支持延迟加载"}},[_._v("#")]),_._v(" 16. Mybatis是否支持延迟加载？")]),_._v(" "),v("p",[_._v("MyBatis支持延迟加载，即在需要用到数据时才加载。主要用于处理 "),v("strong",[_._v("关联数据")]),_._v("，即那些不是主查询直接返回，而是通过额外 SQL 查询获取的数据。可以通过配置文件中的"),v("code",[_._v("lazyLoadingEnabled")]),_._v("配置启用或禁用延迟加载。")]),_._v(" "),v("h2",{attrs:{id:"_17-延迟加载的底层原理知道吗"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_17-延迟加载的底层原理知道吗"}},[_._v("#")]),_._v(" 17. 延迟加载的底层原理知道吗？")]),_._v(" "),v("p",[_._v("延迟加载的底层原理主要使用CGLIB动态代理实现：")]),_._v(" "),v("ol",[v("li",[_._v("当你查询数据时，Mybatis会使用CGLIB创建目标对象的代理对象，这个代理对象的关联属性（需要关联其他表的字段）是空的。")]),_._v(" "),v("li",[_._v("调用目标方法时，代理对象会拦截这个方法，如果发现查询的目标属性是null值，则先执行SQL查询。")]),_._v(" "),v("li",[_._v("获取数据后，设置属性值再继续执行目标方法。")])]),_._v(" "),v("h2",{attrs:{id:"_18-mybatis的一级、二级缓存用过吗"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_18-mybatis的一级、二级缓存用过吗"}},[_._v("#")]),_._v(" 18. Mybatis的一级、二级缓存用过吗？")]),_._v(" "),v("p",[_._v("一级缓存：基于PerpetualCache的HashMap本地缓存，其存储作用域为Session,当Sessioni进行flush或close之后，该Session中的所有Cache就将清空，默认打开一级缓存\n二级缓存需要单独开启，作用域为Namespace或mapper，不是依赖于SQL session,默认也是采用PerpetualCache的HashMap存储。通过在核心配置文件和mapper映射文件配置来开启")]),_._v(" "),v("h2",{attrs:{id:"_19-mybatis的二级缓存什么时候会清理缓存中的数据"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_19-mybatis的二级缓存什么时候会清理缓存中的数据"}},[_._v("#")]),_._v(" 19. Mybatis的二级缓存什么时候会清理缓存中的数据？")]),_._v(" "),v("p",[_._v("当作用域（一级缓存Session/二级缓存Namespaces）进行了"),v("strong",[_._v("新增、修改、删除操作")]),_._v("后，默认该作用域下所有select中的缓存将被清空。")]),_._v(" "),v("h2",{attrs:{id:"依赖注入时推荐使用构造函数注入"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#依赖注入时推荐使用构造函数注入"}},[_._v("#")]),_._v(" 依赖注入时推荐使用构造函数注入")]),_._v(" "),v("p",[_._v("依赖注入的三种方式")]),_._v(" "),v("ol",[v("li",[_._v("使用"),v("code",[_._v("@Autowired")]),_._v("注解：将"),v("code",[_._v("@Autowired")]),_._v("注解直接标记在字段上，Spring会自动注入依赖。")]),_._v(" "),v("li",[_._v("Setter注入：使用"),v("code",[_._v("@Autowired")]),_._v("注解标记Setter方法，Spring会自动调用Setter方法注入依赖。")]),_._v(" "),v("li",[_._v("构造函数注入：如果有构造函数，Spring会自动调用构造函数并注入所需的依赖。")])]),_._v(" "),v("p",[_._v("为什么推荐使用构造函数注入？")]),_._v(" "),v("ol",[v("li",[v("p",[_._v("不可变性（Immutability）")]),_._v(" "),v("ul",[v("li",[_._v("构造函数注入允许将依赖字段声明为"),v("code",[_._v("final")]),_._v("，确保依赖在对象创建后不可变。")])])]),_._v(" "),v("li",[v("p",[_._v("确保依赖项不为null")]),_._v(" "),v("p",[_._v("构造函数注入强制要求在创建对象时提供所有依赖，如果依赖项不存在，编译器会报错")])]),_._v(" "),v("li",[v("p",[_._v("避免循环依赖")]),_._v(" "),v("p",[_._v("构造函数注入可以帮助发现循环依赖问题，因为Spring在启动时会检查构造函数注入的循环依赖。可以通过 "),v("code",[_._v("@Lazy")]),_._v("解决")])]),_._v(" "),v("li",[v("p",[_._v("符合单一职责原则")]),_._v(" "),v("p",[_._v("构造函数注入强制要求类的依赖在构造函数中明确声明，有助于遵循单一职责原则（SRP）。")])])]),_._v(" "),v("p",[_._v("使用构造函数时，当一个类只有一个构造函数时，Spring 会自动选择它进行注入，无需额外注解。如果有多个构造函数，需要使用 "),v("code",[_._v("@Autowired")]),_._v(" 或 "),v("code",[_._v("@Primary")]),_._v(" 明确指定。")]),_._v(" "),v("p",[_._v("如果需要添加注入的依赖，还需要修改构造函数，这时可以使用lombok工具的RequiredArgsConstructor，会自动注入被final修饰的字段")]),_._v(" "),v("h2",{attrs:{id:"spring通知有哪些类型"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#spring通知有哪些类型"}},[_._v("#")]),_._v(" Spring通知有哪些类型？")]),_._v(" "),v("h2",{attrs:{id:"解释基于xml-schema方式的切面实现"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#解释基于xml-schema方式的切面实现"}},[_._v("#")]),_._v(" 解释基于XML Schema方式的切面实现")]),_._v(" "),v("h2",{attrs:{id:"解释基于注解的切面实现"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#解释基于注解的切面实现"}},[_._v("#")]),_._v(" 解释基于注解的切面实现")]),_._v(" "),v("h2",{attrs:{id:"spring-aop"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#spring-aop"}},[_._v("#")]),_._v(" Spring AOP")]),_._v(" "),v("h3",{attrs:{id:"jdk和cglib动态代理的区别"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#jdk和cglib动态代理的区别"}},[_._v("#")]),_._v(" "),v("a",{attrs:{href:"https://www.bilibili.com/video/BV1LK421e7HD",target:"_blank",rel:"noopener noreferrer"}},[_._v("JDK和CGLIB动态代理的区别"),v("OutboundLink")],1)]),_._v(" "),v("ol",[v("li",[_._v("JDK动态代理只提供接口的代理，不支持类的代理。而CGLIB不用实现接口。当被代理的类实现了接口会默认使用jdk代理")]),_._v(" "),v("li",[_._v("JDK动态代理是通过字节码的方式生成的动态代理类，而CGLIB是用ASM的开源字节码生成库生成的代理类（还有其他的相关的类）")]),_._v(" "),v("li",[_._v("JDK动态代理是实现了目标类的接口，而CGLIB是将目标类作为父类进行继承，并重写父类的所有方法")]),_._v(" "),v("li",[_._v("调用时，JDK动态代理是通过反射调用的目标方法，而CGLIB是通过直接子类调用父类的方式调用目标方法")])]),_._v(" "),v("p",[_._v("其他")]),_._v(" "),v("ul",[v("li",[_._v("CGLIB是通过继承做的动态代理，所有如果类被标记为final，那么它是无法使用CGLIB做动态代理的。")]),_._v(" "),v("li",[_._v("CGLIB除了生成目标子类代理类，还有一个FastClass(路由类)，可以（但spring为了和jdk统一，默认没有使用）让本类方法调用进行增强（通过路由类回调代理类来实现方法的增强），而不会像jdk代理那样调用本类方法，增强会失效")]),_._v(" "),v("li",[_._v("JDK和CGLIB的性能：JDK动态代理生成类速度快调用慢，CGLIB生成类速度慢但后续调用快，在老版本CGLIB的速度是JDK速度的10倍左右，但是实际上JDK的速度在版本升级的时候每次都提高很多性能，而CGLIB仍止步不前。在对JDK动态代理与CGib动态代理的代码实验中看，1W次执行下，JDK7及8的动态代理性能比CG引ib要好20%左右。")]),_._v(" "),v("li",[_._v("实现了接口的bean不能用实现类的class对象来获取bean，只能通过其接口的class对象来获取bean（因为实现类不在IOC容器中，被代理拦截了）或者实现类名字（需要用接口接收）\n"),v("ul",[v("li",[_._v("IUserService bean = ioc.getBean(IUserService.class):")]),_._v(" "),v("li",[_._v('IUserService bean = (IUserService) ioc.getBean("userServiceImpl")；')])])])]),_._v(" "),v("h2",{attrs:{id:"spring事务"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#spring事务"}},[_._v("#")]),_._v(" Spring事务")]),_._v(" "),v("h3",{attrs:{id:"为什么有些公司禁止使用-transactional声明式事务"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#为什么有些公司禁止使用-transactional声明式事务"}},[_._v("#")]),_._v(" 为什么有些公司禁止使用@Transactional声明式事务？")]),_._v(" "),v("ol",[v("li",[v("p",[_._v("使用声明式事务，如果一个方法中存在较多耗时的操作，会引发长事务问题。长事务会导致锁的竞争，影响性能，也会占用数据库连接，导致数据库连接池被耗尽，影响程序正常执行。")])]),_._v(" "),v("li",[v("p",[_._v("@Transaction事务是通过spring的代理机制实现的，如果调用同类方法会导致事务失效。")])]),_._v(" "),v("li",[v("p",[_._v("@Transaction声明事务将事务控制逻辑放在注解中，如果项目复杂度增加，事务控制可能会变得复杂， 导致代码可读性和维护性下降，")]),_._v(" "),v("div",{staticClass:"language- extra-class"},[v("pre",{pre:!0,attrs:{class:"language-text"}},[v("code",[_._v("// 反例：事务属性与业务逻辑混杂\n@Transactional(\n    isolation = ISOLATION_SERIALIZABLE,\n    timeout = 30,\n    rollbackFor = {BizException.class, DBException.class}\n)\n")])])])]),_._v(" "),v("li",[v("p",[_._v("@Transaction事务是方法层面的，事务范围是整个方法，而使用编程式事务可以更加灵活的控制事务范围，减少事务的锁定时间")])])]),_._v(" "),v("h3",{attrs:{id:"spring事务的实现方式和实现原理"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#spring事务的实现方式和实现原理"}},[_._v("#")]),_._v(" Spring事务的实现方式和实现原理")]),_._v(" "),v("h3",{attrs:{id:"spring的事务传播行为"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#spring的事务传播行为"}},[_._v("#")]),_._v(" Spring的事务传播行为")]),_._v(" "),v("p",[_._v("Spring的事务传播行为定义了Spring多个事务方法相互调用时事务的传播规则")]),_._v(" "),v("p",[_._v("Spring事务有七种传播行为。")]),_._v(" "),v("ol",[v("li",[v("p",[_._v("REQUIRED（默认）")]),_._v(" "),v("ul",[v("li",[v("p",[_._v("如果当前存在事务，则加入该事务；否则新建一个事务。")])]),_._v(" "),v("li",[v("p",[_._v("适用场景：通用业务逻辑")])])])]),_._v(" "),v("li",[v("p",[_._v("SUPPORTS")]),_._v(" "),v("ul",[v("li",[_._v("如果当前存在事务，则加入该事务，若不存在则以非事务方式执行。")]),_._v(" "),v("li",[_._v("适用场景：兼容无事务环境")])])]),_._v(" "),v("li",[v("p",[_._v("MANDATORY")]),_._v(" "),v("ul",[v("li",[_._v("如果当前存在事务，则加入该事务；否则抛出异常。")]),_._v(" "),v("li",[_._v("适用场景：强制事务执行")])])]),_._v(" "),v("li",[v("p",[_._v("REQUIRED_NEW")]),_._v(" "),v("ul",[v("li",[v("p",[_._v("无论当前是否存在事务，都新建独立事务，原事务被挂起。")])]),_._v(" "),v("li",[v("p",[_._v("适用场景：需隔离的子任务")])])])]),_._v(" "),v("li",[v("p",[_._v("NOT_SUPPORTED")]),_._v(" "),v("ul",[v("li",[_._v("以非事务方式执行，若存在事务则挂起。")]),_._v(" "),v("li",[_._v("适用场景：非关键操作")])])]),_._v(" "),v("li",[v("p",[_._v("NEVER")]),_._v(" "),v("ul",[v("li",[_._v("强制非事务执行，若存在事务则抛出异常。")]),_._v(" "),v("li",[_._v("适用场景：禁止事务调用的方法")])])]),_._v(" "),v("li",[v("p",[_._v("NESTED")]),_._v(" "),v("ul",[v("li",[_._v("若当前存在事务，则在嵌套事务（子事务）中执行，可独立回滚；否则新建事务。")]),_._v(" "),v("li",[_._v("适用场景：部分操作可回滚")])])])]),_._v(" "),v("h4",{attrs:{id:"在一个包含多个服务调用的业务流程中-如果其中一个服务方法执行失败应立即回滚-不影响其他服务的正常执行-你认为应如何设置事务传播行为"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#在一个包含多个服务调用的业务流程中-如果其中一个服务方法执行失败应立即回滚-不影响其他服务的正常执行-你认为应如何设置事务传播行为"}},[_._v("#")]),_._v(" 在一个包含多个服务调用的业务流程中，如果其中一个服务方法执行失败应立即回滚，不影响其他服务的正常执行，你认为应如何设置事务传播行为？")]),_._v(" "),v("p",[_._v("使用REQUIRED_NEW或者NESTED\nREQUIRED_NEW可以为每一个方法创建一个新的独立事务，不会相互影响，而NESTED是嵌套一个子事务，子事务会独立回滚，但是如果外层事务回滚，子事务也会回滚")]),_._v(" "),v("h4",{attrs:{id:"requires-new的实际应用"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#requires-new的实际应用"}},[_._v("#")]),_._v(" REQUIRES _NEW的实际应用")]),_._v(" "),v("p",[_._v("记录日志")]),_._v(" "),v("h4",{attrs:{id:"如果系统中出现了事务嵌套过深导致的性能问题你认为可能的原因是什么-如何优化"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#如果系统中出现了事务嵌套过深导致的性能问题你认为可能的原因是什么-如何优化"}},[_._v("#")]),_._v(" 如果系统中出现了事务嵌套过深导致的性能问题你认为可能的原因是什么？如何优化？")]),_._v(" "),v("p",[_._v("每个嵌套事务会占用独立的数据库连接，导致资源占用增加，或者事务持有的锁时间过长。优化：减少不必要的事务嵌套，将事务合并或者调整事务传播行为，优先使用REQUIRED代替REQUIRES_NEW，避免创建新的事务")]),_._v(" "),v("h3",{attrs:{id:"spring的事务隔离"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#spring的事务隔离"}},[_._v("#")]),_._v(" spring的事务隔离？")]),_._v(" "),v("h3",{attrs:{id:"spring框架的事务管理有哪些优点"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#spring框架的事务管理有哪些优点"}},[_._v("#")]),_._v(" Spring框架的事务管理有哪些优点？")])])}),[],!1,null,null,null);v.default=r.exports}}]);