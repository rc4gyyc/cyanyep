(window.webpackJsonp=window.webpackJsonp||[]).push([[59],{428:function(_,v,t){"use strict";t.r(v);var s=t(0),r=Object(s.a)({},(function(){var _=this,v=_._self._c;return v("ContentSlotsDistributor",{attrs:{"slot-key":_.$parent.slotKey}},[v("p",[v("a",{attrs:{href:"https://b11et3un53m.feishu.cn/wiki/R4Sdwvo8Si4kilkSKfscgQX0niB",target:"_blank",rel:"noopener noreferrer"}},[_._v("笔记"),v("OutboundLink")],1)]),_._v(" "),v("h1",{attrs:{id:"springcloud"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#springcloud"}},[_._v("#")]),_._v(" SpringCloud")]),_._v(" "),v("p",[_._v("微服务是一种软件架构风格，它是以专注于"),v("strong",[_._v("单一职责")]),_._v("的很多小型项目为基础，组合出复杂的大型应用。")]),_._v(" "),v("p",[_._v("优点包括：")]),_._v(" "),v("ol",[v("li",[v("strong",[_._v("服务拆分")]),_._v("：将大型应用分解为多个小的、可管理的服务。")]),_._v(" "),v("li",[v("strong",[_._v("远程调用")]),_._v("：服务之间通过网络进行通信，通常使用HTTP/HTTPS协议。")]),_._v(" "),v("li",[v("strong",[_._v("服务治理")]),_._v("：管理和监控服务之间的交互，确保服务的可用性和性能。")]),_._v(" "),v("li",[v("strong",[_._v("请求路由")]),_._v("：决定请求如何被路由到正确的服务。")]),_._v(" "),v("li",[v("strong",[_._v("身份认证")]),_._v("：确保只有授权用户可以访问服务。")]),_._v(" "),v("li",[v("strong",[_._v("配置管理")]),_._v("：管理和更新服务的配置信息。")]),_._v(" "),v("li",[v("strong",[_._v("服务保护")]),_._v("：防止服务过载或崩溃，例如通过限流和熔断机制。")]),_._v(" "),v("li",[v("strong",[_._v("分布式事务")]),_._v("：处理跨多个服务的事务一致性问题。")]),_._v(" "),v("li",[v("strong",[_._v("异步通信")]),_._v("：服务之间通过消息队列等机制进行非阻塞通信。")]),_._v(" "),v("li",[v("strong",[_._v("消息可靠性")]),_._v("：确保消息在服务间可靠传输。")]),_._v(" "),v("li",[v("strong",[_._v("延迟消息")]),_._v("：支持定时或延时的消息传递。")]),_._v(" "),v("li",[v("strong",[_._v("分布式搜索")]),_._v("：在分布式环境中提供高效的搜索能力。")]),_._v(" "),v("li",[v("strong",[_._v("倒排索引")]),_._v("：一种数据结构，用于快速搜索特定字段值的所有文档。")]),_._v(" "),v("li",[v("strong",[_._v("数据聚合")]),_._v("：从多个数据源收集和整合数据。")])]),_._v(" "),v("h1",{attrs:{id:"mybatisplus"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#mybatisplus"}},[_._v("#")]),_._v(" MybatisPlus")]),_._v(" "),v("h2",{attrs:{id:"_2-2-服务拆分原则"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_2-2-服务拆分原则"}},[_._v("#")]),_._v(" 2.2.服务拆分原则")]),_._v(" "),v("p",[_._v("服务拆分一定要考虑几个问题：")]),_._v(" "),v("ul",[v("li",[_._v("什么时候拆？")]),_._v(" "),v("li",[_._v("如何拆？")])]),_._v(" "),v("h3",{attrs:{id:"_2-2-1-什么时候拆"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_2-2-1-什么时候拆"}},[_._v("#")]),_._v(" 2.2.1.什么时候拆")]),_._v(" "),v("p",[_._v("一般情况下，对于一个初创的项目，首先要做的是验证项目的可行性。因此这一阶段的首要任务是敏捷开发，快速产出生产可用的产品，投入市场做验证。为了达成这一目的，该阶段项目架构往往会比较简单，很多情况下会直接采用单体架构，这样开发成本比较低，可以快速产出结果，一旦发现项目不符合市场，损失较小。")]),_._v(" "),v("p",[_._v("如果这一阶段采用复杂的微服务架构，投入大量的人力和时间成本用于架构设计，最终发现产品不符合市场需求，等于全部做了无用功。")]),_._v(" "),v("p",[_._v("所以，对于"),v("strong",[_._v("大多数小型项目来说，一般是先采用单体架构")]),_._v("，随着用户规模扩大、业务复杂后"),v("strong",[_._v("再逐渐拆分为****微服务架构")]),_._v("。这样初期成本会比较低，可以快速试错。但是，这么做的问题就在于后期做服务拆分时，可能会遇到很多代码耦合带来的问题，拆分比较困难（"),v("strong",[_._v("前易后难")]),_._v("）。")]),_._v(" "),v("p",[_._v("而对于一些大型项目，在立项之初目的就很明确，为了长远考虑，在架构设计时就直接选择微服务架构。虽然前期投入较多，但后期就少了拆分服务的烦恼（"),v("strong",[_._v("前难后易")]),_._v("）。")]),_._v(" "),v("h3",{attrs:{id:"_2-2-2-怎么拆⭐"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_2-2-2-怎么拆⭐"}},[_._v("#")]),_._v(" 2.2.2.怎么拆⭐")]),_._v(" "),v("p",[_._v("之前我们说过，微服务拆分时"),v("strong",[_._v("粒度要小")]),_._v("，这其实是拆分的目标。具体可以从两个角度来分析：")]),_._v(" "),v("ul",[v("li",[v("strong",[_._v("高内聚")]),_._v("：每个微服务的职责要尽量单一，包含的业务相互关联度高、完整度高。")]),_._v(" "),v("li",[v("strong",[_._v("低****耦合")]),_._v("：每个微服务的功能要相对独立，尽量减少对其它微服务的依赖，或者依赖接口的稳定性要强。")])]),_._v(" "),v("p",[v("strong",[_._v("高内聚")]),_._v("首先是**单一职责，**但不能说一个微服务就一个接口，而是要保证微服务内部业务的完整性为前提。目标是当我们要修改某个业务时，最好就只修改当前微服务，这样变更的成本更低。")]),_._v(" "),v("p",[_._v("一旦微服务做到了高内聚，那么服务之间的"),v("strong",[_._v("耦合度")]),_._v("自然就降低了。")]),_._v(" "),v("p",[_._v("当然，微服务之间不可避免的会有或多或少的业务交互，比如下单时需要查询商品数据。这个时候我们不能在订单服务直接查询商品数据库，否则就导致了数据耦合。而应该由商品服务对应暴露接口，并且一定要保证微服务对外"),v("strong",[_._v("接口的稳定性")]),_._v("（即：尽量保证接口外观不变）。虽然出现了服务间调用，但此时无论你如何在商品服务做内部修改，都不会影响到订单微服务，服务间的耦合度就降低了。")]),_._v(" "),v("p",[_._v("明确了拆分目标，接下来就是拆分方式了。我们在做服务拆分时一般有两种方式：")]),_._v(" "),v("ul",[v("li",[v("strong",[_._v("纵向")]),_._v("拆分")]),_._v(" "),v("li",[v("strong",[_._v("横向")]),_._v("拆分")])]),_._v(" "),v("p",[_._v("所谓"),v("strong",[_._v("纵向拆分")]),_._v("，就是按照项目的功能模块来拆分。例如黑马商城中，就有用户管理功能、订单管理功能、购物车功能、商品管理功能、支付功能等。那么按照功能模块将他们拆分为一个个服务，就属于纵向拆分。这种拆分模式可以尽可能提高服务的内聚性。")]),_._v(" "),v("p",[_._v("而"),v("strong",[_._v("横向拆分")]),_._v("，是看各个功能模块之间有没有公共的业务部分，如果有将其抽取出来作为通用服务。例如用户登录是需要发送消息通知，记录风控数据，下单时也要发送短信，记录风控数据。因此消息发送、风控数据记录就是通用的业务功能，因此可以将他们分别抽取为公共服务："),v("strong",[_._v("消息中心服务、风控管理服务")]),_._v("。这样可以提高业务的复用性，避免重复开发。同时通用业务一般接口稳定性较强，也不会使服务之间过分耦合。")]),_._v(" "),v("p",[_._v("当然，由于黑马商城并不是一个完整的项目，其中的短信发送、风控管理并没有实现，这里就不再考虑了。而其它的业务按照纵向拆分，可以分为以下几个微服务：")]),_._v(" "),v("ul",[v("li",[_._v("用户服务")]),_._v(" "),v("li",[_._v("商品服务")]),_._v(" "),v("li",[_._v("订单服务")]),_._v(" "),v("li",[_._v("购物车服务")]),_._v(" "),v("li",[_._v("支付服务")])]),_._v(" "),v("p",[_._v("服务拆分后可以使用RestTemplate远程http请求调用")]),_._v(" "),v("p",[_._v("——》")]),_._v(" "),v("p",[_._v("服务是集群的，RestTemplate调用方式是固定的")]),_._v(" "),v("p",[_._v("-》")]),_._v(" "),v("p",[_._v("使用nacos服务注册中心，服务调用者根据服务名可以调用服务注册者在服务注册中心中注册的服务实例，通过"),v("strong",[_._v("负载均衡")]),_._v("算法选择出实例进行http请求")]),_._v(" "),v("p",[_._v("->")]),_._v(" "),v("p",[_._v("可以用openFeign将替我们完成上面的"),v("strong",[_._v("服务拉取、负载均衡、发送http请求")]),_._v("的所有工作")]),_._v(" "),v("p",[_._v("抽取feign客户端")]),_._v(" "),v("ol",[v("li",[_._v("抽取为一个api模块——》适用于一个服务一个模块")]),_._v(" "),v("li",[_._v("每个服务模块抽取出一个DTO和Client模块，供其他服务模块依赖引入——适用于一个服务一个project")])]),_._v(" "),v("h1",{attrs:{id:"网关"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#网关"}},[_._v("#")]),_._v(" 网关")]),_._v(" "),v("p",[_._v("由于每个微服务都有不同的地址或端口，入口不同，相信大家在与前端联调的时候发现了一些问题：")]),_._v(" "),v("ul",[v("li",[v("strong",[_._v("请求不同数据时要访问不同的入口，需要维护多个入口地址")]),_._v("，麻烦")]),_._v(" "),v("li",[_._v("前端无法调用nacos，无法实时更新服务列表")])]),_._v(" "),v("p",[_._v("单体架构时我们只需要完成一次用户登录、身份校验，就可以在所有业务中获取到用户信息。而微服务拆分后，每个微服务都独立部署，这就存在一些问题：")]),_._v(" "),v("ul",[v("li",[v("strong",[_._v("每个微服务都需要编写登录校验、用户信息获取的功能吗")]),_._v("？")]),_._v(" "),v("li",[_._v("当微服务之间调用时，该如何传递用户信息？")])])])}),[],!1,null,null,null);v.default=r.exports}}]);