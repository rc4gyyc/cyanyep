(window.webpackJsonp=window.webpackJsonp||[]).push([[49],{422:function(v,_,a){"use strict";a.r(_);var t=a(1),r=Object(t.a)({},(function(){var v=this,_=v._self._c;return _("ContentSlotsDistributor",{attrs:{"slot-key":v.$parent.slotKey}},[_("h2",{attrs:{id:"什么是jvm"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#什么是jvm"}},[v._v("#")]),v._v(" 什么是JVM")]),v._v(" "),_("ol",[_("li",[v._v("jvm指的是java虚拟机，本质上是一个运行在计算机上的程序，他的职责就是运行java字节码文件，作用是为了支持跨平台特性")]),v._v(" "),_("li",[v._v("jvm的功能有三项：第一是解释执行字节码指令；第二是管理内存中对象的分配，完成自动的垃圾回收，第三是优化热点代码提升执行效率")]),v._v(" "),_("li",[v._v("jvm的"),_("strong",[v._v("组成")]),v._v("分为类加载子系统、运行时数据区、执行引擎、本地方法接口")]),v._v(" "),_("li",[v._v("常用jvm是Oracle提供的hotspot虚拟机，还有graalVM、龙井、OpenJ9")])]),v._v(" "),_("p",[_("img",{attrs:{src:"C:%5CUsers%5C86157%5CDesktop%5Cblog-img%5Cimg%5Coutput-1745841362200-3.png",alt:"output"}})]),v._v(" "),_("h2",{attrs:{id:"字节码文件的组成"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#字节码文件的组成"}},[v._v("#")]),v._v(" 字节码文件的组成")]),v._v(" "),_("p",[v._v("https://blog.csdn.net/m0_71386740/article/details/140822318")]),v._v(" "),_("p",[v._v("字节码是java虚拟机执行的一种指令格式")]),v._v(" "),_("p",[v._v("字节码文件本质上是二进制文件，无法直接打开，需要用专业的工具")]),v._v(" "),_("ol",[_("li",[v._v("开发环境中用jclasslib插件")]),v._v(" "),_("li",[v._v("服务器环境使用javap -v命令")])]),v._v(" "),_("p",[v._v("五个组成部分")]),v._v(" "),_("ol",[_("li",[v._v("基本信息：魔数、字节码文件对应的java版本号、访问标识、父类和接口")]),v._v(" "),_("li",[v._v("字符串常量池：字符串常量、类和接口名、字段名，主要在字节码指令中使用")]),v._v(" "),_("li",[v._v("字段：当前类或接口声明的字段信息")]),v._v(" "),_("li",[v._v("方法：当前类或接口声明的方法信息，包含字节码指令")]),v._v(" "),_("li",[v._v("属性：类的")])]),v._v(" "),_("h2",{attrs:{id:"说一下-jvm-运行时数据区"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#说一下-jvm-运行时数据区"}},[v._v("#")]),v._v(" 说一下 JVM 运行时数据区")]),v._v(" "),_("p",[v._v("组成部分：堆、方法区、栈、本地方法栈、程序计数器")]),v._v(" "),_("p",[v._v("1、堆解决的是对象实例存储的问题，垃圾回收器管理的主要区域。")]),v._v(" "),_("p",[v._v("2、方法区可以认为是堆的一部分，用于存储已被虚拟机加载的信息，常量、静态变量、即时编译器编译后的代码。")]),v._v(" "),_("p",[v._v("3、栈解决的是程序运行的问题，栈里面存的是栈帧，栈帧里面存的是局部变量表、操作数栈、动态链接、方法出口等信息。")]),v._v(" "),_("p",[v._v("4、本地方法栈与栈功能相同，本地方法栈执行的是本地方法，一个Java调用非Java代码的接口。")]),v._v(" "),_("p",[v._v("5、程序计数器（PC寄存器）程序计数器中存放的是当前线程所执行的字节码的行数。JVM工作时就是通过改变这个计数器的值来选取下一个需要执行的字节码指令。")]),v._v(" "),_("h2",{attrs:{id:"java堆"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#java堆"}},[v._v("#")]),v._v(" Java堆")]),v._v(" "),_("ul",[_("li",[v._v("线程共享的区域：主要用来保存对像实例，数组等，内存不够则抛出OutOfMemoryError异常.")]),v._v(" "),_("li",[v._v("组成：年轻代+老年代\n"),_("ul",[_("li",[v._v("年轻代被划分为三部分，Eden区和两个大小严格相同的Survivor区，根据JVM的策略，在经过几次垃圾收集后，任然存活于Survivor的对象将被移动到老年代区间。")]),v._v(" "),_("li",[v._v("老年代主要保存生命周期长的对像，一般是一些老的对象")])])]),v._v(" "),_("li",[v._v("Jdk1.7和1.8的区别\n"),_("ul",[_("li",[v._v("1.7中有有一个永久代，存储的是类信息、静态变量、常量、编译后的代码")]),v._v(" "),_("li",[v._v("18移除了永久代，把数据存储到了本地内存的元空间中，防止内存溢出")]),v._v(" "),_("li",[v._v("元空间保存的类信息、静态变量、常量、编译后的代码")])])])]),v._v(" "),_("h2",{attrs:{id:"什么是虚拟机栈"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#什么是虚拟机栈"}},[v._v("#")]),v._v(" 什么是虚拟机栈")]),v._v(" "),_("p",[v._v("每个线程运行时所需要的内存，称为虚拟机栈\n每个栈由多个栈帧(frame)组成，对应着每次方法调用时所占用的内存\n每个线程只能有一个活动栈帧，对应着当前正在执行的那个方法")]),v._v(" "),_("h3",{attrs:{id:"垃圾回收是否涉及栈内存"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#垃圾回收是否涉及栈内存"}},[v._v("#")]),v._v(" 垃圾回收是否涉及栈内存？")]),v._v(" "),_("p",[v._v("垃圾回收主要指就是堆内存，当栈帧弹栈以后，内存就会释放")]),v._v(" "),_("h3",{attrs:{id:"栈内存分配越大越好吗"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#栈内存分配越大越好吗"}},[v._v("#")]),v._v(" 栈内存分配越大越好吗？")]),v._v(" "),_("p",[v._v("未必，默认的栈内存通常为1024k，而机器总内存是固定的，单个栈内存过大会导致线程数变少")]),v._v(" "),_("h3",{attrs:{id:"方法内的局部变量是否线程安全"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#方法内的局部变量是否线程安全"}},[v._v("#")]),v._v(" 方法内的局部变量是否线程安全？")]),v._v(" "),_("p",[v._v("如果方法内局部变量没有逃离方法的作用范围，它是线程安全的\n如果是局部变量引用了对象，并逃离方法的作用范围，需要考虑线程安全")]),v._v(" "),_("h3",{attrs:{id:"什么情况下会导致栈内存溢出"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#什么情况下会导致栈内存溢出"}},[v._v("#")]),v._v(" 什么情况下会导致栈内存溢出？")]),v._v(" "),_("p",[v._v("栈帧过多导致栈内存溢出，典型问题：递归调用\n栈帧过大导致栈内存溢出")]),v._v(" "),_("h3",{attrs:{id:"堆栈的区别是什么"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#堆栈的区别是什么"}},[v._v("#")]),v._v(" 堆栈的区别是什么？")]),v._v(" "),_("ul",[_("li",[v._v("栈内存一般会用来存储局部变量和方法调用，但堆内存是用来存储)ava对象和数组的的。堆会GC垃圾回收，而栈不会。")]),v._v(" "),_("li",[v._v("栈内存是线程私有的，而堆内存是线程共有的。")]),v._v(" "),_("li",[v._v("栈内存或者堆内存不足都会抛出异常，但两者异常错误不同。\n"),_("ul",[_("li",[v._v("栈空间不足：java.lang.StackOverFlowError..")]),v._v(" "),_("li",[v._v("堆空间不足：java.lang.OutOfMemoryError.")])])])]),v._v(" "),_("h2",{attrs:{id:"能不能解释一下方法区"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#能不能解释一下方法区"}},[v._v("#")]),v._v(" 能不能解释一下方法区")]),v._v(" "),_("ul",[_("li",[_("p",[v._v("方法区(Method Area)是各个线程共享的内存区域")])]),v._v(" "),_("li",[_("p",[v._v("主要存储类的信息、运行时常量池")])]),v._v(" "),_("li",[_("p",[v._v("虚拟机启动的时候创建，关闭虚拟机时释放")])]),v._v(" "),_("li",[_("p",[v._v("如果方法区域中的内存无法满足分配请求，则会抛出OutOfMemoryError:Metaspace")])])]),v._v(" "),_("h3",{attrs:{id:"运行时常量池"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#运行时常量池"}},[v._v("#")]),v._v(" 运行时常量池")]),v._v(" "),_("ul",[_("li",[_("p",[v._v("常量池：可以看作是一张表，虚拟机指令根据这张常量表找到要执行的类名、方法名、参数类型、字面量等信息")])]),v._v(" "),_("li",[_("p",[v._v("当类被加载，它的常量池信息就会放入运行时常量池，并把里面的符号地址变为真实地址")])])]),v._v(" "),_("h2",{attrs:{id:"oom怎么解决"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#oom怎么解决"}},[v._v("#")]),v._v(" OOM怎么解决")]),v._v(" "),_("p",[v._v("当遇到 OOM 时，我会首先明确是哪种内存区域的 OOM。如果是堆内存 OOM，我会检查代码是否有内存泄漏，并使用工具分析堆转储文件。同时，我会调整 JVM 参数，增加堆内存大小。如果是元空间 OOM，我会检查是否有过多的类加载，并调整元空间大小。对于栈内存 OOM，我会优化线程使用，并调整线程栈大小。最后，我会通过监控工具实时监控 JVM 内存使用情况，确保问题不再发生。")]),v._v(" "),_("p",[_("strong",[v._v("加分项")])]),v._v(" "),_("ul",[_("li",[v._v("提到具体的工具（如 "),_("strong",[v._v("MAT")]),v._v("、"),_("strong",[v._v("VisualVM")]),v._v("、JProfiler）。")]),v._v(" "),_("li",[v._v("提到具体的 JVM 参数（如 "),_("code",[v._v("-Xmx")]),v._v("、-Xms、"),_("code",[v._v("-XX:PrintGCDetails")]),v._v("、"),_("code",[v._v("-XX:HeapDumpOnOutOfMomoryError")]),v._v("）。")]),v._v(" "),_("li",[v._v("提到如何预防 OOM（如代码优化、监控）。")])]),v._v(" "),_("h2",{attrs:{id:"jdk6-8内存区域的不同"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#jdk6-8内存区域的不同"}},[v._v("#")]),v._v(" jdk6-8内存区域的不同")]),v._v(" "),_("p",[v._v("jdk6堆中有方法区，方法区有永久代实现，字符串常量池在方法区中")]),v._v(" "),_("p",[v._v("jdk7字符串常量池移到堆中")]),v._v(" "),_("p",[v._v("jdk8去掉永久代，改用元空间，元空间在直接内存中，")])])}),[],!1,null,null,null);_.default=r.exports}}]);