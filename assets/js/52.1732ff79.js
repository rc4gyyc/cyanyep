(window.webpackJsonp=window.webpackJsonp||[]).push([[52],{425:function(s,a,t){"use strict";t.r(a);var e=t(1),r=Object(e.a)({},(function(){var s=this,a=s._self._c;return a("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[a("h2",{attrs:{id:"jvm-调优的参数可以在哪里设置参数值"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#jvm-调优的参数可以在哪里设置参数值"}},[s._v("#")]),s._v(" JVM 调优的参数可以在哪里设置参数值")]),s._v(" "),a("h3",{attrs:{id:"tomcat的设置vm参数"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#tomcat的设置vm参数"}},[s._v("#")]),s._v(" tomcat的设置vm参数")]),s._v(" "),a("p",[s._v("修改TOMCAT_HOME/bin/catalina.sh文件，如下图")]),s._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('JAVA_OPTS="-Xms512m -Xmx1024m"\n')])])]),a("p",[a("img",{attrs:{src:"C:%5CUsers%5C86157%5CDesktop%5Cblog-img%5Cimg%5C1746085995661-13.png",alt:"img"}})]),s._v(" "),a("h3",{attrs:{id:"springboot项目jar文件启动"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#springboot项目jar文件启动"}},[s._v("#")]),s._v(" springboot项目jar文件启动")]),s._v(" "),a("p",[s._v("通常在linux系统下直接加参数启动springboot项目")]),s._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("nohup java -Xms512m -Xmx1024m -jar xxxx.jar --spring.profiles.active=prod &\n")])])]),a("blockquote",[a("p",[s._v("nohup  :  用于在系统后台不挂断地运行命令，退出终端不会影响程序的运行")]),s._v(" "),a("p",[s._v("参数 "),a("strong",[s._v("&")]),s._v("  ：让命令在后台执行，终端退出后命令仍旧执行。")])]),s._v(" "),a("h2",{attrs:{id:"用的-jvm-调优的参数都有哪些"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#用的-jvm-调优的参数都有哪些"}},[s._v("#")]),s._v(" 用的 JVM 调优的参数都有哪些")]),s._v(" "),a("p",[s._v("对于JVM调优，主要就是调整年轻代、老年代、元空间的内存空间大小及使用的垃圾回收器类型。")]),s._v(" "),a("p",[s._v("https://www.oracle.com/java/technologies/javase/vmoptions-jsp.html")]),s._v(" "),a("h3",{attrs:{id:"设置堆空间大小"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#设置堆空间大小"}},[s._v("#")]),s._v(" 设置堆空间大小")]),s._v(" "),a("p",[s._v("设置堆的初始大小和最大大小")]),s._v(" "),a("blockquote",[a("p",[s._v("-Xms：设置堆的初始化大小")]),s._v(" "),a("p",[s._v("-Xmx：设置堆的最大大小")])]),s._v(" "),a("p",[s._v("堆空间最大大小的默认值是物理内存的1/4，初始大小是物理内存的1/64")]),s._v(" "),a("p",[s._v("为了防止垃圾收集器在初始大小、最大大小之间收缩堆而产生额外的时间，通常把最大、初始大小设置为相同的值。")]),s._v(" "),a("p",[s._v("堆太小，可能会频繁的导致年轻代和老年代的垃圾回收，会产生stw,暂停用户线程\n堆内存大肯定是好的，存在风险，假如发生了fullgc，它会扫描整个堆空间，暂停用户线程的时间长")]),s._v(" "),a("p",[s._v("设置参考推荐：尽量大，也要考察一下当前计算机其他程序的内存使用情况")]),s._v(" "),a("h3",{attrs:{id:"虚拟机栈的设置"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#虚拟机栈的设置"}},[s._v("#")]),s._v(" 虚拟机栈的设置")]),s._v(" "),a("p",[a("strong",[s._v("每个线程默认会开启1M的堆栈")]),s._v("，用于存放栈帧、调用参数、局部变量等，但一般256K就够用。通常减少每个线程的堆栈，可以产生更多的线程，但这实际上还受限于操作系统。")]),s._v(" "),a("blockquote",[a("p",[s._v("-Xss   对每个线程stack大小的调整，-Xss128k")])]),s._v(" "),a("h3",{attrs:{id:"年轻代中eden区和两个survivor区的大小比例"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#年轻代中eden区和两个survivor区的大小比例"}},[s._v("#")]),s._v(" 年轻代中Eden区和两个Survivor区的大小比例")]),s._v(" "),a("p",[s._v("该值如果不设置，则默认比例为8:1:1。Java官方通过增大Eden区的大小（survivor永远只占2份），来减少YGC发生的次数，但有时我们发现，虽然次数减少了，但Eden区满的时候，由于占用的空间较大，导致释放缓慢，此时STW的时间较长，因此需要按照程序情况去调优。")]),s._v(" "),a("blockquote",[a("p",[s._v("-XXSurvivorRatio=3，表示年轻代中的分配比率：survivor:eden = 2:3")])]),s._v(" "),a("h3",{attrs:{id:"年轻代和老年代的比例"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#年轻代和老年代的比例"}},[s._v("#")]),s._v(" 年轻代和老年代的比例")]),s._v(" "),a("p",[s._v("年轻代和老年代默认比例为1：2。可以通过调整二者空间大小比率来设置两者的大小。")]),s._v(" "),a("blockquote",[a("p",[s._v("-XX:newSize   设置年轻代的初始大小")]),s._v(" "),a("p",[s._v("-XX:MaxNewSize   设置年轻代的最大大小")])]),s._v(" "),a("p",[s._v("初始大小和最大大小两个值通常相同")]),s._v(" "),a("h3",{attrs:{id:"年轻代晋升老年代阈值"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#年轻代晋升老年代阈值"}},[s._v("#")]),s._v(" 年轻代晋升老年代阈值")]),s._v(" "),a("p",[s._v("8）一般情况下，年轻对象放在eden区，当第一次GC后，如果对象还存活，放到survivor区，此后，每GC一次，年龄增加1，当对象的年龄达到阈值，就被放到tenured老年区。")]),s._v(" "),a("blockquote",[a("p",[s._v("-XX:MaxTenuringThreshold = 15 表示存活15次后晋升老年代")])]),s._v(" "),a("p",[s._v("如果想让对象留在年轻代，可以设置比较大的阈值。默认为15。"),a("strong",[s._v("取值范围0-15")])]),s._v(" "),a("p",[s._v("5）一般来说，当survivor区不够大或者占用量达到50%，就会把一些对象放到老年区。通过设置合理的eden区，survivor区及使用率，可以将年轻对象保存在年轻代，从而避免full GC，使用-Xmn设置年轻代的大小")]),s._v(" "),a("p",[s._v("7）对于占用内存比较多的大对象，一般会选择在老年代分配内存。如果在年轻代给大对象分配内存，年轻代内存不够了，就要在eden区移动大量对象到老年代，然后这些移动的对象可能很快消亡，因此导致full GC。通过设置参数：-XX:PetenureSizeThreshold=1000000，单位为B，标明对象大小超过1M时，在老年代(tenured)分配内存空间。")]),s._v(" "),a("h3",{attrs:{id:"设置垃圾回收收集器"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#设置垃圾回收收集器"}},[s._v("#")]),s._v(" 设置垃圾回收收集器")]),s._v(" "),a("blockquote",[a("p",[s._v("-XX:+UseParallelGC:年轻代使用并行垃圾回收收集器。这是一个关注吞吐量的收集器，可以尽可能的减少垃圾回收时间。")]),s._v(" "),a("p",[s._v("-XX:+UseParallelOldGC:设置老年代使用并行垃圾回收收集器。")]),s._v(" "),a("p",[s._v("-XX:+UseG1GC:设置年轻代和老年代都使用G1垃圾回收收集器。")]),s._v(" "),a("p",[s._v("-XX:+UseConcMarkSweepGC:老年代使用CMS收集器降低停顿。")])]),s._v(" "),a("p",[s._v("6）系统CPU持续飙高的话，首先先排查代码问题，如果代码没问题，则咨询运维或者云服务器供应商，通常服务器重启或者服务器迁移即可解决。")]),s._v(" "),a("p",[s._v("9）尝试使用大的内存分页：使用大的内存分页增加CPU的内存寻址能力，从而系统的性能。")]),s._v(" "),a("blockquote",[a("p",[s._v("-XX:+LargePageSizeInBytes 设置内存页的大小")])]),s._v(" "),a("h2",{attrs:{id:"说一下-jvm-调优的工具"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#说一下-jvm-调优的工具"}},[s._v("#")]),s._v(" 说一下 JVM 调优的工具？")]),s._v(" "),a("h3",{attrs:{id:"命令工具"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#命令工具"}},[s._v("#")]),s._v(" 命令工具")]),s._v(" "),a("h4",{attrs:{id:"jps-java-process-status"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#jps-java-process-status"}},[s._v("#")]),s._v(" jps（Java Process Status）")]),s._v(" "),a("p",[s._v("输出JVM中运行的进程状态信息(现在一般使用jconsole)")]),s._v(" "),a("p",[a("img",{attrs:{src:"C:%5CUsers%5C86157%5CDesktop%5Cblog-img%5Cimg%5C1746102531346-16.png",alt:"img"}})]),s._v(" "),a("h4",{attrs:{id:"jstack"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#jstack"}},[s._v("#")]),s._v(" jstack")]),s._v(" "),a("p",[s._v("查看java进程内"),a("strong",[s._v("线程的堆栈")]),s._v("信息。")]),s._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("jstack [option] <pid>  \n")])])]),a("h4",{attrs:{id:"jmap"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#jmap"}},[s._v("#")]),s._v(" jmap")]),s._v(" "),a("p",[s._v("用于生成堆转存快照")]),s._v(" "),a("blockquote",[a("p",[s._v("jmap [options] pid  内存映像信息")]),s._v(" "),a("p",[s._v("jmap -heap pid   显示Java堆的信息")]),s._v(" "),a("p",[s._v("jmap -dump:format=b,file=heap.hprof pid")]),s._v(" "),a("p",[s._v("​                format=b表示以hprof二进制格式转储Java堆的内存")]),s._v(" "),a("p",[s._v("​                file="),a("filename",[s._v("用于指定快照dump文件的文件名。")])],1)]),s._v(" "),a("p",[s._v("例：显示了某一个java运行的堆信息")]),s._v(" "),a("div",{staticClass:"language-Java extra-class"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("C")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v("\\"),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Users")]),s._v("\\yuhon"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v("jmap "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),s._v("heap "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("53280")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Attaching")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("to")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token namespace"}},[s._v("process")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("ID")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("53280")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" please wait"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Debugger")]),s._v(" attached "),a("span",{pre:!0,attrs:{class:"token class-name"}},[a("span",{pre:!0,attrs:{class:"token namespace"}},[s._v("successfully"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")])]),s._v("\nServer")]),s._v(" compiler detected"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token constant"}},[s._v("JVM")]),s._v(" version is "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("25.321")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),s._v("b07\n\nusing thread"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),s._v("local object "),a("span",{pre:!0,attrs:{class:"token class-name"}},[a("span",{pre:!0,attrs:{class:"token namespace"}},[s._v("allocation"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")])]),s._v("\nParallel")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token constant"}},[s._v("GC")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("with")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("8")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("thread")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("s"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("   "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//并行的垃圾回收器")]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Heap")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Configuration")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v("  "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//堆配置")]),s._v("\n   "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("MinHeapFreeRatio")]),s._v("         "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("   "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//空闲堆空间的最小百分比")]),s._v("\n   "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("MaxHeapFreeRatio")]),s._v("         "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("100")]),s._v("  "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//空闲堆空间的最大百分比")]),s._v("\n   "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("MaxHeapSize")]),s._v("              "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("8524922880")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("8130.0")]),a("span",{pre:!0,attrs:{class:"token constant"}},[s._v("MB")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//堆空间允许的最大值")]),s._v("\n   "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("NewSize")]),s._v("                  "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("178257920")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("170.0")]),a("span",{pre:!0,attrs:{class:"token constant"}},[s._v("MB")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//新生代堆空间的默认值")]),s._v("\n   "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("MaxNewSize")]),s._v("               "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("2841640960")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("2710.0")]),a("span",{pre:!0,attrs:{class:"token constant"}},[s._v("MB")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//新生代堆空间允许的最大值")]),s._v("\n   "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("OldSize")]),s._v("                  "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("356515840")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("340.0")]),a("span",{pre:!0,attrs:{class:"token constant"}},[s._v("MB")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//老年代堆空间的默认值")]),s._v("\n   "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("NewRatio")]),s._v("                 "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//新生代与老年代的堆空间比值，表示新生代：老年代=1：2")]),s._v("\n   "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("SurvivorRatio")]),s._v("            "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("8")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//两个Survivor区和Eden区的堆空间比值为8,表示S0:S1:Eden=1:1:8")]),s._v("\n   "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("MetaspaceSize")]),s._v("            "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("21807104")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("20.796875")]),a("span",{pre:!0,attrs:{class:"token constant"}},[s._v("MB")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//元空间的默认值")]),s._v("\n   "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("CompressedClassSpaceSize")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1073741824")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1024.0")]),a("span",{pre:!0,attrs:{class:"token constant"}},[s._v("MB")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//压缩类使用空间大小")]),s._v("\n   "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("MaxMetaspaceSize")]),s._v("         "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("17592186044415")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token constant"}},[s._v("MB")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//元空间允许的最大值")]),s._v("\n   "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("G1HeapRegionSize")]),s._v("         "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.0")]),a("span",{pre:!0,attrs:{class:"token constant"}},[s._v("MB")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//在使用 G1 垃圾回收算法时，JVM 会将 Heap 空间分隔为若干个 Region，该参数用来指定每个 Region 空间的大小。")]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Heap")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Usage")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token constant"}},[s._v("PS")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Young")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Generation")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Eden")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Space")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//Eden使用情况")]),s._v("\n   capacity "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("134217728")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("128.0")]),a("span",{pre:!0,attrs:{class:"token constant"}},[s._v("MB")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n   used     "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("10737496")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("10.240074157714844")]),a("span",{pre:!0,attrs:{class:"token constant"}},[s._v("MB")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n   free     "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("123480232")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("117.75992584228516")]),a("span",{pre:!0,attrs:{class:"token constant"}},[s._v("MB")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("8.000057935714722")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("%")]),s._v(" used\n"),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("From")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Space")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//Survivor-From 使用情况")]),s._v("\n   capacity "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("22020096")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("21.0")]),a("span",{pre:!0,attrs:{class:"token constant"}},[s._v("MB")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n   used     "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.0")]),a("span",{pre:!0,attrs:{class:"token constant"}},[s._v("MB")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n   free     "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("22020096")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("21.0")]),a("span",{pre:!0,attrs:{class:"token constant"}},[s._v("MB")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.0")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("%")]),s._v(" used\n"),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("To")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Space")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//Survivor-To 使用情况")]),s._v("\n   capacity "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("22020096")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("21.0")]),a("span",{pre:!0,attrs:{class:"token constant"}},[s._v("MB")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n   used     "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.0")]),a("span",{pre:!0,attrs:{class:"token constant"}},[s._v("MB")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n   free     "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("22020096")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("21.0")]),a("span",{pre:!0,attrs:{class:"token constant"}},[s._v("MB")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.0")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("%")]),s._v(" used\n"),a("span",{pre:!0,attrs:{class:"token constant"}},[s._v("PS")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Old")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Generation")]),s._v("  "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//老年代 使用情况")]),s._v("\n   capacity "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("356515840")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("340.0")]),a("span",{pre:!0,attrs:{class:"token constant"}},[s._v("MB")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n   used     "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.0")]),a("span",{pre:!0,attrs:{class:"token constant"}},[s._v("MB")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n   free     "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("356515840")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("340.0")]),a("span",{pre:!0,attrs:{class:"token constant"}},[s._v("MB")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.0")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("%")]),s._v(" used\n\n"),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("3185")]),s._v(" interned "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Strings")]),s._v(" occupying "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("261264")]),s._v(" bytes"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("\n")])])]),a("h4",{attrs:{id:"jhat"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#jhat"}},[s._v("#")]),s._v(" jhat")]),s._v(" "),a("p",[s._v("用于分析jmap生成的堆转存快照（一般不推荐使用，而是使用Ecplise Memory Analyzer）")]),s._v(" "),a("h4",{attrs:{id:"jstat"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#jstat"}},[s._v("#")]),s._v(" jstat")]),s._v(" "),a("p",[s._v("是JVM统计监测工具。可以用来显示垃圾回收信息、类加载信息、新生代统计信息等。")]),s._v(" "),a("p",[a("strong",[s._v("常见参数")]),s._v("：")]),s._v(" "),a("p",[s._v("①总结垃圾回收统计")]),s._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("jstat -gcutil pid\n")])])]),a("p",[a("img",{attrs:{src:"C:%5CUsers%5C86157%5CDesktop%5Cblog-img%5Cimg%5C1746103838813-19.png",alt:"img"}})]),s._v(" "),a("table",[a("thead",[a("tr",[a("th",[s._v("字段")]),s._v(" "),a("th",[s._v("含义")])])]),s._v(" "),a("tbody",[a("tr",[a("td",[s._v("S0")]),s._v(" "),a("td",[s._v("幸存1区当前使用比例")])]),s._v(" "),a("tr",[a("td",[s._v("S1")]),s._v(" "),a("td",[s._v("幸存2区当前使用比例")])]),s._v(" "),a("tr",[a("td",[s._v("E")]),s._v(" "),a("td",[s._v("伊甸园区使用比例")])]),s._v(" "),a("tr",[a("td",[s._v("O")]),s._v(" "),a("td",[s._v("老年代使用比例")])]),s._v(" "),a("tr",[a("td",[s._v("M")]),s._v(" "),a("td",[s._v("元数据区使用比例")])]),s._v(" "),a("tr",[a("td",[s._v("CCS")]),s._v(" "),a("td",[s._v("压缩使用比例")])]),s._v(" "),a("tr",[a("td",[s._v("YGC")]),s._v(" "),a("td",[s._v("年轻代垃圾回收次数")])]),s._v(" "),a("tr",[a("td",[s._v("YGCT")]),s._v(" "),a("td",[s._v("年轻代垃圾回收消耗时间")])]),s._v(" "),a("tr",[a("td",[s._v("FGC")]),s._v(" "),a("td",[s._v("老年代垃圾回收次数")])]),s._v(" "),a("tr",[a("td",[s._v("FGCT")]),s._v(" "),a("td",[s._v("老年代垃圾回收消耗时间")])]),s._v(" "),a("tr",[a("td",[s._v("GCT")]),s._v(" "),a("td",[s._v("垃圾回收消耗总时间")])])])]),s._v(" "),a("p",[s._v("②垃圾回收统计")]),s._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("jstat -gc pid\n")])])]),a("p",[a("img",{attrs:{src:"C:%5CUsers%5C86157%5CDesktop%5Cblog-img%5Cimg%5C1746103847420-22.png",alt:"img"}})]),s._v(" "),a("p",[s._v("-C 容量\n-U 已使用")]),s._v(" "),a("h3",{attrs:{id:"可视化工具"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#可视化工具"}},[s._v("#")]),s._v(" 可视化工具")]),s._v(" "),a("h4",{attrs:{id:"jconsole"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#jconsole"}},[s._v("#")]),s._v(" jconsole")]),s._v(" "),a("p",[s._v("用于对jvm的内存，线程，类 的监控，是一个基于 jmx 的 GUI 性能监控工具")]),s._v(" "),a("p",[s._v("打开方式：java 安装目录 bin目录下 直接启动 jconsole.exe 就行")]),s._v(" "),a("p",[a("img",{attrs:{src:"C:%5CUsers%5C86157%5CDesktop%5Cblog-img%5Cimg%5C1746104223790-25.png",alt:"img"}})]),s._v(" "),a("p",[s._v("可以查看内存、线程、类等信息")]),s._v(" "),a("p",[a("img",{attrs:{src:"C:%5CUsers%5C86157%5CDesktop%5Cblog-img%5Cimg%5C1746104764329-28.png",alt:"img"}})]),s._v(" "),a("h4",{attrs:{id:"visualvm-故障处理工具"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#visualvm-故障处理工具"}},[s._v("#")]),s._v(" VisualVM：故障处理工具")]),s._v(" "),a("p",[s._v("能够监控线程，内存情况，查看方法的CPU时间和内存中的对 象，已被GC的对象，反向查看分配的堆栈")]),s._v(" "),a("p",[s._v("打开方式：java 安装目录(jdk8以上需要下载) bin目录下 直接启动 jvisualvm.exe就行")]),s._v(" "),a("p",[s._v("监控程序运行情况")]),s._v(" "),a("p",[a("img",{attrs:{src:"C:%5CUsers%5C86157%5CDesktop%5Cblog-img%5Cimg%5C1746104887982-31.png",alt:"img"}})]),s._v(" "),a("p",[s._v("查看运行中的dump")]),s._v(" "),a("p",[a("img",{attrs:{src:"C:%5CUsers%5C86157%5CDesktop%5Cblog-img%5Cimg%5C1746104896117-34.png",alt:"img"}})]),s._v(" "),a("p",[s._v("查看堆中的信息")]),s._v(" "),a("p",[a("img",{attrs:{src:"C:%5CUsers%5C86157%5CDesktop%5Cblog-img%5Cimg%5C1746104907805-37.png",alt:"img"}})]),s._v(" "),a("h2",{attrs:{id:"java内存泄露的排查思路"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#java内存泄露的排查思路"}},[s._v("#")]),s._v(" java内存泄露的排查思路")]),s._v(" "),a("h3",{attrs:{id:"原因"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#原因"}},[s._v("#")]),s._v(" 原因")]),s._v(" "),a("p",[s._v("如果线程请求分配的栈容量超过java虚拟机栈允许的最大容量的时候，java虚拟机将抛出一个StackOverFlowError异常")]),s._v(" "),a("p",[s._v("如果java虚拟机栈可以动态拓展，并且扩展的动作已经尝试过，但是目前无法申请到足够的内存去完成拓展，或者在建立新线程的时候没有足够的内存去创建对应的虚拟机栈，那java虚拟机将会抛出一个OutOfMemoryError异常")]),s._v(" "),a("p",[s._v("如果一次加载的类太多，元空间内存不足，则会报OutOfMemoryError: Metaspace")]),s._v(" "),a("p",[a("img",{attrs:{src:"C:%5CUsers%5C86157%5CDesktop%5Cblog-img%5Cimg%5C1746105607592-40.png",alt:"img"}})]),s._v(" "),a("h3",{attrs:{id:"解决"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#解决"}},[s._v("#")]),s._v(" 解决")]),s._v(" "),a("p",[s._v("1、通过jmap指定打印他的内存快照 dump(Dump文件是进程的内存镜像。可以把程序的执行状态通过调试器保存到dump文件中)")]),s._v(" "),a("ul",[a("li",[s._v("使用jmap命令获取运行中程序的dump文件")])]),s._v(" "),a("blockquote",[a("p",[s._v("jmap -dump:format=b,file=heap.hprof pid")])]),s._v(" "),a("ul",[a("li",[s._v("使用vm参数获取dump文件")])]),s._v(" "),a("p",[s._v("有的情况是内存溢出之后程序则会直接中断，而jmap只能打印在运行中的程序，所以建议通过参数的方式的生成dump文件，配置如下：")]),s._v(" "),a("blockquote",[a("p",[s._v("-XX:+HeapDumpOnOutOfMemoryError")]),s._v(" "),a("p",[s._v("-XX:HeapDumpPath=/home/app/dumps/      指定生成后文件的保存目录")])]),s._v(" "),a("p",[s._v("2、通过工具， VisualVM（Ecplise MAT）去分析 dump文件")]),s._v(" "),a("p",[s._v("VisualVM可以加载离线的dump文件")]),s._v(" "),a("p",[s._v("文件--\x3e装入---\x3e选择dump文件即可查看堆快照信息")]),s._v(" "),a("p",[s._v("如果是linux系统中的程序，则需要把dump文件下载到本地（windows环境）下，打开VisualVM工具分析。VisualVM目前只支持在windows环境下运行可视化")]),s._v(" "),a("p",[s._v("3、通过查看堆信息的情况，可以大概定位内存溢出是哪行代码出了问题")]),s._v(" "),a("p",[s._v("4、找到对应的代码，通过阅读上下文的情况，进行修复即可")]),s._v(" "),a("h3",{attrs:{id:"总结"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#总结"}},[s._v("#")]),s._v(" 总结")]),s._v(" "),a("p",[s._v("内存泄漏通常是指堆内存，通常是指一些大对象不被回收的情况\n1、通过jmap或设置jvm参数获取堆内存快照dump\n2、通过工具VisualVM去分析dump文件，VisualVMi可以加载离线的dump文件\n3、通过查看堆信息的情况，可以大慨定位内存溢出是哪行代码出了问题\n4、找到对应的代码，通过阅读上下文的情况，进行修复即可")]),s._v(" "),a("h2",{attrs:{id:"cpu飙高排查方案与思路"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#cpu飙高排查方案与思路"}},[s._v("#")]),s._v(" CPU飙高排查方案与思路？")]),s._v(" "),a("p",[s._v("1.使用top命令查看占用cpu的情况，查看是哪一个进程占用cpu较高，")]),s._v(" "),a("p",[s._v("2.查看当前线程中的进程信息")]),s._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("ps H -eo pid,tid,%CPU | grep 40940\n")])])]),a("p",[a("strong",[a("code",[s._v("ps")])]),s._v("：用于查看系统进程状态的命令。")]),s._v(" "),a("p",[a("strong",[a("code",[s._v("H")])]),s._v("：显示进程的线程（即 "),a("code",[s._v("threads")]),s._v(" 模式）。")]),s._v(" "),a("p",[a("code",[s._v("-eo pid,tid,%CPU")]),s._v("：自定义输出列：")]),s._v(" "),a("ul",[a("li",[a("strong",[a("code",[s._v("pid")])]),s._v("：进程 ID（Process ID）。")]),s._v(" "),a("li",[a("strong",[a("code",[s._v("tid")])]),s._v("：线程 ID（Thread ID）。")]),s._v(" "),a("li",[a("strong",[a("code",[s._v("%CPU")])]),s._v("：CPU 使用率百分比。")])]),s._v(" "),a("p",[s._v("3.通过上述执行结果分析CPU较高的线程")]),s._v(" "),a("p",[s._v("其中线程id是一个十进制，我们需要把这个线程id转换为16进制才行，因为通常在日志中展示的都是16进制的线程id名称")]),s._v(" "),a("p",[s._v("转换方式：")]),s._v(" "),a("p",[s._v("在linux中执行命令")]),s._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('printf "%x\\n" 30979\n')])])]),a("p",[s._v("4.可以根据线程 id 找到有问题的线程，进一步定位到问题代码的源码行号")]),s._v(" "),a("p",[s._v("执行命令")]),s._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("jstack 30978   此处是进程id\n")])])]),a("h2",{attrs:{id:"频繁fullgc问题如何排查"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#频繁fullgc问题如何排查"}},[s._v("#")]),s._v(" 频繁FullGC问题如何排查")]),s._v(" "),a("ol",[a("li",[a("p",[s._v("收集GC日志")]),s._v(" "),a("p",[s._v("首先，我们需要开启详细的GC日志。在VM参数中添加：")]),s._v(" "),a("p",[a("code",[s._v("-XX:+PrintGCDetails -XX:+PrintGCDateStamps -Xloggc:/path/to/gc.log")])])]),s._v(" "),a("li",[a("p",[s._v("分析GC日志")]),s._v(" "),a("p",[s._v("使用工具（如"),a("strong",[s._v("GCViewer")]),s._v("）分析GC日志，我们发现：")]),s._v(" "),a("ul",[a("li",[s._v("Full GC频率：每10分钟一次")]),s._v(" "),a("li",[s._v("每次Full GC耗时：平均3秒")]),s._v(" "),a("li",[s._v("Old Gen使用情况：每次GC后仍然保持在80%以上")])]),s._v(" "),a("p",[s._v("GC日志片段示例：")]),s._v(" "),a("p",[a("code",[s._v("2023-05-15T14:30:45.123+0800:[Full GC (Ergonomics)[PSYoungGen:20M->0M(60M)[ParoldG...")])])]),s._v(" "),a("li",[a("p",[s._v("监控JVM内存使用情况")]),s._v(" "),a("p",[s._v("使用工具如"),a("strong",[s._v("VisualVM")]),s._v("或"),a("strong",[s._v("JConsole")]),s._v("实时监控JVM内存使用。我们观察到：\nEden区：频繁被填满后触发Minor GC\nSurvivor区：经常接近满载\nOld Gen:持续增长，即使在Full GC后也难以下降")])]),s._v(" "),a("li",[a("p",[s._v("分析堆内存\n使用"),a("strong",[s._v("jmap")]),s._v("生成堆转储文件：(生成时间长会导致系统停顿，线上环境谨慎使用)\n"),a("code",[s._v("jmap -dump:format=b,file=heap_dump.hprof <pid>")])]),s._v(" "),a("p",[s._v("使用MAT(Memory Analyzer Tool)分析堆转储，发现：")]),s._v(" "),a("ul",[a("li",[s._v("大量的"),a("code",[s._v("com.example.Order")]),s._v(" 对象占用了Old Gen的大部分空间")]),s._v(" "),a("li",[s._v("这些 "),a("code",[s._v("Order")]),s._v("对象中包含了大量历史订单数据")])])]),s._v(" "),a("li",[a("p",[s._v("检查代码中的内存使用\n审查相关代码，发现问题：")])]),s._v(" "),a("li",[a("p",[s._v("调整JVM参数\n临时调整VM参数以缓解问题：")]),s._v(" "),a("p",[a("code",[s._v("-Xms4g -Xmx4g -XX:NewRatio=2 -XX:SurvivorRatio=8")])])]),s._v(" "),a("li",[a("p",[s._v("优化代码")])])]),s._v(" "),a("h2",{attrs:{id:"对象在堆中的-内存布局-⭐"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#对象在堆中的-内存布局-⭐"}},[s._v("#")]),s._v(" 对象在堆中的=="),a("strong",[s._v("内存布局")]),s._v("==⭐")]),s._v(" "),a("h2",{attrs:{id:"jdk9将string底层实现char-改为byte"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#jdk9将string底层实现char-改为byte"}},[s._v("#")]),s._v(" JDK9将String底层实现char[]改为byte[]")]),s._v(" "),a("p",[s._v("并没有将String底层实现char[]改为byte[]，而是引入了compact string的优化，减少string的内存消耗")]),s._v(" "),a("p",[s._v("java字符串在内部是由char[]来表示，jdk内部使用UTF-16意味着每个char由两个字节组成，如果一个字符串只包含一个英文字符/ASCII字符，只需要一个字节就可以表示，意味着字符串实际存储空间比需要存储的空间多一倍，")]),s._v(" "),a("p",[s._v("因此，jdk9引入compact string的优化，将char[]改为byte[]，只有存储非ASCII字符才会使用char[]，纯ASCII字符会存储在byte[]，从而节省一半空间")]),s._v(" "),a("p",[s._v("这个优化是在编译器和运行时环境实现的。透明的，使用jvm参数-xx: UseCompressedStrings")])])}),[],!1,null,null,null);a.default=r.exports}}]);